<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lhy的博客</title>
  <subtitle>Science technology and culture</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-30T16:14:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lhy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript小结-3</title>
    <link href="http://yoursite.com/2016/07/01/javascript%E5%B0%8F%E7%BB%93-3/"/>
    <id>http://yoursite.com/2016/07/01/javascript小结-3/</id>
    <published>2016-06-30T16:04:14.000Z</published>
    <updated>2016-06-30T16:14:25.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;php&quot;&gt;&lt;a href=&quot;#php&quot; class=&quot;headerlink&quot; title=&quot;php&quot;&gt;&lt;/a&gt;php&lt;/h1&gt;&lt;p&gt;P120&lt;/p&gt;
&lt;p&gt;学习一门新语言:语法,函数,库&lt;/p&gt;
&lt;p&gt;算法独立出语言&lt;/p&gt;
&lt;h1 id=&quot;typescipt&quot;&gt;&lt;a href=&quot;#typescipt&quot; class=&quot;headerlink&quot; title=&quot;typescipt&quot;&gt;&lt;/a&gt;typescipt&lt;/h1&gt;&lt;h1 id=&quot;jquery&quot;&gt;&lt;a href=&quot;#jquery&quot; class=&quot;headerlink&quot; title=&quot;jquery&quot;&gt;&lt;/a&gt;jquery&lt;/h1&gt;&lt;p&gt;P153&lt;/p&gt;
&lt;h2 id=&quot;jquery源码分析&quot;&gt;&lt;a href=&quot;#jquery源码分析&quot; class=&quot;headerlink&quot; title=&quot;jquery源码分析&quot;&gt;&lt;/a&gt;jquery源码分析&lt;/h2&gt;&lt;p&gt;P161&lt;br&gt;练习代码&lt;/p&gt;
&lt;h1 id=&quot;angular&quot;&gt;&lt;a href=&quot;#angular&quot; class=&quot;headerlink&quot; title=&quot;angular&quot;&gt;&lt;/a&gt;angular&lt;/h1&gt;&lt;h1 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;nodejs&lt;/h1&gt;&lt;h1 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h1&gt;&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;p&gt;《javascript权威指南》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;php&quot;&gt;&lt;a href=&quot;#php&quot; class=&quot;headerlink&quot; title=&quot;php&quot;&gt;&lt;/a&gt;php&lt;/h1&gt;&lt;p&gt;P120&lt;/p&gt;
&lt;p&gt;学习一门新语言:语法,函数,库&lt;/p&gt;
&lt;p&gt;算法独立出语言&lt;/p&gt;
&lt;h1 id=&quot;typescipt&quot;&gt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>面试题-前端</title>
    <link href="http://yoursite.com/2016/06/30/%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%89%8D%E7%AB%AF/"/>
    <id>http://yoursite.com/2016/06/30/面试题-前端/</id>
    <published>2016-06-30T14:48:16.000Z</published>
    <updated>2016-06-30T16:02:55.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;h1 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h1&gt;&lt;p&gt;1.&lt;a href=&quot;https://github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions/Questions-and-Answers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发面试题&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=401123752&amp;amp;idx=1&amp;amp;sn=06f51d5b97eff32453a4d4f1f470fc86&amp;amp;scene=1&amp;amp;srcid=0630crXOLAN1aUD2Z9Z7Ts9F&amp;amp;key=77421cf58af4a65365b167293befc93d92f7ffd02d23ffd09759ce0eace874a1aab092e8e8aa9f4b3e2fe57208e314a6&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2015 前端[JS]工程师必知必会&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;3.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=401105848&amp;amp;idx=1&amp;amp;sn=65e1ced1f8e3e305ff2c40aa8a08f24a&amp;amp;scene=1&amp;amp;srcid=0630DDYWwLxbaDZcLLYriRgE&amp;amp;key=77421cf58af4a65315c8bf65e2cecb44ebe452f876031a5771c9a887852b86521ffda7d4a0a1a2497fc85f063073b431&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2015年十大热点javascript笔试题你都会么&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;4.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=401828014&amp;amp;idx=1&amp;amp;sn=593db0f0d768db5ef62f8f1d14f3456a&amp;amp;scene=1&amp;amp;srcid=0630pH9cPQZ3nIV0D6Mr3Q9d&amp;amp;key=77421cf58af4a653091ed041e653f3a6d0a3fc33a1b1deab6d140d82de8a994549e75488c989bab143466ec86a5cb6b2&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端编码规范之CSS&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;5.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=402762473&amp;amp;idx=1&amp;amp;sn=2036b2a935c8edd5833a3a7d6bf5920e&amp;amp;scene=1&amp;amp;srcid=0630cCi17O1io26rBr2cjIFz&amp;amp;key=77421cf58af4a65361d78cc7dfa00921971d29c361c68fd17f7f7324b0737fc585e5dc3a58da235ed6435fcb1b1efa45&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一道常被人轻视的前端JS面试题&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;6.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=402789010&amp;amp;idx=1&amp;amp;sn=478d33b00fc9aaac34a874e08f5484a6&amp;amp;scene=1&amp;amp;srcid=06307ET3cSa7O8OsoyqJ1QUB&amp;amp;key=77421cf58af4a653501a7203c6176312db1aa7d9a987eb4ebf75e8e54d41ee0e79b179306d5b3caf77c718e8459fefee&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端大牛们都学过哪些东西&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;7.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403717032&amp;amp;idx=1&amp;amp;sn=214242b1cc788d6b9c5c6e57a006d307&amp;amp;scene=1&amp;amp;srcid=06307VjRE1jVJu6n68wO82XZ&amp;amp;key=77421cf58af4a6534244f61ec8177ac24b8e908f45e3c8d84bcb0e30c4b7eb618e403a9a908c2b44b64d39423a92c2b4&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【深入浅出jQuery】源码浅析–整体架构&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;8.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403691081&amp;amp;idx=1&amp;amp;sn=29b46db023ab9635d88132ea5c2a26fd&amp;amp;scene=1&amp;amp;srcid=0630iDglSpmXgCihFHFoJlcL&amp;amp;key=77421cf58af4a65335c15e8b003746ee64cb2d78b10dc107bf24fa7a12cc466925b512d2f0d989251acffd66bf707600&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【精华】9张思维导图带你学习Javascript&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;9.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403569151&amp;amp;idx=1&amp;amp;sn=501a38c3e80e411536a4fe024365b57c&amp;amp;scene=1&amp;amp;srcid=0630yEVcIX9UunnVJprilKPG&amp;amp;key=77421cf58af4a6539944103ea2907ca70944b13d195eae988a7b74a4ca46366c14af13902d082057e3dd0bf67c3b754c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;干货分享：让你分分钟学会 javascript 闭包&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403238396&amp;amp;idx=1&amp;amp;sn=4f35f9c565d5302984aab77c441d0038&amp;amp;scene=1&amp;amp;srcid=0630bybep9Hu8VT7feWn9b6W&amp;amp;key=77421cf58af4a653d61e3573d58e00ea41f4764f3837aa7eb04c9a9eb3f9e5f761eb224063f698006eca6a1ae52c6a1b&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何成为一名卓越的前端工程师&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403815851&amp;amp;idx=1&amp;amp;sn=aa61f9eb57c59a8d9b21ec1dc2076f8d&amp;amp;scene=1&amp;amp;srcid=0630TPDtRfU7OI41qW04tMCg&amp;amp;key=77421cf58af4a653a3b09e720a2a361a646965ac7682d2ed1f8e386c0efd28b7fa41121cc490c19a13b869b932a774fb&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 开发的45个经典技巧&lt;/a&gt;      &lt;/p&gt;
&lt;p&gt;12.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=2651493077&amp;amp;idx=1&amp;amp;sn=64570fdd751f14e1a79a578488f01dfb&amp;amp;scene=1&amp;amp;srcid=0630az4zYkRoopQJQoA6CzCD&amp;amp;key=77421cf58af4a65320bb330a677e643e41617fed3f80eee83979c8288f616abe6d92f3250dbdf8cf95a14db320f6854c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 Promise 的工作原理&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;13.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=403282827&amp;amp;idx=1&amp;amp;sn=d244abf23bc80ba1c509af598266f51b&amp;amp;scene=1&amp;amp;srcid=0630yOYKH7XkCSCG3i7F2vGs&amp;amp;key=77421cf58af4a653abbd4eea8024776a7d5f3e4e7be769627c00ea4c2570fe65530dd6ca584fc5d6b078bafa0c526bf7&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解JavaScript中的依赖注入&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;14.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=2651493065&amp;amp;idx=1&amp;amp;sn=780b1a7e4fef96fc12e2c3529b025cac&amp;amp;scene=1&amp;amp;srcid=0630cM75EmQ4JWptC0moX5qf&amp;amp;key=77421cf58af4a65381442529d9392f86ca4a63fc0892c36fc10f25f812adebbd578e1236e9c2053e87a45fd8beed748a&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详解JavaScript变量提升&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;15.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=2651493061&amp;amp;idx=1&amp;amp;sn=e79ee34cdf8cf89acd42c386a666a5ad&amp;amp;scene=1&amp;amp;srcid=0630eAOFkTNFneBfS4Ou15Yg&amp;amp;key=77421cf58af4a653e036c42490a7940f17a2ccd268a137eb4bda45c8d4b4355c1948ade4f1e9fae74ce764408f38c36e&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript的api设计原则&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;16.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=402932070&amp;amp;idx=1&amp;amp;sn=6d1486b1e42419f8bf508cd83d2aa939&amp;amp;scene=1&amp;amp;srcid=0630UdXyiIfAghPp468c5paW&amp;amp;key=77421cf58af4a653cd6ae5d906ea29b3bd4b067b6dd224bb9743b62bd8d8b76996414c40837282916dcf482079c36650&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解DOM事件流的三个阶段&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;17.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNjI5MTYyMw==&amp;amp;mid=2651493079&amp;amp;idx=1&amp;amp;sn=740709f9da7f380ea8511927aeb95704&amp;amp;scene=1&amp;amp;srcid=06301p63VkGLRZ6P4DmsNs2k&amp;amp;key=77421cf58af4a653b5d11a7e9d5117a68e1474376717c27ed70beb21b7cd4fc8ad5fc13adf6008b52ea09467bb9fc788&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【译】你想知道的关于JavaScript作用域的一切&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;18.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403462848&amp;amp;idx=1&amp;amp;sn=0893e342d09f91ecea47dcdfe27f3490&amp;amp;scene=1&amp;amp;srcid=0630AC19bOQZ0GThXLsWHXZh&amp;amp;key=77421cf58af4a6536ee056af2f574e09c177906d2a0deece4d9017d40e3e7eea8af7060c199228dab39361b29c083833&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大型网站架构技术一览&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;19.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403356855&amp;amp;idx=1&amp;amp;sn=f239d2ca5c7ab1a2f7fd154012250ff7&amp;amp;scene=1&amp;amp;srcid=0630zC5ogIqeWNdOh3fEyrSn&amp;amp;key=77421cf58af4a6533037bc0e4a70187ad04979ec8933c0ebd40f19094feb32af81aa05c0aa20e025aeaf259cc3230968&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中小型网站架构分析及优化&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;20.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560067&amp;amp;idx=1&amp;amp;sn=24ba95c86bf0ef548b19e504a7b3424a&amp;amp;scene=1&amp;amp;srcid=0630jF9ZYlPPLiRehxE8fciY&amp;amp;key=77421cf58af4a6539c05f8d231eff3fede2bc91e463956dca59280c42f93aea3ee1e2366ff8199d500e851fb64ab9029&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;优化Web中的性能&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;21.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=404074843&amp;amp;idx=1&amp;amp;sn=1f656dbd66af888bf8e6ea3a8ca00889&amp;amp;scene=1&amp;amp;srcid=0630h2YKxGPDrklsI8Wi4tw7&amp;amp;key=77421cf58af4a653f3d1d1464f258475f484b12d660ad41857e7284a6dc3e2ece42feb7e02dd0e99945fc9d1f2dfc798&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cookie与Session的区别-总结很好的文章&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;22.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403810848&amp;amp;idx=1&amp;amp;sn=8c0c55c73547136e67a26f48f037ced4&amp;amp;scene=1&amp;amp;srcid=0630pjGAedPh4jDdfVy3falm&amp;amp;key=77421cf58af4a65392fc624b9b3a04c91016ecc6e5cdfce23c3a382ef720cceb89186e2835c4b2d8392cba5c75b178ac&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nginx初探&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;23.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403749438&amp;amp;idx=1&amp;amp;sn=2d5fb4ddc6f550fcf74747f0a0f745c7&amp;amp;scene=1&amp;amp;srcid=0630VMUP2QxhBYY0IufOQYNd&amp;amp;key=77421cf58af4a65373e5a56044d7e792caafa7e43270820a0fd4404845772da6a5adbb231bf5142635b4b429c81d6b61&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当你输入一个网址，实际会发生什么&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;24.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403522084&amp;amp;idx=1&amp;amp;sn=17c9fa1ae460420e1d38f78c6966bab2&amp;amp;scene=1&amp;amp;srcid=0630rEtZz2A67v4PCkgvE18P&amp;amp;key=77421cf58af4a653bd39ccf779777ca06d160dbc8c1111d8eb4a1fb28ac4a0554ec85445d33fa5cc39a9612940163c07&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;正则表达式30分钟入门教程&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;25.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403404808&amp;amp;idx=1&amp;amp;sn=26e512d6b276b0c9b1dcb5dabac16b8a&amp;amp;scene=1&amp;amp;srcid=0630VNjncbTcirEjtLOzitxN&amp;amp;key=77421cf58af4a653667cafe1c3e10c3da6f0325e37e3a93a14b4b3a97636e68815106e967fe4a0312d305de3df8e2a9c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;全栈工程师眼中的HTTP&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;26.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403462848&amp;amp;idx=1&amp;amp;sn=0893e342d09f91ecea47dcdfe27f3490&amp;amp;scene=1&amp;amp;srcid=0630AC19bOQZ0GThXLsWHXZh&amp;amp;key=77421cf58af4a6536ee056af2f574e09c177906d2a0deece4d9017d40e3e7eea8af7060c199228dab39361b29c083833&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大型网站架构技术一览&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;27.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=403356855&amp;amp;idx=1&amp;amp;sn=f239d2ca5c7ab1a2f7fd154012250ff7&amp;amp;scene=1&amp;amp;srcid=0630zC5ogIqeWNdOh3fEyrSn&amp;amp;key=77421cf58af4a6533037bc0e4a70187ad04979ec8933c0ebd40f19094feb32af81aa05c0aa20e025aeaf259cc3230968&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中小型网站架构分析及优化&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;28.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560085&amp;amp;idx=1&amp;amp;sn=ee952aaa415b605336b9ab27c7eff50e&amp;amp;scene=1&amp;amp;srcid=06307B6H0aoeoKn8JxgFBpIX&amp;amp;key=77421cf58af4a65307a03cb37feb8e5c8214ef432733c67ba35800eb715de0eb4d59bee22610fb55c684aa55216d179e&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP/2 你需要知道的知识&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;29.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560078&amp;amp;idx=1&amp;amp;sn=620ba5fae267b87038debe2dd9cc5c6d&amp;amp;scene=1&amp;amp;srcid=0630vXfDLH9A8deWc4zZtirR&amp;amp;key=77421cf58af4a65372607b0945f6da80edc62e8974979803d5f3ed719d0462072fea73e44c3626a40bb27f7456f9c3f3&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解析Nginx负载均衡&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;30.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560093&amp;amp;idx=1&amp;amp;sn=b326418257b40e0d6531613406c81c76&amp;amp;scene=1&amp;amp;srcid=0630AA3tR5xyteekw6qXxd0n&amp;amp;key=77421cf58af4a65327a0c6211ef5bdb0731ce1f9ac9cf7758b127ccc4b73bc31d099d61e4deccc4be13ca657ef6f1ca2&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简述 OAuth 2.0 的运作流程&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;31.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560098&amp;amp;idx=1&amp;amp;sn=c125837099e521c4eb368cec69dbbc79&amp;amp;scene=1&amp;amp;srcid=0630NoQg6GNSDolZYJLOcj8s&amp;amp;key=77421cf58af4a653bebc001df7d12ff0e59febde8dff8748f1df08f7c3e293667a1abaa776a5db673bf89d8f0343ead5&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么大型网站前端使用PHP后台逻辑用Java&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;32.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560097&amp;amp;idx=1&amp;amp;sn=a518429db8d4866b6c3849fc62aeef79&amp;amp;scene=1&amp;amp;srcid=0630aXzryR8JrFxbZ7HONlFd&amp;amp;key=77421cf58af4a65366bea39753b84f7e27e21d8974c480b4072004eb687cc80afdab1631368546386c71ddcc4dfd8281&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web开发者应该有哪些必备的技能&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;33.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560114&amp;amp;idx=1&amp;amp;sn=227e450cef985ea186bd7c3b1f86a0e3&amp;amp;scene=1&amp;amp;srcid=0630EEA38L0iLwfKFTLy9Sdb&amp;amp;key=77421cf58af4a653fa036789eee123be8643317a6a9bac33cad20e8109ee456115c7f3b6f528ec703125c8d511fdf9f7&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈Web缓存&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;34.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560141&amp;amp;idx=1&amp;amp;sn=1b5f41bd339f5b9abbcb34e6f9e12b91&amp;amp;scene=1&amp;amp;srcid=0630I29PMXjZ0CyV9BMCm2HK&amp;amp;key=77421cf58af4a65368d9c085f1b6afee7c47887df56758e303d9c444870360e7cfb8d7069e9c655fc02d2509fa8f43bc&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;当你一个人想做一个Web项目的时候你该怎么做&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;35.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560118&amp;amp;idx=1&amp;amp;sn=e722b48eecda96945d1d7fd62b3c96bc&amp;amp;scene=1&amp;amp;srcid=0630Uhxjg2oxkrzYUPEYFkRB&amp;amp;key=77421cf58af4a653120f43c304fb5701466b25f4180dbfbf205b2fac7de1b5bab3128dba624a1a4a3d80db70d9a17242&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自己写一个Web服务器&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;36.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560157&amp;amp;idx=1&amp;amp;sn=5809043cf65ab5d507989750ae1198bb&amp;amp;scene=1&amp;amp;srcid=0630MQquVN1RmxzqTBVYXLke&amp;amp;key=77421cf58af4a653bce275d2280677cda68098df6ce7c9340a70b86dbe51814fc5e0a8472820cab459d113254a353ea4&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;现代Web开发需要学习的15大技术&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;37.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzA3NTUzNjk1OA==&amp;amp;mid=2651560146&amp;amp;idx=1&amp;amp;sn=7d083e437f77d6a2c8b1104b3c3a11b6&amp;amp;scene=1&amp;amp;srcid=0630gtZMAi2rT0HmBEqQ9bLZ&amp;amp;key=77421cf58af4a6539fa2d9291c271a1e771b12305330eb2df4776203503220fe1fab4461f7417ab0a2f028fb32ed0886&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CDN缓存那些事&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;38.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=403227985&amp;amp;idx=1&amp;amp;sn=341643c0757c3e459a23970f017728fb&amp;amp;scene=1&amp;amp;srcid=0630iyfMZAqODBS03MgwqSKv&amp;amp;key=77421cf58af4a653dfdd3107a1ad29ab945823fddba3278f658d711316136a0e0afae3513f6fc0eab2a8c9fc30068876&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;干货：前端开发指南Front-End-Develop-Guide&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;39.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=403270613&amp;amp;idx=1&amp;amp;sn=43801ff593c7055dcf37521f652bfe12&amp;amp;scene=1&amp;amp;srcid=0630FLN2or2v8H3Kuh4LlRDv&amp;amp;key=77421cf58af4a653fe627027749af7c02c346fae07f36240cc084bc44c0f4575e4955561c4ed2720cb661000c884129e&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端工作面试经典问题（超级全）&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;40.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=403253819&amp;amp;idx=1&amp;amp;sn=5939086a765dcd2d75f51b4bf7c2057b&amp;amp;scene=1&amp;amp;srcid=0630pyl6wAUSGr8AuZ60oR0n&amp;amp;key=77421cf58af4a653f32878ffe5f06861743456d8ced587e294a6777caee6f901f2565176ca080aababe2be9d4589732d&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解CSS中的层叠上下文和层叠顺序&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;41.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=403301346&amp;amp;idx=1&amp;amp;sn=b417d93c52cf7d4a51cccc32a982aa4a&amp;amp;scene=1&amp;amp;srcid=0630WxsXmTL6zBMxClqRvtuX&amp;amp;key=77421cf58af4a653d7b0a09561012c97dba71a14dda814f598a73820c76d59b3e80e3b29d67b236708b5e0cfec272da9&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;移动Web前端开发资源整合&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;42.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838569&amp;amp;idx=1&amp;amp;sn=0f970332bdea6309e6e5c8b46945f1bc&amp;amp;scene=1&amp;amp;srcid=0630hmkYGGO8njN6DFxWP5PR&amp;amp;key=77421cf58af4a65378c9892d23ac7a7866b82c0a92f8e0d5db07f144c4888bc3ab940d7e118649d78487574e076cee1c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习使用：before和：after伪元素&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;43.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=403354903&amp;amp;idx=1&amp;amp;sn=d62436d16c88dcb209e1bf4f181ed166&amp;amp;scene=1&amp;amp;srcid=0630igYKvXATZeSdyILpYvtS&amp;amp;key=77421cf58af4a653701cbc20ea21526f94111fb276ab087071c8da2811d282ebee0966332523b983b26ea17440777b66&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入学习JavaScript对象&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;44.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838572&amp;amp;idx=1&amp;amp;sn=55b177d394fb4abb3d044482c63783b9&amp;amp;scene=1&amp;amp;srcid=0630IIiU2QZKCmJW7wPscwsP&amp;amp;key=77421cf58af4a653b61181ab9e5072429250b03a29827780c4597f3c7fb839f839c0134fac2498c358a119d5693aed70&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jquery需要掌握的技巧&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;45.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838571&amp;amp;idx=1&amp;amp;sn=0782139cda4ac027dc21e473c393d9fc&amp;amp;scene=1&amp;amp;srcid=0630Ed2eAu99932XAc3EtmDv&amp;amp;key=77421cf58af4a6537f4b85465b7f302aa3a55a311aa181dac1aec464ecd7d4ef45081af39c7212c7bb1c9da047a60a01&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端知识普及之页面加载&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;46.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838637&amp;amp;idx=1&amp;amp;sn=76ce02c1edb13efea46a90363b0001f0&amp;amp;scene=1&amp;amp;srcid=0630UZqg1gAZRqAhJslacsbE&amp;amp;key=77421cf58af4a653ab1fe57d1c9abc87c0e1b3ef45018a8c96363590fc91166766efb3b9e0b5bdb1d5a1a4aeefaf1d9e&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;提高CSS开发能力的技巧集&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;47.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838636&amp;amp;idx=1&amp;amp;sn=88922324cd22edc010ef59f3ec185284&amp;amp;scene=1&amp;amp;srcid=0630xo9B9iW7tIifM4H7lZQt&amp;amp;key=77421cf58af4a653944ca3b5566924f16f787e5a3fa84574cefb5ebffe86b0c2e64817c59b61575535782be7ca2edfb9&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;疯狂Html+CSS+JS 中JS总结&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;48.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838634&amp;amp;idx=1&amp;amp;sn=09369adef96298f8d05cd9bd219afe07&amp;amp;scene=1&amp;amp;srcid=0630pbwJvK6H6Zz39kQUuPB6&amp;amp;key=77421cf58af4a65393b0e61abf3fc1caad9c294aab4535cf8d9f6ab73f39f6266222376bf28ca0684782b09d0567bfe0&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web前端面试题目汇总&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;49.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838633&amp;amp;idx=1&amp;amp;sn=d10f8a4684e72f9b2d37469c702a7be4&amp;amp;scene=1&amp;amp;srcid=0630lSIqJm5fJySnrRoKdF8Y&amp;amp;key=77421cf58af4a6539c2e3880a3f826c12f0180073a019efd419cd89abd05a0332c313c48dba46f5231842e22b6ccd7c6&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 10分钟入门&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;50.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838589&amp;amp;idx=1&amp;amp;sn=52bd1a8dc8f2dc57ff610e6183083d6a&amp;amp;scene=1&amp;amp;srcid=0630mqsnezA4UZVeMHUTBIK6&amp;amp;key=77421cf58af4a6534e7b21f7e515e6db2f4f23d66851029faab1b3263c619dc6060eaca2b33f6169645fc5e6a7a353f5&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12条专业的JavaScript规则&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;51.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838690&amp;amp;idx=1&amp;amp;sn=7cd1cf4d90ad9b1ca51395e09ac1198f&amp;amp;scene=1&amp;amp;srcid=0630sbSJCMTgdhicgHK06AKX&amp;amp;key=77421cf58af4a6539670bdeff3c13f4969db993ec4d2d0a13f3778439297a1e2ee1953053bb892b32d3f9bf94520f2e3&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;打造一个自动化的前端项目&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;52.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838688&amp;amp;idx=1&amp;amp;sn=fe5985fa6e68317845a6e8969b1e3ca0&amp;amp;scene=1&amp;amp;srcid=06301B7cT5U6nzgOLXazeAMo&amp;amp;key=77421cf58af4a653e78ce33ddb42fce91026accc41cf4265347c36a8de61d468a4e9d0da2810909accd5191f1fefad55&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript关于变量作用域的一道面试题&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;53.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838687&amp;amp;idx=1&amp;amp;sn=c9fe6c8b1a9ed779179cc531dd8ae4d3&amp;amp;scene=1&amp;amp;srcid=0630GDgaAFSuLQy4641Ds0EB&amp;amp;key=77421cf58af4a6538a75a69d2c6caf1f304a1928f914006b85bb34ed51704b3e8f80dde555734576201565b1dd69c626&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浏览器缓存知识归纳&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;54.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838686&amp;amp;idx=1&amp;amp;sn=0038c50b3f958b21880055d9bc4fafc9&amp;amp;scene=1&amp;amp;srcid=0630hve7ehDyw1Api48NW76D&amp;amp;key=77421cf58af4a653da94a6b79407afa7ee2306bdde2d7aa55d0a05d6eb26586600021f747bb7c3c6fdaf90c5566d5ef2&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript代码性能优化总结&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;55.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838701&amp;amp;idx=1&amp;amp;sn=4cea4266f55e78d0c855626338dbaf80&amp;amp;scene=1&amp;amp;srcid=0630YrpDQA3JwtmyKoF22zPn&amp;amp;key=77421cf58af4a653b84d7f3bb54da812d3478e65cc08ca89bdba933c9a832441f8f354d1dff239db7ad42657cc786875&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;45个JavaScript小技巧&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;56.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838709&amp;amp;idx=1&amp;amp;sn=9aff08d7490cf37d78407c522968bff3&amp;amp;scene=1&amp;amp;srcid=0630wc2uMSBkcRMhM5HfyCw4&amp;amp;key=77421cf58af4a65326fe15520e053fa73dcdbf7eda043c79377a07e5e2b9fff2e693c75f8ea7baa167c2217788980a76&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;浅谈浏览器http的缓存机制&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;57.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838707&amp;amp;idx=1&amp;amp;sn=73a2bc9e31c0f20d05fc71370f693ac9&amp;amp;scene=1&amp;amp;srcid=0630kpferdr1b4gSsC82BvmK&amp;amp;key=77421cf58af4a653e4c7a19916b292342e3af1b4aca753705b61d9277f4afc6e57f3d50401e2d3421e068555568618ae&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;精通JavaScript的this关键字&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;58.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838785&amp;amp;idx=1&amp;amp;sn=23f021e53eb2aaaf52b888bf503800cd&amp;amp;scene=1&amp;amp;srcid=0630XH8a3BCp9ovIQgen7PWz&amp;amp;key=77421cf58af4a653d9045c091b4b0b4ae61edd82d304433fde9868a18cda622a73086a19d853cd528abf89d2844b9ce7&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基础JavaScript装逼指南&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;59.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838782&amp;amp;idx=1&amp;amp;sn=e7f44a232c573664fd4ef158f54cbcd8&amp;amp;scene=1&amp;amp;srcid=0630LwLAqEcW7QcE9NmWp2eU&amp;amp;key=77421cf58af4a6530f8468efb913e4805343a143659b36c306bc8ac077010fbe309fa4aedb850a363ed08693f5a5193b&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何正确学习JavaScript（写给非JavaScript程序员和编程新手）&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;60.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838781&amp;amp;idx=1&amp;amp;sn=72847abd0d14b0f793e8132d1cd86ef9&amp;amp;scene=1&amp;amp;srcid=0630mNI1DIsXOjKI9s1wXTfG&amp;amp;key=77421cf58af4a653d55d6302e764fb8c8e94e9083b8243ce341e36041006f3de110014cd87c8c4e7bae441c7d05b8534&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最全面的JavaScript调试技巧总结&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;61.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838780&amp;amp;idx=1&amp;amp;sn=88a4e29468ff7d234347c3ba1ca0f254&amp;amp;scene=1&amp;amp;srcid=0630R9vEuP1t8Q2XdH7GNJWW&amp;amp;key=77421cf58af4a6530a139de333d92ba7d0b01d1677d2c8fc8c64db59b1400e1da6ddc4d237c8d326dcfbc8f4c050bb45&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端程序员必知的30个Chrome扩展&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;62.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838761&amp;amp;idx=1&amp;amp;sn=4f7332e552083d5785a76ea6ca70b570&amp;amp;scene=1&amp;amp;srcid=0630KtU34P2nNbPcsIoKJu4p&amp;amp;key=77421cf58af4a6537815a37f272bad9e0c8e9f4f2e676536e662ea96ab40b82e60b9b39b92c54fa088a238db1d9fbd80&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最全面的前端开发指南&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;63.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838733&amp;amp;idx=1&amp;amp;sn=388c50f9d02ba9079297e2f8d3955313&amp;amp;scene=1&amp;amp;srcid=0630Sxo8jObZJ4oL7b8nnFsg&amp;amp;key=77421cf58af4a653c9d00abf2223d1fca1c6808e1857c89a00a29af1e243164130697bfda36b5fce4b53f0a107f0ea02&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;面试整理之DOM事件阶段&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;64.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838732&amp;amp;idx=1&amp;amp;sn=204f5b251413118056c7131028652bcc&amp;amp;scene=1&amp;amp;srcid=0630AfzfEXHumAL9izZqSHlt&amp;amp;key=77421cf58af4a653533ff2f04aebbfc76b9a3b9e1adb928a45dcfbea68b04330cc94cd185da77c85f9001b20c44ad477&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;40个重要的HTML 5面试问题及答案&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;65.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838731&amp;amp;idx=1&amp;amp;sn=6a9d5dcf551e5a8fa9d694c7f70edc4a&amp;amp;scene=1&amp;amp;srcid=0630fShXaZH8W7Ce0wQYEcZB&amp;amp;key=77421cf58af4a653ae19dc800aecaeac458586be03ead2fe1b8dcc5104ad0ea218ea0adcdf9434c0184a9d6d5379ed62&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端进阶-让你升级的网络知识&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;66.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838729&amp;amp;idx=1&amp;amp;sn=177fc0e3c69afd7d91ad13f875c9f59b&amp;amp;scene=1&amp;amp;srcid=0630XITD8gTCYqduzeeRj3J6&amp;amp;key=77421cf58af4a653fefd0a3c613f82772c79d5e1f01a9cc9dfa4fc7e8adcecffc65fe5089f5639a29feb27ebb3a4109c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高效Web开发的10个jQuery代码片段&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;67.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838822&amp;amp;idx=1&amp;amp;sn=d57fdff91022804b03c64cad900a79fe&amp;amp;scene=1&amp;amp;srcid=0630PUwLSvq81NV4O4wi3adt&amp;amp;key=77421cf58af4a65361d2b2154dfb6ce2a68a979ab5fbdbb787e9c9d57e9cb24edd4eaac5a6aac6d609624fcdd52b9d99&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编写高效JavaScript代码&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;68.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838815&amp;amp;idx=1&amp;amp;sn=13bf4f3e19fa2acce29f13c85448d649&amp;amp;scene=1&amp;amp;srcid=0630vQjCKJzz7QgTtZbno0AR&amp;amp;key=77421cf58af4a6538817045d31b5724e82e1e97820041c2f7dff80489191de9a712d0ddff68eb304a00c3882e63902e4&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript中浏览器兼容问题&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;69.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838792&amp;amp;idx=1&amp;amp;sn=d0c711ee3d75d483cade36e988ecf90a&amp;amp;scene=1&amp;amp;srcid=0630h3lZw1bTRDtoCqIxwlRz&amp;amp;key=77421cf58af4a653636d6d51e7cbddb9caac0c2edf760f0e3b8a479ad074c70b07cb1ccf62a5f25afdd841490cfd869b&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;主流浏览器内核介绍（前端开发值得了解的浏览器内核历史）&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;70.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838852&amp;amp;idx=1&amp;amp;sn=fa17d74a08d69ce0aed70f9392e49937&amp;amp;scene=1&amp;amp;srcid=0630NTvKOukOtoA5bsFRMrzx&amp;amp;key=77421cf58af4a653090029048bc2dc02d87b9edc5b2ef92e7ee57d9f7497adc9a9fd1767243133393d043b031ac0cd4b&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;积攒10款前端开发工具，就可以召唤神龙了&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;71.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838845&amp;amp;idx=2&amp;amp;sn=398f75fe25d7af3839ee3416da71d077&amp;amp;scene=1&amp;amp;srcid=0630t47j5pCkgLoVnLDgQgYR&amp;amp;key=77421cf58af4a6537889700bbee0432971fc1e822f9a14ad0499feb70b24249d229893c59230caab5c57e5eaf6eb5cb1&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome调试工具奇淫技&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;72.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838825&amp;amp;idx=1&amp;amp;sn=ef9f12b630eaefc074b02e83ea005f57&amp;amp;scene=1&amp;amp;srcid=0630LdAqTnVt6ipAiGsx7krc&amp;amp;key=77421cf58af4a653fe337860668e379f19ca1a95a664b474dbb07b36bd4822ceca80bb89c747d08d270cbbdf73a26904&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;30分钟快速掌握Bootstrap&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;73.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838823&amp;amp;idx=1&amp;amp;sn=a82c47024e8746e0e89c18dc7e4a75fb&amp;amp;scene=1&amp;amp;srcid=0630ZaVip209Id57LYP9ihgn&amp;amp;key=77421cf58af4a653d755ef6a7599dda2a92ee96bdabdd44a8dc4431779ae2dd8632cd65231048140108b58fc98ab7d3a&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我眼中的前端框架jQuery，Angular，React，Vue——以及我看前端架构&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;74.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838905&amp;amp;idx=1&amp;amp;sn=e78e4d8ab0d218a105c92dbdbb151b49&amp;amp;scene=1&amp;amp;srcid=0630eDfltZ9unTmbFfPVSxum&amp;amp;key=77421cf58af4a653e3bd336289280805b961cd0ef60e8b73d39b847c9014071061e008832131402021d8621794e8f256&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;理解 Javascript This 关键字&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;75.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838909&amp;amp;idx=1&amp;amp;sn=089a315c006ced68db4ac6582c3bd68f&amp;amp;scene=1&amp;amp;srcid=0630LhUx0RpAZotQF3OtM92J&amp;amp;key=77421cf58af4a653c0151480140d09ca6e1066530fcd6e118bfae7c4ad981c5cde75513e1402b62d4272cb238a9e8b8c&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;从BAT面试题说起：前端面试解题思路&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;76.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838937&amp;amp;idx=1&amp;amp;sn=b1528160f3522ebfa7e76ec957e33723&amp;amp;scene=1&amp;amp;srcid=0630ft3nAcrtYf6A4sSfkLtq&amp;amp;key=77421cf58af4a6533614d36681bc1e7d01df8d4344f1c07d4b43f0afd9dbe470b6343c2dc0a72d951f3b6c25a5d62156&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这可能是史上最全的CSS自适应布局总结&lt;/a&gt;     &lt;/p&gt;
&lt;p&gt;77.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838938&amp;amp;idx=1&amp;amp;sn=91002c4086ae8c482776df184cc35041&amp;amp;scene=1&amp;amp;srcid=0630TNFbxSvolsdny5mvF0Xf&amp;amp;key=77421cf58af4a6536625d4f78def52ab8a530d6f1ffa337f8ff53676e2ba9d49833290ba11345ba561dd8e06411278b2&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何学习Web前端开发&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;78.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838913&amp;amp;idx=1&amp;amp;sn=6b698a8330f6896b9a2bb7a242decd20&amp;amp;scene=1&amp;amp;srcid=0630O2ghweEE5ZWR4TDPTZ5j&amp;amp;key=77421cf58af4a653124c07b3e8a4d5c8af9132cee52a4eca58b3ed97c5cd1521852b3fe97b77ce4d1d0d81b55666a3f6&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发书籍推荐&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;79.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838954&amp;amp;idx=1&amp;amp;sn=238e913638f6a83f0a133ba1209a827c&amp;amp;scene=1&amp;amp;srcid=0630f8xFhqhvhCoI2o8OMAmf&amp;amp;key=77421cf58af4a6530a5544b08fa3ef32cae310dfecb0dd0a7701b3c5f7318d95035cd0a1ba5c2a8d128abb24c0c4d775&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jsonp与cors跨域的一些理解&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;80.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650839000&amp;amp;idx=1&amp;amp;sn=fad06f9b53f662680f54082f6d36b7a3&amp;amp;scene=1&amp;amp;srcid=0630AJpg7IEd8oFboIRhZeTo&amp;amp;key=77421cf58af4a65396156c764771fe4748ac6cea0aa52a25b5448493c5d43552e1db242a100741fc1a6c4cb8d05229c0&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cookie与Session的区别-总结很好的文章&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;81.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838992&amp;amp;idx=1&amp;amp;sn=eb95956441f9620a10bc65c207507e3b&amp;amp;scene=1&amp;amp;srcid=063040gzH6iAF9F8ESu4Aynu&amp;amp;key=77421cf58af4a653b05aa04d831d1536a1415b5f541bb73a8fe38d5b2e23721e5601a8daa3e4dc7f8d142545f010edba&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;大前端工具集&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;82.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838991&amp;amp;idx=1&amp;amp;sn=e31cc3fa1bcc01b5f4ee1973a32446ab&amp;amp;scene=1&amp;amp;srcid=0630JchHLSnctax3kZbpkPvx&amp;amp;key=77421cf58af4a65369843f04fd139f42df51b7e9c0633fae98e7092c9912884ee4e5e6015a53cfcf3932e337e8556ed6&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我是这样学习前端的&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;83.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838990&amp;amp;idx=1&amp;amp;sn=59f2c5aa26a4053040ab75b3d02ddf14&amp;amp;scene=1&amp;amp;srcid=0630cTX8uF2d3S1sef9qrHoF&amp;amp;key=77421cf58af4a653adb7b9bd6e611b44c458b62f1ca19929185cf5e83aabde6d23378398a702584736a7cd98cfa456ec&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看看国外的JavaScript题目，你能全部做对吗&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;84.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838985&amp;amp;idx=1&amp;amp;sn=20b61b4371e92e4e2103febcb3c17de0&amp;amp;scene=1&amp;amp;srcid=06301J9hKPEN1NEeBYDkJJeM&amp;amp;key=77421cf58af4a653bc524b04126c7f7a0e710c778b28be24bf3e12fc2aef6435a13bf0539c20ec0b44ed1139c8125daa&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实践一下前端性能分析&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;85.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650838965&amp;amp;idx=1&amp;amp;sn=07c324e5168d2d2ac99e6a28a36fb293&amp;amp;scene=1&amp;amp;srcid=06302GuSn7r78z9GALxwkeXj&amp;amp;key=77421cf58af4a6530c47001cdb0aa5b2dd605f9a676463f8740141d41a271fdb89f824b83a0fa1880b208ea98e494956&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;结合个人经历总结的前端入门方法&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;86.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650839006&amp;amp;idx=1&amp;amp;sn=998e1e88c9fe53b4c9dfb24e8fcf1cf3&amp;amp;scene=1&amp;amp;srcid=0630XnhN53PaQZtMAQpVr2G5&amp;amp;key=77421cf58af4a653a147945c17cc03708cae0c778fa59583642961df6e485b43a867c72cd371c8076bddd6db0d53ca42&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript数组操作&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;87.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650839038&amp;amp;idx=1&amp;amp;sn=4c00fadc386247bce0a9d23092330bd4&amp;amp;scene=1&amp;amp;srcid=0630GO5wXdfQGmpx2xXFCuPJ&amp;amp;key=77421cf58af4a653fcc0af4a0fd8e054f6199742cc9e6738d912926524e2d8eafc3c17a5e56b2f3593326009b3599bc7&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;你知道吗？Web的26项基本概念和技术&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;88.&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzAwNDcyNjI3OA==&amp;amp;mid=2650839035&amp;amp;idx=1&amp;amp;sn=7dc93eb4687ab6d6c124d0bdf683ae90&amp;amp;scene=1&amp;amp;srcid=06307F1SZ92QHFXohPBsY9Jk&amp;amp;key=77421cf58af4a6539e9a04411fe013c345a9dc3bb91bcf36e4d583eae2d064feb6515c4b5ede511411627e196b648128&amp;amp;ascene=0&amp;amp;uin=MjE2MTU5NjQyMA%3D%3D&amp;amp;devicetype=iMac+MacBookPro8%2C1+OSX+OSX+10.11.5+build&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;总结Web应用中常用的各种Cache&lt;/a&gt;    &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;知识点&quot;&gt;&lt;a href=&quot;#知识点&quot; class=&quot;headerlink&quot; title=&quot;知识点&quot;&gt;&lt;/a&gt;知识点&lt;/h1&gt;&lt;h1 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h1&gt;&lt;p
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>javascript小结-2</title>
    <link href="http://yoursite.com/2016/06/23/javascript%E5%B0%8F%E7%BB%93-2/"/>
    <id>http://yoursite.com/2016/06/23/javascript小结-2/</id>
    <published>2016-06-23T10:55:27.000Z</published>
    <updated>2016-06-30T16:12:42.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; class=&quot;headerlink&quot; title=&quot;javascript&quot;&gt;&lt;/a&gt;javascript&lt;/h1&gt;&lt;script type=&quot;”text/javascript”&quot;&gt;

&lt;/script&gt;

&lt;h2 id=&quot;组成&quot;&gt;&lt;a href=&quot;#组成&quot; class=&quot;headerlink&quot; title=&quot;组成&quot;&gt;&lt;/a&gt;组成&lt;/h2&gt;&lt;p&gt;下面是前端Browser的DOM,还不是后端如nodejs的DOM&lt;/p&gt;
&lt;p&gt;ECMScript:解释器,翻译&lt;/p&gt;
&lt;p&gt;DOM: Document Object Model. 就是document。 文档（HTML/网页）对象模型，把网页/文档变成JS可以操作的对象。DOM给了JS操作页面元素的能力。也就是&lt;code&gt;document&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;BOM: Browser Object Model   兼容性问题的来源。给了JS操纵浏览器的功能（收藏夹，打印机，location之类的），就是&lt;code&gt;window&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;JS变量类型&quot;&gt;&lt;a href=&quot;#JS变量类型&quot; class=&quot;headerlink&quot; title=&quot;JS变量类型&quot;&gt;&lt;/a&gt;JS变量类型&lt;/h2&gt;&lt;p&gt;注:typeof 返回的是字符串,如’number’,但有时返回的是string,true,不加引号’’&lt;/p&gt;
&lt;h3 id=&quot;5种原始类型&quot;&gt;&lt;a href=&quot;#5种原始类型&quot; class=&quot;headerlink&quot; title=&quot;5种原始类型:&quot;&gt;&lt;/a&gt;5种原始类型:&lt;/h3&gt;&lt;p&gt;string,number,boolean,undefined,null&lt;/p&gt;
&lt;h4 id=&quot;string和number&quot;&gt;&lt;a href=&quot;#string和number&quot; class=&quot;headerlink&quot; title=&quot;string和number&quot;&gt;&lt;/a&gt;string和number&lt;/h4&gt;&lt;p&gt;它们之间可以用 ‘+’进行拼接&lt;/p&gt;
&lt;p&gt;String字符串类型是由双引号” “或单引号’ ‘声明的。&lt;/p&gt;
&lt;p&gt;还有一些字符串的字面量如’hello’&lt;/p&gt;
&lt;p&gt;常见的错误写法:&lt;/p&gt;
&lt;p&gt;alert(hello);&lt;/p&gt;
&lt;p&gt;console.log(parseInt(12px));&lt;/p&gt;
&lt;h4 id=&quot;undefined和null&quot;&gt;&lt;a href=&quot;#undefined和null&quot; class=&quot;headerlink&quot; title=&quot;undefined和null&quot;&gt;&lt;/a&gt;undefined和null&lt;/h4&gt;&lt;p&gt;如果对类型typeof,5种基本类型中的null或者引用类型会返回Object. JS把null认为是对象的占位符&lt;/p&gt;
&lt;p&gt;alert(null == undefined);  //输出 “true”&lt;br&gt;alert(null === undefined); //输出false&lt;/p&gt;
&lt;p&gt;尽管这两个值相等，但它们的含义不同。undefined 是声明了变量但未对其初始化时赋予该变量的值，null 则用于表示尚未存在的对象。如果函数或方法要返回的是对象，那么找不到该对象时，返回的通常是 null。&lt;/p&gt;
&lt;p&gt;console.log(typeof(undefined));//undefined&lt;/p&gt;
&lt;p&gt;console.log(typeof(null));//object&lt;/p&gt;
&lt;p&gt;注意null不要写成Null或NULL,会报错&lt;/p&gt;
&lt;h3 id=&quot;复合类型（对象（包括数组，HTML标签，日期））&quot;&gt;&lt;a href=&quot;#复合类型（对象（包括数组，HTML标签，日期））&quot; class=&quot;headerlink&quot; title=&quot;复合类型（对象（包括数组，HTML标签，日期））&quot;&gt;&lt;/a&gt;复合类型（对象（包括数组，HTML标签，日期））&lt;/h3&gt;&lt;p&gt;引用类型array,function,arguments?&lt;/p&gt;
&lt;p&gt;注:object不是JS类型,只是typeof的返回值&lt;/p&gt;
&lt;p&gt;var arr = new Array(1,2,3);&lt;/p&gt;
&lt;p&gt;  console.log(typeof(arr));//object&lt;/p&gt;
&lt;p&gt;function show(){&lt;/p&gt;
&lt;p&gt;  console.log(typeof(arguments));//object&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;show();&lt;/p&gt;
&lt;p&gt;console.log(typeof(show));//function&lt;/p&gt;
&lt;p&gt;注:变量（var）类型是由其里面存储的东西决定&lt;/p&gt;
&lt;h3 id=&quot;boolean类型&quot;&gt;&lt;a href=&quot;#boolean类型&quot; class=&quot;headerlink&quot; title=&quot;boolean类型&quot;&gt;&lt;/a&gt;boolean类型&lt;/h3&gt;&lt;p&gt;true为真，false为假&lt;/p&gt;
&lt;p&gt;非0为真，0为假&lt;/p&gt;
&lt;p&gt;非空字符串为真(‘ ‘空格也是真的)，空字符串为假的(‘’)&lt;/p&gt;
&lt;p&gt;非空对象是真的，空对象NaN是假的&lt;/p&gt;
&lt;p&gt;undefined是假的&lt;/p&gt;
&lt;p&gt;真的：true，非0数字，非空字符串，非空对象&lt;/p&gt;
&lt;p&gt;假的：false，数字0，空字符串，空对象，undefined&lt;/p&gt;
&lt;h3 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h3&gt;&lt;p&gt;可以把数组放入JSON，也可以把JSON放入数组&lt;/p&gt;
&lt;p&gt;JSON中可以存储多种类型的变量&lt;/p&gt;
&lt;p&gt;for in&lt;/p&gt;
&lt;p&gt;一般和JSON或其他对象混合使用&lt;/p&gt;
&lt;h3 id=&quot;函数传参arguments&quot;&gt;&lt;a href=&quot;#函数传参arguments&quot; class=&quot;headerlink&quot; title=&quot;函数传参arguments&quot;&gt;&lt;/a&gt;函数传参arguments&lt;/h3&gt;&lt;p&gt;arguments是集合类型,不是数组类型。类数组。具有length等属性。&lt;/p&gt;
&lt;h3 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h3&gt;&lt;p&gt;var arr = [1,2,3,4];&lt;/p&gt;
&lt;p&gt;var arr = new Array(1,2,3,4);&lt;/p&gt;
&lt;p&gt;数组属性length&lt;/p&gt;
&lt;p&gt;数组中应该只存一种类型的变量&lt;/p&gt;
&lt;h4 id=&quot;数组方法&quot;&gt;&lt;a href=&quot;#数组方法&quot; class=&quot;headerlink&quot; title=&quot;数组方法&quot;&gt;&lt;/a&gt;数组方法&lt;/h4&gt;&lt;p&gt;涉及到算法的操作大多数都是:&lt;code&gt;增删查改,排序&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;把函数作为参数,方便用户自定义函数。底层人员负责实现底层函数,用户只需要实现参数(函数)就行了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;排序&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;sort([比较函数])&lt;/p&gt;
&lt;p&gt;&lt;code&gt;转换&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;concat(数组2)  //连接2个数组&lt;/p&gt;
&lt;p&gt;join(分隔符)&lt;/p&gt;
&lt;p&gt;   用分隔符,组合数组元素,生成字符串&lt;/p&gt;
&lt;p&gt;   字符串split&lt;/p&gt;
&lt;p&gt;&lt;code&gt;插入&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;splice(开始,长度)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;删除&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;splice(开始,0,元素)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;替换&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;concat()&lt;/code&gt;方法用于连接两个或多个数组&lt;/p&gt;
&lt;p&gt;//该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。&lt;/p&gt;
&lt;p&gt;//连接元素&lt;/p&gt;
&lt;p&gt;var a = new Array(2);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;console.log(a.concat(‘c’)); //[‘a’,’b’,’c’]&lt;/p&gt;
&lt;p&gt;//console.log(a.concat(c));//这样会报错: c is not defined   这样写就会把c当成变量&lt;/p&gt;
&lt;p&gt;//连接数组,增加的其实是数组元素,而非数组&lt;/p&gt;
&lt;p&gt;var a = new Array(2);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;var a1 = new Array(2);&lt;/p&gt;
&lt;p&gt;a1[0] = ‘a1’;&lt;/p&gt;
&lt;p&gt;a1[1] = ‘b1’;&lt;/p&gt;
&lt;p&gt;var a2 = new Array(2);&lt;/p&gt;
&lt;p&gt;a2[0] = ‘a2’;&lt;/p&gt;
&lt;p&gt;a2[1] = ‘b2’;&lt;/p&gt;
&lt;p&gt;console.log(a.concat(a1,a2));//[‘a’,’b’,’a1’,’b1’,’a2,’b2’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;join()&lt;/code&gt; 方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。&lt;br&gt;//参数指定要使用的分隔符。如果省略该参数，则使用&lt;code&gt;逗号&lt;/code&gt;作为分隔符。&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.join());//a,b,c&lt;/p&gt;
&lt;p&gt;//console.log(a.join(+));//报错&lt;/p&gt;
&lt;p&gt;console.log(a.join(‘+’));//a+b+c&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pop()&lt;/code&gt;方法将删除数组的最后一个元素，把数组长度减 1，并且返回它删除的元素的值。&lt;br&gt; 如果数组已经为空，则 pop() 不改变数组，并返回 undefined 值。&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.pop());//c&lt;/p&gt;
&lt;p&gt;console.log(a);//[‘a’,’b’]&lt;/p&gt;
&lt;p&gt;console.log(a.pop());//b&lt;/p&gt;
&lt;p&gt;console.log(a.pop());//a&lt;/p&gt;
&lt;p&gt;console.log(a.pop());//undefined&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push()&lt;/code&gt;方法可把它的参数顺序添加到数组的尾部。它直接修改数组,而不是创建一个新的数组。&lt;/p&gt;
&lt;p&gt;push() 方法和 pop() 方法使用数组提供的先进后出 栈的功能。&lt;/p&gt;
&lt;p&gt;此方法会直接修改原数组,不会创建副本&lt;/p&gt;
&lt;p&gt;返回数组的新长度&lt;/p&gt;
&lt;p&gt;要想数组的开头添加一个或多个元素，请使用 unshift() 方法。&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.push(‘d’));//4&lt;/p&gt;
&lt;p&gt;console.log(a); //[‘a’,’b’,’c’,’d’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reverse()&lt;/code&gt; 方法用于颠倒数组中元素的顺序。&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.reverse());//[‘c’,’b’,’a’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;shift()&lt;/code&gt;方法用于把数组的&lt;code&gt;第一个元素从其中删除&lt;/code&gt;，并返回第一个元素的值。&lt;br&gt;如果数组是空的，那么 shift() 方法将不进行任何操作，返回 undefined 值。&lt;br&gt;请注意，该方法不创建新数组，而是直接修改原数组&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.shift());//a&lt;/p&gt;
&lt;p&gt;console.log(a);//[‘b’,’c’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;slice()&lt;/code&gt; 方法&lt;/p&gt;
&lt;p&gt;//arrayObject.slice(start,end)&lt;/p&gt;
&lt;p&gt;//返回一个新的数组，包含从 start 到 end （不包括该元素）的数组中的元素。&lt;/p&gt;
&lt;p&gt;//该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。&lt;/p&gt;
&lt;p&gt;//可使用负值从数组的尾部选取元素。&lt;/p&gt;
&lt;p&gt;//如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。&lt;/p&gt;
&lt;p&gt;var a = new Array(3);&lt;/p&gt;
&lt;p&gt;a[0] = ‘a’;&lt;/p&gt;
&lt;p&gt;a[1] = ‘b’;&lt;/p&gt;
&lt;p&gt;a[2] = ‘c’;&lt;/p&gt;
&lt;p&gt;console.log(a.slice(1));//[‘b’,’c’]&lt;/p&gt;
&lt;p&gt;console.log(a);//[‘a’,’b’,’c’]&lt;/p&gt;
&lt;p&gt;console.log(a.slice(1,2));//[‘b’]&lt;/p&gt;
&lt;p&gt;console.log(a.slice(-1));//[‘c’]&lt;/p&gt;
&lt;p&gt;console.log(a.slice(-1,-2));//[]   //注:必须是正向&lt;/p&gt;
&lt;p&gt;console.log(a.slice(-2,-1));//[‘b’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort()方法&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;splice()&lt;/code&gt; 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改。&lt;/p&gt;
&lt;p&gt;//该方法会改变原始数组。&lt;/p&gt;
&lt;p&gt;//返回包含被删除项目的新数组&lt;/p&gt;
&lt;p&gt;//arrayObject.splice(index,howmany,item1,…..,itemX)&lt;/p&gt;
&lt;p&gt;//index:规定添加/删除项目的位置，使用负数可从数组结尾处规定位置        删除    位置,数目&lt;/p&gt;
&lt;p&gt;//howmany:要删除的项目数量                                        删除&lt;/p&gt;
&lt;p&gt;//itemX:向数组添加的新项目                                       添加    数目&lt;/p&gt;
&lt;p&gt;//splice() 方法可删除从 index 处开始的零个或多个元素，并且用参数列表中声明的一个或多个值来替换那些被删除的元素。&lt;/p&gt;
&lt;p&gt;//如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组&lt;/p&gt;
&lt;p&gt;var arr = new Array(6)&lt;/p&gt;
&lt;p&gt;arr[0] = “10”&lt;/p&gt;
&lt;p&gt;arr[1] = “5”&lt;/p&gt;
&lt;p&gt;arr[2] = “40”&lt;/p&gt;
&lt;p&gt;arr[3] = “25”&lt;/p&gt;
&lt;p&gt;arr[4] = “1000”&lt;/p&gt;
&lt;p&gt;arr[5] = “1”&lt;/p&gt;
&lt;p&gt;console.log(arr.splice(0,2,’a’));//[‘10’,’5’]&lt;/p&gt;
&lt;p&gt;console.log(arr);//[‘a’,’40’,’25’,’1000’,’1’]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toSource()&lt;/code&gt; 方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toString()&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;toLocaleString()&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unshift()&lt;/code&gt; 方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;valueOf()&lt;/code&gt; 方法&lt;/p&gt;
&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;h4 id=&quot;字面值常量&quot;&gt;&lt;a href=&quot;#字面值常量&quot; class=&quot;headerlink&quot; title=&quot;字面值常量&quot;&gt;&lt;/a&gt;字面值常量&lt;/h4&gt;&lt;h4 id=&quot;new-对象&quot;&gt;&lt;a href=&quot;#new-对象&quot; class=&quot;headerlink&quot; title=&quot;new 对象&quot;&gt;&lt;/a&gt;new 对象&lt;/h4&gt;&lt;p&gt;由于JS中一切皆是对象。&lt;/p&gt;
&lt;h3 id=&quot;赋值传递&quot;&gt;&lt;a href=&quot;#赋值传递&quot; class=&quot;headerlink&quot; title=&quot;赋值传递&quot;&gt;&lt;/a&gt;赋值传递&lt;/h3&gt;&lt;p&gt;引用：对象、数组、函数&lt;/p&gt;
&lt;p&gt;复制：数字、布尔&lt;/p&gt;
&lt;p&gt;number类型:&lt;/p&gt;
&lt;p&gt;var a1=b1=5;&lt;/p&gt;
&lt;p&gt;a1=6;&lt;/p&gt;
&lt;p&gt;console.log(a1);&lt;/p&gt;
&lt;p&gt;console.log(b1);&lt;/p&gt;
&lt;p&gt;//6,5&lt;/p&gt;
&lt;p&gt;//数组类型&lt;/p&gt;
&lt;p&gt;var a1 = [1];&lt;/p&gt;
&lt;p&gt;var b1 = a1; //引用传递&lt;/p&gt;
&lt;p&gt;//上面等价于  var b2 = a2 = [1];&lt;/p&gt;
&lt;p&gt;b1[0]++;&lt;/p&gt;
&lt;p&gt;console.log(a1);&lt;/p&gt;
&lt;p&gt;console.log(b1);&lt;/p&gt;
&lt;p&gt;//2,2&lt;/p&gt;
&lt;p&gt;//下面情况就变了&lt;/p&gt;
&lt;p&gt;var b2=a2=[1];&lt;/p&gt;
&lt;p&gt;b2 = [2];//赋值在后面。&lt;/p&gt;
&lt;p&gt;console.log(a2);&lt;/p&gt;
&lt;p&gt;console.log(b2);&lt;/p&gt;
&lt;p&gt;//后面没有 a2 = b2 的引用传递过程,所以a2的值就没有改变&lt;/p&gt;
&lt;p&gt;//1,2&lt;/p&gt;
&lt;p&gt;这个在nodejs的 exports = module.exports = xxx;经常会用到。&lt;/p&gt;
&lt;p&gt;//赋值是从右往左的&lt;/p&gt;
&lt;p&gt;另一个使用场景在函数的传参中。&lt;/p&gt;
&lt;h2 id=&quot;类型转换&quot;&gt;&lt;a href=&quot;#类型转换&quot; class=&quot;headerlink&quot; title=&quot;类型转换&quot;&gt;&lt;/a&gt;类型转换&lt;/h2&gt;&lt;h3 id=&quot;显示转换&quot;&gt;&lt;a href=&quot;#显示转换&quot; class=&quot;headerlink&quot; title=&quot;显示转换&quot;&gt;&lt;/a&gt;显示转换&lt;/h3&gt;&lt;p&gt;parseInt()字符串转数字（从字符串中提取数字，从左到右直到不是数字的）&lt;/p&gt;
&lt;p&gt;parseInt(12px); = 12;&lt;/p&gt;
&lt;p&gt;parseInt(‘abc’);   // NaN  not a number    提取不到数字&lt;/p&gt;
&lt;p&gt;parseInt(‘abc12’)  // NaN  从左到右&lt;/p&gt;
&lt;p&gt;parseFloat()  //把字符串转换为小数&lt;/p&gt;
&lt;h4 id=&quot;NaN&quot;&gt;&lt;a href=&quot;#NaN&quot; class=&quot;headerlink&quot; title=&quot;NaN&quot;&gt;&lt;/a&gt;NaN&lt;/h4&gt;&lt;p&gt;NaN和任何类型运算，都是NaN&lt;/p&gt;
&lt;p&gt;不能拿2个NaN比较:&lt;/p&gt;
&lt;p&gt;isNaN()   a=’abc’  isNaN(a)  返回true&lt;/p&gt;
&lt;h3 id=&quot;隐式转换&quot;&gt;&lt;a href=&quot;#隐式转换&quot; class=&quot;headerlink&quot; title=&quot;隐式转换&quot;&gt;&lt;/a&gt;隐式转换&lt;/h3&gt;&lt;h4 id=&quot;和-运算符&quot;&gt;&lt;a href=&quot;#和-运算符&quot; class=&quot;headerlink&quot; title=&quot;==和===运算符&quot;&gt;&lt;/a&gt;==和===运算符&lt;/h4&gt;&lt;p&gt;a=’12’&lt;/p&gt;
&lt;p&gt;b=12&lt;/p&gt;
&lt;p&gt;a==b    true   ==会把a,b转化为一样的类型再比较&lt;/p&gt;
&lt;p&gt;a===b      false    ===不转换就比较&lt;/p&gt;
&lt;p&gt;== ，!=转换数据类型再比较&lt;/p&gt;
&lt;p&gt;===，!== 不转换数据类型直接比较&lt;/p&gt;
&lt;h4 id=&quot;其他运算符&quot;&gt;&lt;a href=&quot;#其他运算符&quot; class=&quot;headerlink&quot; title=&quot;其他运算符&quot;&gt;&lt;/a&gt;其他运算符&lt;/h4&gt;&lt;p&gt;-减法   *乘法   除法  都会转换,&lt;br&gt;但加法 + 不会转换&lt;br&gt;因为加法能够   字符串连接   数字相加&lt;br&gt;但减法  只能做 数字相减&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;p&gt;var a = 1+’1’;&lt;/p&gt;
&lt;p&gt;console.log(a,typeof(a)); // 11 ,string&lt;/p&gt;
&lt;p&gt;var b = 2-‘1’;&lt;/p&gt;
&lt;p&gt;console.log(b,typeof(b)); // 11 ,”number”&lt;/p&gt;
&lt;p&gt;console.log(typeof(c)); //undefined&lt;/p&gt;
&lt;p&gt;console.log(null==undefined);// true  注意null不要写成Null或NULL,会报错&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;取模运算符 %&lt;/p&gt;
&lt;h2 id=&quot;变量作用域与闭包&quot;&gt;&lt;a href=&quot;#变量作用域与闭包&quot; class=&quot;headerlink&quot; title=&quot;变量作用域与闭包&quot;&gt;&lt;/a&gt;变量作用域与闭包&lt;/h2&gt;&lt;p&gt;变量起作用的范围&lt;/p&gt;
&lt;p&gt;  局部变量：定义在一个函数里，只能在一个函数中使用&lt;/p&gt;
&lt;p&gt;  全局变量：不定义在任何一个函数中他，可以在任何地方使用。&lt;/p&gt;
&lt;p&gt;JS中没有块级作用域的说法。比如for(){}  if(){}   等,只有全局作用域和局部作用域(函数作用域)&lt;/p&gt;
&lt;p&gt;注:var a;   var 即是定义，不是声明。这一点和C语言不一样。&lt;/p&gt;
&lt;p&gt;（3）闭包    局部变量在闭包里也可以使用&lt;/p&gt;
&lt;p&gt;function a(){&lt;/p&gt;
&lt;p&gt;var a=12;&lt;/p&gt;
&lt;p&gt;function b(){&lt;/p&gt;
&lt;p&gt;alert(a);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;子函数可以使用父函数内的局部变量&lt;/p&gt;
&lt;p&gt;//闭包特点&lt;/p&gt;
&lt;p&gt;//函数嵌套函数,内部函数可以引用外部函数的参数和变量,参数和变量不会被垃圾回收机制所收回&lt;/p&gt;
&lt;p&gt;function aaa(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 5;

function bbb(){

    alert(a);

}

return bbb;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;var c = aaa();//在外部调用aaa(),在这个地方aaa()已经执行完毕&lt;/p&gt;
&lt;p&gt;c();//c代表bbb()这个函数,c执行,变量并没有被收回,可以弹出a=5&lt;/p&gt;
&lt;p&gt;&lt;code&gt;未完待续&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/rainman/archive/2009/04/28/1445687.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解JavaScript的变量作用域&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;仔细观察下面的代码，你会发现&lt;code&gt;变量i、j、k作用域是相同的，他们在整个rain函数体内都是全局的&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;也就是说&lt;code&gt;JS只有全局作用域和函数作用域,没有块作用域的说法&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;function rainman(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // rainman函数体内存在三个局部变量 i j k

    var i = 0;

    if ( 1 ) {

        var j = 0;

        for(var k = 0; k &amp;lt; 3; k++) {

            alert( k );    //分别弹出 0 1 2
        }

        alert( k );        //弹出3

        //`for循环变量k,这个在DOM事件处理中经常会用到`

    }

    alert( j );            //弹出0

    //`上面的if{}块没有阻碍j`

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/alsotang/node-lessons/tree/master/lesson11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;作用域与闭包：this，var，(function () {})&lt;/a&gt;&lt;br&gt;&lt;code&gt;如果忘记var，那么变量就被声明为全局变量了&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;还有就是JS不像C语言,声明,定义得来2次,JS就一次。并且&lt;code&gt;带不带var都可以&lt;/code&gt;,只不过不带var是全局的,带var可能是全局,也可能是局部的。&lt;/p&gt;
&lt;p&gt;function foo() {&lt;/p&gt;
&lt;p&gt;  value = “hello”;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;foo();&lt;/p&gt;
&lt;p&gt;console.log(value); // 输出hello&lt;/p&gt;
&lt;p&gt;console.log(global.value) // 输出hello&lt;/p&gt;
&lt;h2 id=&quot;语句&quot;&gt;&lt;a href=&quot;#语句&quot; class=&quot;headerlink&quot; title=&quot;语句&quot;&gt;&lt;/a&gt;语句&lt;/h2&gt;&lt;h3 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h3&gt;&lt;h3 id=&quot;条件语句&quot;&gt;&lt;a href=&quot;#条件语句&quot; class=&quot;headerlink&quot; title=&quot;条件语句&quot;&gt;&lt;/a&gt;条件语句&lt;/h3&gt;&lt;p&gt;条件?语句1:语句2&lt;/p&gt;
&lt;h3 id=&quot;break&quot;&gt;&lt;a href=&quot;#break&quot; class=&quot;headerlink&quot; title=&quot;break&quot;&gt;&lt;/a&gt;break&lt;/h3&gt;&lt;h3 id=&quot;continue&quot;&gt;&lt;a href=&quot;#continue&quot; class=&quot;headerlink&quot; title=&quot;continue&quot;&gt;&lt;/a&gt;continue&lt;/h3&gt;&lt;h2 id=&quot;命名规范&quot;&gt;&lt;a href=&quot;#命名规范&quot; class=&quot;headerlink&quot; title=&quot;命名规范&quot;&gt;&lt;/a&gt;命名规范&lt;/h2&gt;&lt;p&gt;匈牙利命名法&lt;/p&gt;
&lt;p&gt;类型前缀，首字母大写&lt;/p&gt;
&lt;h2 id=&quot;函数function&quot;&gt;&lt;a href=&quot;#函数function&quot; class=&quot;headerlink&quot; title=&quot;函数function&quot;&gt;&lt;/a&gt;函数function&lt;/h2&gt;&lt;p&gt;function没有返回值时返回的是undefined&lt;/p&gt;
&lt;p&gt;function show(){&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;alert(show());//undefined&lt;/p&gt;
&lt;p&gt;函数常常与闭包,this连在一起。见另外的地方这2个方面的内容。&lt;/p&gt;
&lt;h3 id=&quot;匿名函数自执行&quot;&gt;&lt;a href=&quot;#匿名函数自执行&quot; class=&quot;headerlink&quot; title=&quot;匿名函数自执行&quot;&gt;&lt;/a&gt;匿名函数自执行&lt;/h3&gt;&lt;p&gt;//注意可直接在函数声明后面加上括号就表示创建完成后立即进行函数调用&lt;/p&gt;
&lt;p&gt;var i=function (a,b){ //由于后面有(1,2), i表示返回值而非创建的函数。因为()比= 有更高的优先级。这样的代码可能并不常用，但当用户想在很长的代码段中进行模块化设计或者想避免命名冲突，这是一个不错的解决办法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return a+b;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}(1,2);&lt;/p&gt;
&lt;p&gt;alert(i);&lt;/p&gt;
&lt;p&gt;//尽管下面两种创建函数的方法是等价的：&lt;/p&gt;
&lt;p&gt;function funcName(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//函数体
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//等价于&lt;/p&gt;
&lt;p&gt;var funcName=function(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//函数体
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//但前面一种方式创建的是有名函数，而后面是创建了一个无名函数，只是让一个变量指向了这个无名函数。&lt;/p&gt;
&lt;p&gt;//在使用上仅有一点区别，就是：对于有名函数，它可以出现在调用之后再定义；而对于无名函数，它必须是在调用之前就已经定义。&lt;/p&gt;
&lt;p&gt;//下面这段语句将产生func未定义的错误&lt;/p&gt;
&lt;p&gt;func();&lt;/p&gt;
&lt;p&gt;var func=function(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//下面则能够正确执行&lt;/p&gt;
&lt;p&gt;func();&lt;/p&gt;
&lt;p&gt;function func(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alert(1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//由此可见，尽管JavaScript是一门解释型的语言，但它会在函数调用时，检查整个代码中是否存在相应的函数定义，这个函数名只有是通过function funcName()形式定义的才会有效，而不能是匿名函数。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/TomXu/archive/2011/12/31/2289423.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入理解JavaScript系列（4）：立即调用的函数表达式&lt;/a&gt;   &lt;/p&gt;
&lt;p&gt;function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(3);&lt;/p&gt;
&lt;p&gt;}();  //报错&lt;/p&gt;
&lt;p&gt;function foo()//给函数加个名字照样报错&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(3);&lt;/p&gt;
&lt;p&gt;}();&lt;/p&gt;
&lt;p&gt;//解决:加()&lt;/p&gt;
&lt;p&gt;(function()&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;  console.log(2);&lt;/p&gt;
&lt;p&gt;}());  // 2&lt;/p&gt;
&lt;p&gt;(function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(2);&lt;/p&gt;
&lt;p&gt;})()   // 2&lt;/p&gt;
&lt;h3 id=&quot;arguments&quot;&gt;&lt;a href=&quot;#arguments&quot; class=&quot;headerlink&quot; title=&quot;arguments&quot;&gt;&lt;/a&gt;arguments&lt;/h3&gt;&lt;p&gt;&lt;code&gt;arguments和this&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;var later1 = function(a,b)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(arguments); //{ ‘0’: 1 }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;function test(a,b)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  var self = this;&lt;/p&gt;
&lt;p&gt;  console.log(arguments);//{ ‘0’: 1, ‘1’: 2 }  //集合下标是字符串?&lt;/p&gt;
&lt;p&gt;  later1(a);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;test(1,2);&lt;/p&gt;
&lt;p&gt;//对比:&lt;/p&gt;
&lt;p&gt;function test(a,b)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  var self = this;&lt;/p&gt;
&lt;p&gt;  var args = arguments;&lt;/p&gt;
&lt;p&gt;  console.log(arguments);//{ ‘0’: 1, ‘1’: 2 }&lt;/p&gt;
&lt;p&gt;  // var test1 = function(a)&lt;/p&gt;
&lt;p&gt;  // {&lt;/p&gt;
&lt;p&gt;  //   console.log(arguments);//{ ‘0’: 1 }&lt;/p&gt;
&lt;p&gt;  //   console.log(args);//{ ‘0’: 1, ‘1’: 2 }&lt;/p&gt;
&lt;p&gt;  // }&lt;/p&gt;
&lt;p&gt;  // test1(a);&lt;/p&gt;
&lt;p&gt;  //或者像下面这样写&lt;/p&gt;
&lt;p&gt;  (function(a){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(arguments);//{ &amp;apos;0&amp;apos;: 1 }

console.log(args);//{ &amp;apos;0&amp;apos;: 1, &amp;apos;1&amp;apos;: 2 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  })(a);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;test(1,2);&lt;/p&gt;
&lt;p&gt;//结论:arguments和this一样。都存在作用域链的问题。&lt;/p&gt;
&lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;p&gt;P54&lt;/p&gt;
&lt;h3 id=&quot;HTTP请求&quot;&gt;&lt;a href=&quot;#HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTP请求&quot;&gt;&lt;/a&gt;HTTP请求&lt;/h3&gt;&lt;p&gt;页面中用class，JS中用className&lt;/p&gt;
&lt;h2 id=&quot;javascript面向对象&quot;&gt;&lt;a href=&quot;#javascript面向对象&quot; class=&quot;headerlink&quot; title=&quot;javascript面向对象&quot;&gt;&lt;/a&gt;javascript面向对象&lt;/h2&gt;&lt;p&gt;P64&lt;/p&gt;
&lt;h3 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;p&gt;抽象:抽出核心问题&lt;/p&gt;
&lt;p&gt;封装:不考虑内部实现,只考虑功能使用&lt;/p&gt;
&lt;p&gt;继承:子类继承父类原有信息，子类再自己写一些东西。&lt;/p&gt;
&lt;p&gt;   多重继承:有多个父亲。&lt;/p&gt;
&lt;p&gt;   多态：父类和子类有相同的操作，但操作之间又不一样。&lt;/p&gt;
&lt;h3 id=&quot;对象的组成&quot;&gt;&lt;a href=&quot;#对象的组成&quot; class=&quot;headerlink&quot; title=&quot;对象的组成&quot;&gt;&lt;/a&gt;对象的组成&lt;/h3&gt;&lt;p&gt;方法——函数:过程,动态的&lt;/p&gt;
&lt;p&gt;属性——变量:状态,静态的&lt;/p&gt;
&lt;h3 id=&quot;例子代码&quot;&gt;&lt;a href=&quot;#例子代码&quot; class=&quot;headerlink&quot; title=&quot;例子代码&quot;&gt;&lt;/a&gt;例子代码&lt;/h3&gt;&lt;p&gt;使用构造函数来存储属性&lt;/p&gt;
&lt;p&gt;使用原型来构建方法&lt;/p&gt;
&lt;p&gt;使用原型来继承&lt;/p&gt;
&lt;p&gt;function Person(name,sex)//父类的构造函数,存储属性&lt;/p&gt;
&lt;p&gt;{//一般来说构造函数名就是类名,首字母大写&lt;/p&gt;
&lt;p&gt;  this.name = name;&lt;/p&gt;
&lt;p&gt;  this.sex = sex;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//定义方法&lt;/p&gt;
&lt;p&gt;Person.prototype.showName = function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(this.name);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;Person.prototype.showSex = function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(this.sex);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//创建类的实例&lt;/p&gt;
&lt;p&gt;//JS中一切皆是对象。String,Array对象都可以用new的方式创建实例。这些自定义的对象也采用了这种形式，&lt;/p&gt;
&lt;p&gt;var p1 = new Person(‘liu’,’man’);//写为’liu’,’man’是字面值常量,写为liu,man则是未定义的变量。会报错。&lt;/p&gt;
&lt;p&gt;p1.showName();&lt;/p&gt;
&lt;p&gt;p1.showSex();&lt;/p&gt;
&lt;p&gt;//下面开始定义子类并继承&lt;/p&gt;
&lt;p&gt;//属性的继承是通过在子类的构造函数中调用父类的构造函数实现&lt;/p&gt;
&lt;p&gt;function Worker(name,sex,job)&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  //一般的调用形式是:对象.方法。但call,apply的调用形式反过来了:方法.对象.参数。因为此时的方法并非这个对象上的。只是在这个对象上调用&lt;/p&gt;
&lt;p&gt;  Person.call(this,name,sex);&lt;/p&gt;
&lt;p&gt;  //子类新的属性&lt;/p&gt;
&lt;p&gt;  this.job = job;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//通过原型来继承父级的方法&lt;/p&gt;
&lt;p&gt;//赋值的方法,引用传递?&lt;/p&gt;
&lt;p&gt;Worker.prototype = Person.prototype;&lt;/p&gt;
&lt;p&gt;//实例化的方式,但属性这一块与上面有些重复&lt;/p&gt;
&lt;p&gt;//var Worker = new Person();//错误&lt;/p&gt;
&lt;p&gt;Worker.prototype = new Person();//不过这里不像真的实例化那样带参数&lt;/p&gt;
&lt;p&gt;//子类自定义的方法&lt;/p&gt;
&lt;p&gt;//Worker.prototype.showJob = function(job)//错误,参数传递在构造函数中进行,方法只用来执行功能&lt;/p&gt;
&lt;p&gt;Worker.prototype.showJob = function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  console.log(this.job);&lt;/p&gt;
&lt;p&gt;}&lt;br&gt;var w1 = new Worker(‘liu’,’man’,’worker’);&lt;/p&gt;
&lt;p&gt;//w1.showJob(‘worker’);&lt;/p&gt;
&lt;p&gt;w1.showJob();//worker&lt;/p&gt;
&lt;p&gt;JS采用的是原型继承。给对象添加属性和方法就比较简单。在给已有的对象(如Array)添加属性或方法的时候可能会冲突。所以自己添加时往往需要一个空白的对象。object就是一个空白的对象。&lt;/p&gt;
&lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;p&gt;JS中的this主要有4种使用场景。可以分别在browser和nodejs上测试，&lt;/p&gt;
&lt;p&gt;函数嵌套&lt;/p&gt;
&lt;p&gt;变量的作用域&lt;/p&gt;
&lt;p&gt;这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，常常变量替代的方法，约定俗成，该变量一般被命名为 that/self。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002640298&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript中的this陷阱的最全收集–没有之一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;//在浏览器中有3种情形,在nodejs中有5种情形&lt;/p&gt;
&lt;p&gt;//浏览器:&lt;/p&gt;
&lt;p&gt;//a. this和window&lt;/p&gt;
&lt;p&gt;//b. 全局范围内,加var声明变量,给this/window添加属性&lt;/p&gt;
&lt;p&gt;//c. 不加var声明变量,给this/window添加属性&lt;/p&gt;
&lt;p&gt;// 加var必须在全局范围内(不能在函数,json等内)才属于全局范围内的this,不加var,在任何地方都是全局范围内的this的属性(不加var,就成全局的了)。全局范围的this就等于window&lt;/p&gt;
&lt;p&gt;//nodejs&lt;/p&gt;
&lt;p&gt;//a. REPL中,最高级的是global, global===this&lt;/p&gt;
&lt;p&gt;//b. 全局范围内执行一个js脚本.this是一个为{}的最高级空间,this和global不等价&lt;/p&gt;
&lt;p&gt;//c. 全局范围内执行一个js脚本. 用var声明一个变量不会像浏览器中那样添加给this作为属性&lt;/p&gt;
&lt;p&gt;//d. 不是执行一个js脚本,而是直接执行代码,用var声明一个变量和浏览器中一样样添加给this作为属性(神坑)&lt;/p&gt;
&lt;p&gt;//e. 执行一个js脚本文件,声明变量的时候没用var或let(es6),变量会添加给global对象当属性,而不会添加给this对象&lt;/p&gt;
&lt;p&gt;//f. 不是执行一个js脚本,而是直接执行代码,声明变量的时候没用var或let(es6),变量会同时添加给global和this对象当属性&lt;/p&gt;
&lt;p&gt;//八种情况总结&lt;/p&gt;
&lt;p&gt;//在浏览器里面this是老大，它等价于window对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为this的属性。&lt;/p&gt;
&lt;p&gt;//在node里面，有两种执行JavaScript代码的方式，&lt;/p&gt;
&lt;p&gt;//一种是直接执行写好的JavaScript文件，&lt;/p&gt;
&lt;p&gt;//另外一种是直接在里面执行一行行代码。&lt;/p&gt;
&lt;p&gt;//对于直接运行一行行JavaScript代码的方式，global才是老大，this和它是等价的。在这种情况下，和浏览器比较相似，也就是声明一些全局变量会自动添加给老大global，顺带也会添加给this。&lt;br&gt;//但是在node里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到this，但是会添加到global对象。&lt;/p&gt;
&lt;p&gt;//所以相同点是，在全局范围内，全局变量终究是属于老大(global/window  在浏览器中this==window,在node中直接执行代码,global===this,执行js文件,global最大)的。&lt;br&gt;//变量和属性。 变量是对象的属性。  隐含对象。&lt;/p&gt;
&lt;h4 id=&quot;function调用的4种方式&quot;&gt;&lt;a href=&quot;#function调用的4种方式&quot; class=&quot;headerlink&quot; title=&quot;function调用的4种方式&quot;&gt;&lt;/a&gt;function调用的4种方式&lt;/h4&gt;&lt;p&gt;js中有四种调用模式—方法、函数、构造器以及apply调用模式，它们在初始化this时候是不一样的&lt;/p&gt;
&lt;p&gt;(1)方法模式 简单的说就是使用点号表达式或是下标表达式(下标里是字符串?)来调用(JS中没有箭头运算符) 这里定然是有对象的 这种情况下 this的绑定发生在调用的时候 绑的自然是调它的那个对象了&lt;/p&gt;
&lt;p&gt;(2)函数模式 这个就更简单了  函数名加调用运算符（’()’）  不过要小心  这个this绑的可是全局对象  不管你写哪了。可以理解成  你不给我指明了,我就自己给它加个全局对象。&lt;/p&gt;
&lt;p&gt;有了上面变量和作用域的基础,我们来看看&lt;code&gt;嵌套函数下的this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;p&gt;var name = 3;&lt;/p&gt;
&lt;p&gt;var obj = { //JON对象&lt;/p&gt;
&lt;p&gt;   name:1,&lt;/p&gt;
&lt;p&gt;   showName:function(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(this.name);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;obj.double = function()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  var name = 2;&lt;/p&gt;
&lt;p&gt;  var dd = function()&lt;/p&gt;
&lt;p&gt;  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(this.name);//3

console.log(obj.name);//1

//看name属于谁,当看它离哪个作用域最近,且JS只有2个作用域:全局和函数。要不然都会归结到全局(顶层作用域)上去,这也不合理

//还有这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，常常变量替代的方法，约定俗成，该变量一般被命名为 that/self。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  dd();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;obj.double();&lt;/p&gt;
&lt;p&gt;上面的this.name绑定到全局name中去了。是3.&lt;/p&gt;
&lt;p&gt;现在的解决办法:&lt;/p&gt;
&lt;p&gt;obj.name = function(){&lt;/p&gt;
&lt;p&gt;  var name = 2;&lt;/p&gt;
&lt;p&gt;  var that = this;&lt;/p&gt;
&lt;p&gt;  var dd = function()&lt;/p&gt;
&lt;p&gt;  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;console.log(this.name);//1

console.log(obj.name);//1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;(3)构造器调用模式  一句话就是用new来调用的  new的时候this就绑定到新对象上了  比较好理解&lt;/p&gt;
&lt;p&gt;(4)apply调用模式  apply是函数的一个方法吧 你想把谁绑定到this 就直接把它作为第一个参数传给apply就好了&lt;/p&gt;
&lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;字符串的处理是每种语言的一个重点&lt;/p&gt;
&lt;p&gt;p145&lt;/p&gt;
&lt;p&gt;P152 问题&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;h3 id=&quot;《javascript权威指南》&quot;&gt;&lt;a href=&quot;#《javascript权威指南》&quot; class=&quot;headerlink&quot; title=&quot;《javascript权威指南》&quot;&gt;&lt;/a&gt;《javascript权威指南》&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; class=&quot;headerlink&quot; title=&quot;javascript&quot;&gt;&lt;/a&gt;javascript&lt;/h1&gt;&lt;script type=&quot;”text/javascript”&quot;&gt;

&lt;/scri
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>node环境搭建</title>
    <link href="http://yoursite.com/2016/06/21/node%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/06/21/node环境搭建/</id>
    <published>2016-06-21T04:33:01.000Z</published>
    <updated>2016-06-21T10:47:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前都是把学习记录写在word上。按照时间线的记录方式不利于回顾。现在按照主题线写在博客上。现在把以前学习node的一些在这里总结一下。具体的项目分析见另外一篇文章《nodeclub源码分析》。&lt;/p&gt;
&lt;h2 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h2&gt;&lt;p&gt;MACOS + webstorm&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;官方安装node&quot;&gt;&lt;a href=&quot;#官方安装node&quot; class=&quot;headerlink&quot; title=&quot;官方安装node&quot;&gt;&lt;/a&gt;官方安装node&lt;/h2&gt;&lt;p&gt;可以在&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs官网&lt;/a&gt;上下载pkg文件安装。node和npm的执行文件都在/usr/local/bin/里。 /usr/local/lib/node_modules/npm/usr/local/lib/node_modules/n/bin 则是实际上存放npm和n的地方。n是一个用来管理nodejs版本的包。但不用这个,下面会用到nvm,更方便一些。&lt;/p&gt;
&lt;h2 id=&quot;卸载node&quot;&gt;&lt;a href=&quot;#卸载node&quot; class=&quot;headerlink&quot; title=&quot;卸载node&quot;&gt;&lt;/a&gt;卸载node&lt;/h2&gt;&lt;p&gt;MAC下卸载软件很多直接删除安装包就行了。但node的一些文件在系统目录和用户目录里都有,你得找到全部,逐一删除。比较麻烦。这也是推荐用nvm的一个原因。你可以用nvm卸载node。nvm自身的删除也比较简单,nvm及它安装的node都在用户目录下的.nvm文件夹,删除,升级都很方便。&lt;/p&gt;
&lt;p&gt;终端：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lsbom -f -l -s -pf /var/db/receipts/org.nodejs.pkg.bom | while read f; do  sudo rm /usr/local/${f}; done&lt;/code&gt;&lt;br&gt;会删除一部分&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /usr/local/lib/node /usr/local/lib/node_modules /var/db/receipts/org.nodejs.*&lt;/code&gt;&lt;br&gt;又会删除一部分&lt;/p&gt;
&lt;p&gt;再执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf ~/.npm&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf ~/.node-gyp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo rm -rf /usr/local/include/node&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;主要集中在&lt;code&gt;/usr/local/&lt;/code&gt;及username/liuhongyu/目录，也即用户目录和系统目录&lt;br&gt;比如/usr/local/bin下的n可执行文件。在这些文件夹中把与node有关的删除就行了。&lt;/p&gt;
&lt;p&gt;还有就是在&lt;code&gt;username/.bash_profile&lt;/code&gt;中删除环境变量。&lt;/p&gt;
&lt;h2 id=&quot;nvm安装&quot;&gt;&lt;a href=&quot;#nvm安装&quot; class=&quot;headerlink&quot; title=&quot;nvm安装&quot;&gt;&lt;/a&gt;nvm安装&lt;/h2&gt;&lt;p&gt;另一种方式是采用nvm安装。nvm和nodejs等是独立的。这样方便管理一些。并且用nvm安装node可以多个版本共存,切换起来也比较方便。在&lt;a href=&quot;https://github.com/creationix/nvm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nvm官方github&lt;/a&gt;上有详细的安装过程。在MAC上也可以使用homebrew来安装,便于nvm自身的版本管理。不过我当初还是按照github上的说明安装的。&lt;/p&gt;
&lt;p&gt;MAC下nvm比较方便,但并不支持windows,不过nvm的作者推荐了windows上用&lt;code&gt;nvm-windows&lt;/code&gt;。是由另外一个人完成的。&lt;/p&gt;
&lt;p&gt;当你&lt;code&gt;curl https://raw.githubusercontent.com/creationix/nvm/v0.17.2/install.sh | bash&lt;/code&gt;的时候&lt;br&gt;会自动增加环境变量到.bash_profile中,也就是说不需要你手动添加环境变量了。&lt;/p&gt;
&lt;h3 id=&quot;nvm的卸载&quot;&gt;&lt;a href=&quot;#nvm的卸载&quot; class=&quot;headerlink&quot; title=&quot;nvm的卸载&quot;&gt;&lt;/a&gt;nvm的卸载&lt;/h3&gt;&lt;p&gt;直接删除就行了。终端命令:&lt;code&gt;rm -rf ~/.nvm&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;nvm安装node-js&quot;&gt;&lt;a href=&quot;#nvm安装node-js&quot; class=&quot;headerlink&quot; title=&quot;nvm安装node.js&quot;&gt;&lt;/a&gt;nvm安装node.js&lt;/h3&gt;&lt;p&gt;终端输入&lt;code&gt;nvm&lt;/code&gt;,会弹出一些文字说明,会告诉你一些nvm命令的使用方法。&lt;/p&gt;
&lt;p&gt;如&lt;code&gt;nvm install  v0.12.0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;node被安装到了&lt;code&gt;username/.nvm/versions/node/v0.12.0&lt;/code&gt;里面&lt;br&gt;并且也有npm:&lt;br&gt;&lt;code&gt;username/.nvm/versions/node/v0.12.0/lib/node_modules/npm&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;nvm卸载node&quot;&gt;&lt;a href=&quot;#nvm卸载node&quot; class=&quot;headerlink&quot; title=&quot;nvm卸载node&quot;&gt;&lt;/a&gt;nvm卸载node&lt;/h3&gt;&lt;p&gt;&lt;code&gt;nvm uninstall &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;nvm使用node&quot;&gt;&lt;a href=&quot;#nvm使用node&quot; class=&quot;headerlink&quot; title=&quot;nvm使用node&quot;&gt;&lt;/a&gt;nvm使用node&lt;/h3&gt;&lt;p&gt;&lt;code&gt;nvm current&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvm use 0.1.20&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;nvm自身升级&quot;&gt;&lt;a href=&quot;#nvm自身升级&quot; class=&quot;headerlink&quot; title=&quot;nvm自身升级&quot;&gt;&lt;/a&gt;nvm自身升级&lt;/h3&gt;&lt;p&gt;nvm的自身升级对node没有影响。但降级对node有影响&lt;/p&gt;
&lt;h2 id=&quot;npm包管理器&quot;&gt;&lt;a href=&quot;#npm包管理器&quot; class=&quot;headerlink&quot; title=&quot;npm包管理器&quot;&gt;&lt;/a&gt;npm包管理器&lt;/h2&gt;&lt;p&gt;node的包都是由npm管理的。所以我们用nvm管理node(包括nvm自身),用npm管理node的包。npm安装包有2种方式:全局安装和本地安装。&lt;/p&gt;
&lt;h3 id=&quot;全局安装&quot;&gt;&lt;a href=&quot;#全局安装&quot; class=&quot;headerlink&quot; title=&quot;全局安装&quot;&gt;&lt;/a&gt;全局安装&lt;/h3&gt;&lt;p&gt;安装敲命令的时候加上&lt;code&gt;-g&lt;/code&gt;,比如以安装&lt;code&gt;hexo&lt;/code&gt;为例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo npm install hexo -g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样安装的包就会像npm一样被安装在了&lt;code&gt;username/.nvm/versions/node/v0.12.0/lib/node_modules/&lt;/code&gt;里面。然后被安装的包如’hexo’就可以全局使用了。&lt;/p&gt;
&lt;h3 id=&quot;本地安装&quot;&gt;&lt;a href=&quot;#本地安装&quot; class=&quot;headerlink&quot; title=&quot;本地安装&quot;&gt;&lt;/a&gt;本地安装&lt;/h3&gt;&lt;p&gt;终端下切换到你的工程目录。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install packagename&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样就会在你的工程目录中生成node_modules文件夹,包会安装在这里。&lt;/p&gt;
&lt;p&gt;当然最好是:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm init&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样会生成一个&lt;code&gt;package.json&lt;/code&gt;,下次安装包的时候加上&lt;code&gt;-- save&lt;/code&gt;后缀,就可以在&lt;code&gt;package.json&lt;/code&gt;中保存包的信息。这样就比较方便在别处安装。比如你在github上clone别人的开源项目,一般是没有node_modules包的。因为这个比加大,push上去也没有必要。一般会push &lt;code&gt;package.json&lt;/code&gt;,你clone到&lt;code&gt;package.json&lt;/code&gt;以后直接&lt;code&gt;npm install&lt;/code&gt;,就会安装&lt;code&gt;package.json&lt;/code&gt;里面的所有包,比较方便。&lt;/p&gt;
&lt;p&gt;以express为例:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install express --save&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这样express的信息就被记录在了&lt;code&gt;package.json&lt;/code&gt;里,下次如果你要安装很多个包,就不需要一个一个安装了。直接&lt;code&gt;npm install&lt;/code&gt;就行了。&lt;/p&gt;
&lt;h2 id=&quot;node使用&quot;&gt;&lt;a href=&quot;#node使用&quot; class=&quot;headerlink&quot; title=&quot;node使用&quot;&gt;&lt;/a&gt;node使用&lt;/h2&gt;&lt;p&gt;node的文档在&lt;a href=&quot;https://nodejs.org/en/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node官网&lt;/a&gt;上。可以先练习一下相关的API。但了解一下即可。具体有项目需求自取查阅,这样学的快一些。&lt;/p&gt;
&lt;h2 id=&quot;基于node的框架&quot;&gt;&lt;a href=&quot;#基于node的框架&quot; class=&quot;headerlink&quot; title=&quot;基于node的框架&quot;&gt;&lt;/a&gt;基于node的框架&lt;/h2&gt;&lt;p&gt;直接用node原生进行开发的项目应该是比较少的了。一般采用基于node的一些web框架如express和koa&lt;/p&gt;
&lt;h3 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;express官网&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;koa&quot;&gt;&lt;a href=&quot;#koa&quot; class=&quot;headerlink&quot; title=&quot;koa&quot;&gt;&lt;/a&gt;koa&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://koajs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;koa官网&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;MEAN快速构建网站&quot;&gt;&lt;a href=&quot;#MEAN快速构建网站&quot; class=&quot;headerlink&quot; title=&quot;MEAN快速构建网站&quot;&gt;&lt;/a&gt;MEAN快速构建网站&lt;/h2&gt;&lt;p&gt;&lt;code&gt;MEAN&lt;/code&gt;:mongodb,express,angularjs,node&lt;/p&gt;
&lt;h2 id=&quot;2个现成的&quot;&gt;&lt;a href=&quot;#2个现成的&quot; class=&quot;headerlink&quot; title=&quot;2个现成的&quot;&gt;&lt;/a&gt;2个现成的&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/linnovate/mean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linnovate/mean&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/meanjs/mean&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;meanjs/mean&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;手工拼接&quot;&gt;&lt;a href=&quot;#手工拼接&quot; class=&quot;headerlink&quot; title=&quot;手工拼接&quot;&gt;&lt;/a&gt;手工拼接&lt;/h2&gt;&lt;p&gt;大多数情况下,并不用上面2个现成的项目。而是自己用MEAN各个部分进行开发。这有分为2部分:&lt;/p&gt;
&lt;h3 id=&quot;重前端&quot;&gt;&lt;a href=&quot;#重前端&quot; class=&quot;headerlink&quot; title=&quot;重前端&quot;&gt;&lt;/a&gt;重前端&lt;/h3&gt;&lt;p&gt;以angular为主。虽然还是用到了node等,但业务逻辑什么的大多数由类似&lt;code&gt;angular,react,vue&lt;/code&gt;这样的前端框架来完成。当然还有mongodb,但项目中mongoose用的多。&lt;/p&gt;
&lt;h3 id=&quot;重后端&quot;&gt;&lt;a href=&quot;#重后端&quot; class=&quot;headerlink&quot; title=&quot;重后端&quot;&gt;&lt;/a&gt;重后端&lt;/h3&gt;&lt;p&gt;直接用node+express或node+koa就行了。不用前端框架。比如&lt;a href=&quot;https://github.com/cnodejs/nodeclub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnode社区源码&lt;/a&gt;就是直接用Node.js 和 MongoDB 开发的社区系统。也被很多人拿来做二次开发。在github上搜索cnode可以搜到很多。&lt;/p&gt;
&lt;h3 id=&quot;Restful-API&quot;&gt;&lt;a href=&quot;#Restful-API&quot; class=&quot;headerlink&quot; title=&quot;Restful API&quot;&gt;&lt;/a&gt;Restful API&lt;/h3&gt;&lt;h1 id=&quot;打包构建工具&quot;&gt;&lt;a href=&quot;#打包构建工具&quot; class=&quot;headerlink&quot; title=&quot;打包构建工具&quot;&gt;&lt;/a&gt;打包构建工具&lt;/h1&gt;&lt;p&gt;不用这些工具,应用也能正常运行。但用了更好。就像嵌入式里用UCOS-II操作系统。也是这样。&lt;/p&gt;
&lt;h2 id=&quot;Grunt-vs-Gulp&quot;&gt;&lt;a href=&quot;#Grunt-vs-Gulp&quot; class=&quot;headerlink&quot; title=&quot;Grunt vs Gulp&quot;&gt;&lt;/a&gt;Grunt vs Gulp&lt;/h2&gt;&lt;h2 id=&quot;Browserify-vs-Webpack&quot;&gt;&lt;a href=&quot;#Browserify-vs-Webpack&quot; class=&quot;headerlink&quot; title=&quot;Browserify vs Webpack&quot;&gt;&lt;/a&gt;Browserify vs Webpack&lt;/h2&gt;&lt;h1 id=&quot;部署&quot;&gt;&lt;a href=&quot;#部署&quot; class=&quot;headerlink&quot; title=&quot;部署&quot;&gt;&lt;/a&gt;部署&lt;/h1&gt;&lt;h2 id=&quot;AWS&quot;&gt;&lt;a href=&quot;#AWS&quot; class=&quot;headerlink&quot; title=&quot;AWS&quot;&gt;&lt;/a&gt;AWS&lt;/h2&gt;&lt;h2 id=&quot;阿里云&quot;&gt;&lt;a href=&quot;#阿里云&quot; class=&quot;headerlink&quot; title=&quot;阿里云&quot;&gt;&lt;/a&gt;阿里云&lt;/h2&gt;&lt;h2 id=&quot;leancloud&quot;&gt;&lt;a href=&quot;#leancloud&quot; class=&quot;headerlink&quot; title=&quot;leancloud&quot;&gt;&lt;/a&gt;leancloud&lt;/h2&gt;&lt;h2 id=&quot;coding&quot;&gt;&lt;a href=&quot;#coding&quot; class=&quot;headerlink&quot; title=&quot;coding&quot;&gt;&lt;/a&gt;coding&lt;/h2&gt;&lt;h1 id=&quot;移动端&quot;&gt;&lt;a href=&quot;#移动端&quot; class=&quot;headerlink&quot; title=&quot;移动端&quot;&gt;&lt;/a&gt;移动端&lt;/h1&gt;&lt;p&gt;不得不说JS全栈的好处。能干的活非常多。对于讲究开发效率的互联网产品来说,这是非常重要的。JS能够这么流行的一个重要原因在于:强大的开源社区。人多了,解决方案自然也多了。JS刚出道的时候还只能写一些网页脚本,现在已经无处不在。&lt;/p&gt;
&lt;h2 id=&quot;reactjs&quot;&gt;&lt;a href=&quot;#reactjs&quot; class=&quot;headerlink&quot; title=&quot;reactjs&quot;&gt;&lt;/a&gt;reactjs&lt;/h2&gt;&lt;h2 id=&quot;ionic&quot;&gt;&lt;a href=&quot;#ionic&quot; class=&quot;headerlink&quot; title=&quot;ionic&quot;&gt;&lt;/a&gt;ionic&lt;/h2&gt;&lt;h1 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h1&gt;&lt;h2 id=&quot;Electron&quot;&gt;&lt;a href=&quot;#Electron&quot; class=&quot;headerlink&quot; title=&quot;Electron&quot;&gt;&lt;/a&gt;Electron&lt;/h2&gt;&lt;h1 id=&quot;嵌入式&quot;&gt;&lt;a href=&quot;#嵌入式&quot; class=&quot;headerlink&quot; title=&quot;嵌入式&quot;&gt;&lt;/a&gt;嵌入式&lt;/h1&gt;&lt;h2 id=&quot;Tessel&quot;&gt;&lt;a href=&quot;#Tessel&quot; class=&quot;headerlink&quot; title=&quot;Tessel&quot;&gt;&lt;/a&gt;Tessel&lt;/h2&gt;&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/getstart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cnode社区新手入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《node与express开发》&lt;/p&gt;
&lt;p&gt;《Nodejs实战》&lt;/p&gt;
&lt;p&gt;《Nodejs实战》第2季&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;以前都是把学习记录写在word上。按照时间线的记录方式不利于回顾。现在按照主题线写在博客上。现在把以前学习node的一些在这
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>C语言小结3</title>
    <link href="http://yoursite.com/2016/06/20/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%933/"/>
    <id>http://yoursite.com/2016/06/20/C语言小结3/</id>
    <published>2016-06-20T10:48:26.000Z</published>
    <updated>2016-06-20T11:13:05.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;函数-数组-指针-字符串-结构体-共用体&quot;&gt;&lt;a href=&quot;#函数-数组-指针-字符串-结构体-共用体&quot; class=&quot;headerlink&quot; title=&quot;函数,数组,指针,字符串,结构体,共用体&quot;&gt;&lt;/a&gt;函数,数组,指针,字符串,结构体,共用体&lt;/h1&gt;&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;h3 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h3&gt;&lt;p&gt;指针变量在使用之前必须进行初始化:&lt;/p&gt;
&lt;p&gt;int num = 100;&lt;/p&gt;
&lt;p&gt;int *p;&lt;/p&gt;
&lt;p&gt;printf(“%d”,*p); //error,未初始化&lt;/p&gt;
&lt;p&gt;指针未初始化可能会出现意外的后果。系统中有一些垃圾数据。未初始化时系统可能赋值给指针p一个垃圾数据当作地址。这个地址可能不该访问。&lt;/p&gt;
&lt;p&gt;下面这样赋值会把100当成地址:&lt;/p&gt;
&lt;p&gt;p = num;&lt;/p&gt;
&lt;p&gt;printf(“%d”,*p); //可能会报错。因为地址为100的内存区域可能是系统的。这样可能会造成非法访问。&lt;/p&gt;
&lt;p&gt;像上面这样赋值还会有类型问题。左边是int *类型,右边是int类型&lt;/p&gt;
&lt;p&gt;p = \&amp;num;  //这样赋值以后p就指向了num&lt;/p&gt;
&lt;p&gt;一般在声明的时候就初始化:&lt;/p&gt;
&lt;p&gt;int *p = \&amp;num;&lt;/p&gt;
&lt;h3 id=&quot;取地址运算符-amp-，-间接运算符&quot;&gt;&lt;a href=&quot;#取地址运算符-amp-，-间接运算符&quot; class=&quot;headerlink&quot; title=&quot;取地址运算符&amp;amp;， 间接运算符*&quot;&gt;&lt;/a&gt;取地址运算符&amp;amp;， 间接运算符*&lt;/h3&gt;&lt;p&gt;\&amp;amp;运算符:  取地址运算符，\&amp;amp;m即是变量m在内存中的实际地址。&lt;/p&gt;
&lt;p&gt;*运算符： 指针运算符 (通常称为间接引用运算符),它返回其操作数 (即一个指针)所指向的对象的值.这种方式访问变量称为间接访问。直接访问是直接使用变量名来访问。&lt;/p&gt;
&lt;p&gt;打印指针,地址格式符:%p , %x&lt;/p&gt;
&lt;p&gt;%x:   按照十六进制打印，无意义的0就不打印&lt;/p&gt;
&lt;p&gt;%p:   显示地址的位数，32位，8个十六进制，2^4=16,32位&lt;br&gt;      显示地址的位数，64位，16个十六进制位，64个二进制位&lt;/p&gt;
&lt;h3 id=&quot;指向指针的指针-二级指针&quot;&gt;&lt;a href=&quot;#指向指针的指针-二级指针&quot; class=&quot;headerlink&quot; title=&quot;指向指针的指针,二级指针&quot;&gt;&lt;/a&gt;指向指针的指针,二级指针&lt;/h3&gt;&lt;p&gt;通过**声明一个二级指针&lt;/p&gt;
&lt;p&gt;int num;&lt;/p&gt;
&lt;p&gt;int *a = \&amp;num;&lt;/p&gt;
&lt;p&gt;int **b = \&amp;a;&lt;/p&gt;
&lt;p&gt;指针作为函数形参:&lt;/p&gt;
&lt;p&gt;函数形式参数，除了数组以外，传递的任何数据，变量，都会新建一个变量接收传入的变量的值。不影响原来的变量，如果是一个数据，传递数据的地址（指针），如果是一个指针，传递指针的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 注: &lt;/strong&gt; 声明的时候 int *p = \&amp;num;  &lt;em&gt; 与 int在一起表示指针类型(int \&lt;/em&gt;)。右边直接赋值为地址。&lt;/p&gt;
&lt;p&gt;但声明后使用则不能 *p = \&amp;num;  因为此时*p表示p指向的那个值。应该用 p = \&amp;num;&lt;/p&gt;
&lt;p&gt;所谓指针类型，指的是声明指针变量时位于变量名前的“类型*”，而所谓指针所指向的类型，指的是为指针初始化或赋值的变量类型。&lt;/p&gt;
&lt;p&gt;不是同一类型的指针，不可以任意赋值。不同的数据类型，大小不一样（如果强制赋值的话，就会少读取或多读取，内存有很多垃圾0,1），解析方式不一样.&lt;/p&gt;
&lt;p&gt;注:指针不同类型之间的赋值和数据不同类型之间的赋值还有所不同。后者只是数据有溢出或截短，但前者可能找到另外一个指针去了，指向的就不再是以前的那个数据了。&lt;/p&gt;
&lt;p&gt;同类型指针的赋值.这是最常见的一种情况，如所示，pN1和pN2是两个相同类型的指针，执行“pN2=pN1;”这样一个赋值操作后，pN1和pN2指向同样的地址，也就是说，两个指针指向同一个内存单元，对&lt;em&gt;pN2的任何改动都会影响&lt;/em&gt;pN1的值，反之亦然。&lt;/p&gt;
&lt;h3 id=&quot;指针的类型和指针所指向的类型&quot;&gt;&lt;a href=&quot;#指针的类型和指针所指向的类型&quot; class=&quot;headerlink&quot; title=&quot;指针的类型和指针所指向的类型&quot;&gt;&lt;/a&gt;指针的类型和指针所指向的类型&lt;/h3&gt;&lt;p&gt;指针除了地址以外还有类型，类型决定了指向的数据大小，决定了数据的解析方式。指针的类型必须要与指针指向的类型一致。&lt;/p&gt;
&lt;p&gt;指向内存字节数大于指针类型占据的字节数&lt;/p&gt;
&lt;p&gt;指向内存字节数小于指针类型占据的字节数&lt;/p&gt;
&lt;h3 id=&quot;指针变量的值&quot;&gt;&lt;a href=&quot;#指针变量的值&quot; class=&quot;headerlink&quot; title=&quot;指针变量的值&quot;&gt;&lt;/a&gt;指针变量的值&lt;/h3&gt;&lt;p&gt;指针变量的值是指针本身存储的数值，这个值将被编译器当作一个地址，而不是&lt;br&gt;一个一般的数值。在32位程序里，所有类型的指针的值都是一个32位整数，因为32位程序里内存地址长度都为32位。&lt;/p&gt;
&lt;p&gt;指针所指向的内存区就是从指针的值所代表的那个内存地址开始，长度为sizeof(指针所指向的类型)的一片内存区。&lt;/p&gt;
&lt;p&gt;指针存储的是地址，地址是首地址，从哪里开始，从哪里结束，由类型决定，类型决定长度，决定如何解析。&lt;/p&gt;
&lt;h3 id=&quot;指针的运算&quot;&gt;&lt;a href=&quot;#指针的运算&quot; class=&quot;headerlink&quot; title=&quot;指针的运算&quot;&gt;&lt;/a&gt;指针的运算&lt;/h3&gt;&lt;p&gt;int a = 5;&lt;/p&gt;
&lt;p&gt;int *p = a;&lt;/p&gt;
&lt;p&gt;*p = 3;&lt;/p&gt;
&lt;p&gt;把a的值5作为地址 0x00000005赋值给*p是发生访问冲突。整数与指针最好不要直接运算。&lt;/p&gt;
&lt;h3 id=&quot;指向数组的指针&quot;&gt;&lt;a href=&quot;#指向数组的指针&quot; class=&quot;headerlink&quot; title=&quot;指向数组的指针&quot;&gt;&lt;/a&gt;指向数组的指针&lt;/h3&gt;&lt;p&gt;指向数组的指针被编译器解析为数组的首地址&lt;/p&gt;
&lt;p&gt;数组的遍历:&lt;/p&gt;
&lt;p&gt;通过下标循环进行遍历&lt;/p&gt;
&lt;p&gt;a[i]和*(a + i)等价&lt;/p&gt;
&lt;p&gt;通过dll注入的方式修改另一个进程的数据&lt;/p&gt;
&lt;p&gt;int a[3] = {1,2,3};&lt;/p&gt;
&lt;p&gt;int *p = a;&lt;/p&gt;
&lt;p&gt;printf(“%d,%x,%x”,*p,a,&amp;amp;p);&lt;/p&gt;
&lt;p&gt;通过定义并初始化二级指针p(下面给*&lt;em&gt;p赋的值是读到的上面\&lt;/em&gt;p的地址&amp;amp;p),使其改变另一个程序的指针p的指向，从而改变它的值。&lt;/p&gt;
&lt;p&gt;_declspec(dllexport) void go()&lt;br&gt;{&lt;/p&gt;
&lt;p&gt;int *&lt;em&gt;p = (int *&lt;/em&gt;)0x1bf734;   //注意左右两边的类型要匹配&lt;/p&gt;
&lt;p&gt;*p = (int *)(0x1bf740 + 36);  //注意左右两边的类型要匹配&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h3 id=&quot;指针的算术运算&quot;&gt;&lt;a href=&quot;#指针的算术运算&quot; class=&quot;headerlink&quot; title=&quot;指针的算术运算&quot;&gt;&lt;/a&gt;指针的算术运算&lt;/h3&gt;&lt;p&gt;指针++就是按照指针类型的大小，前进一个类型(不是一个字节)的大小，如int,前进四个字节。&lt;/p&gt;
&lt;p&gt;指针++就是按照指针类型的大小，前进一个类型(不是一个字节)的大小，int,前进四个字节。&lt;/p&gt;
&lt;p&gt;指针++  就是 指针每次向前移动sizeof(指针类型)个字节。&lt;/p&gt;
&lt;p&gt;通过指针循环(以前是下标循环)的方式初始化数组a的每一个元素（从头到尾扫描数组）:&lt;/p&gt;
&lt;p&gt;int a[5];&lt;/p&gt;
&lt;p&gt;int i = 0;&lt;/p&gt;
&lt;p&gt;for(int *p = a;p &amp;lt; a + 5;p++) //在数组内部用p++才有意义,移动的是sizeof(*p)个字节&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;  *p = i++;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;注:i(下标循环)和p(指针循环)的效果是一样的。注意指针p++只能用于数组内部&lt;/p&gt;
&lt;p&gt;指针加上2,在数组内部等价于向后移动两个元素的大小,指针减去3，等价于数组内部，向前移动3个元素(和p++是一致的)的大小&lt;/p&gt;
&lt;p&gt;求指针的具体地址&lt;/p&gt;
&lt;p&gt;double   *p=0x300400;&lt;br&gt;p=p+2   ; //p=0x300416=p+2&lt;em&gt;sizeof(double)&lt;br&gt;p=p-5;    //p=0x300416-sizeof(double)\&lt;/em&gt;5=0x300376&lt;/p&gt;
&lt;h3 id=&quot;指针之间的比较&quot;&gt;&lt;a href=&quot;#指针之间的比较&quot; class=&quot;headerlink&quot; title=&quot;指针之间的比较&quot;&gt;&lt;/a&gt;指针之间的比较&lt;/h3&gt;&lt;p&gt;对两个毫无关联的指针比较大小是没有意义的，因为指针只代表了“位置”这么一个信息， 但是， 如果两个指针所指向的元素位于同一个数组（或同一块动态申请的内存中）， 指针的大小比较反映了元素在数组中的先后关系。&lt;/p&gt;
&lt;p&gt;注：指针往往和数组联系在一起。要么就像游戏外挂那样，直接赋值为一个地址。&lt;/p&gt;
&lt;h3 id=&quot;指针运算&quot;&gt;&lt;a href=&quot;#指针运算&quot; class=&quot;headerlink&quot; title=&quot;指针运算&quot;&gt;&lt;/a&gt;指针运算&lt;/h3&gt;&lt;p&gt;*p++ 与&lt;em&gt;(p++)一样，相当于a[i++]&lt;br&gt;\&lt;/em&gt;(++p)，相当于a[++i]&lt;br&gt;(*p)++ 表示p所指向的元素值加1，而非指针值加1&lt;/p&gt;
&lt;p&gt;num[i]与*（num+i）等价    &amp;amp;num[i]等价于  num+i&lt;br&gt;num是第一个元素的首地址，指向int 类型&lt;br&gt;每次指针相加，相加指针指向的类型的大小&lt;/p&gt;
&lt;h3 id=&quot;指向元素的指针与指向数组的指针&quot;&gt;&lt;a href=&quot;#指向元素的指针与指向数组的指针&quot; class=&quot;headerlink&quot; title=&quot;指向元素的指针与指向数组的指针&quot;&gt;&lt;/a&gt;指向元素的指针与指向数组的指针&lt;/h3&gt;&lt;p&gt;若有定义int(*p)[3];则定义了一个名为p的指针变量，表示p是一个指针变量，它可以指向每行有三个整数（即int型）元素的二维数组.&lt;/p&gt;
&lt;p&gt;p指针每一次加1就相当于把p中存的地址加6（前提是int类型占2个字节，在VC中是占4个字节）。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;int a[3][3];&lt;/p&gt;
&lt;p&gt;int(*p)[3];&lt;/p&gt;
&lt;p&gt;p = a; //p=a的意思是把数组a的首地址存放到p中那么p[1]就是a[1][0]的地址，p[1][0]就等于a[1][0]，而p[1][2]就等于a[1][2].&lt;/p&gt;
&lt;p&gt;a通常表示一维数组首地址,&amp;amp;a通常表示二维数组首地址。但在二维数组中a和&amp;amp;a的值是相等的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注:赋值的时候要注意类型匹配。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数-数组-指针-字符串-结构体-共用体&quot;&gt;&lt;a href=&quot;#函数-数组-指针-字符串-结构体-共用体&quot; class=&quot;headerlink&quot; title=&quot;函数,数组,指针,字符串,结构体,共用体&quot;&gt;&lt;/a&gt;函数,数组,指针,字符串,结构体,共用体&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言小结2</title>
    <link href="http://yoursite.com/2016/06/20/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%932/"/>
    <id>http://yoursite.com/2016/06/20/C语言小结2/</id>
    <published>2016-06-20T10:48:19.000Z</published>
    <updated>2016-06-20T10:55:07.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;语言逻辑流程&quot;&gt;&lt;a href=&quot;#语言逻辑流程&quot; class=&quot;headerlink&quot; title=&quot;语言逻辑流程&quot;&gt;&lt;/a&gt;语言逻辑流程&lt;/h1&gt;&lt;h2 id=&quot;C语言语句类型&quot;&gt;&lt;a href=&quot;#C语言语句类型&quot; class=&quot;headerlink&quot; title=&quot;C语言语句类型:&quot;&gt;&lt;/a&gt;C语言语句类型:&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E8%AF%AD%E5%8F%A5%E7%B1%BB%E5%9E%8B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;结构化程序设计的3种控制结构&quot;&gt;&lt;a href=&quot;#结构化程序设计的3种控制结构&quot; class=&quot;headerlink&quot; title=&quot;结构化程序设计的3种控制结构&quot;&gt;&lt;/a&gt;结构化程序设计的3种控制结构&lt;/h2&gt;&lt;h3 id=&quot;顺序结构&quot;&gt;&lt;a href=&quot;#顺序结构&quot; class=&quot;headerlink&quot; title=&quot;顺序结构&quot;&gt;&lt;/a&gt;顺序结构&lt;/h3&gt;&lt;h3 id=&quot;分支结构&quot;&gt;&lt;a href=&quot;#分支结构&quot; class=&quot;headerlink&quot; title=&quot;分支结构&quot;&gt;&lt;/a&gt;分支结构&lt;/h3&gt;&lt;h4 id=&quot;if-else&quot;&gt;&lt;a href=&quot;#if-else&quot; class=&quot;headerlink&quot; title=&quot;if else&quot;&gt;&lt;/a&gt;if else&lt;/h4&gt;&lt;p&gt;if else 嵌套&lt;/p&gt;
&lt;p&gt;If—else语句同时使用，需要匹配出现，否则出现“没有匹配if的非法else”错误&lt;/p&gt;
&lt;h4 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h4&gt;&lt;p&gt;switch(表达式)&lt;/p&gt;
&lt;p&gt; {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;case 常量表达式1:语句1

case 常量表达式2:语句2

……

case 常量表达式n:语句n

default:语句n+1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;switch语句中的“表达式”和case后面的“常量表达式”的结果值的类型应该一致。其类型可以是除实型以外的任何类型（如整型、字符型、枚举类型）。每一个case后的常量表达式的值必须互不相同。执行完一个case后面的语句后，流程控制到下一个case继续执行。因此，多个case可共用一组语句。&lt;/p&gt;
&lt;p&gt;switch语句中可以不含default分支；default分支并不限定在最后，几个case分支也没有顺序区别，但必须做适当处理，否则会影响执行结果。当default语句省略时，表示“缺省情况下什么也不做”。某些编译器可能会对default语句的缺失给出警告，从防错意义上说，即使什么也不做，最好也把default语句写上，采用下述形式：&lt;br&gt;default：&lt;br&gt;；/&lt;em&gt;（空语句。不要忘记分号）&lt;/em&gt;/&lt;br&gt;当default语句不在switch结构的最后时，不要忘记使用break。&lt;/p&gt;
&lt;p&gt;break为跳出去执行switch后面的语句。终止switch语句的执行。为了执行完某个分支后跳出switch结构，应在其后加上break语句。如果不加break则会顺序执行下一个case语句。&lt;/p&gt;
&lt;p&gt;int num;&lt;/p&gt;
&lt;p&gt;switch(num)&lt;br&gt;{&lt;/p&gt;
&lt;p&gt;  case 3:&lt;/p&gt;
&lt;p&gt;  //&lt;/p&gt;
&lt;p&gt;  case 2:&lt;/p&gt;
&lt;p&gt;  printf(“大于2”);&lt;/p&gt;
&lt;p&gt;  break;&lt;/p&gt;
&lt;p&gt;  case 1:&lt;/p&gt;
&lt;p&gt;  printf(“为1”);&lt;/p&gt;
&lt;p&gt;  break;&lt;/p&gt;
&lt;p&gt;  default://default可以不在最后&lt;/p&gt;
&lt;p&gt;  break;//最后一个default可以省略。也是可以跳出switch的。&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;关闭_CRT_SECURE_NO_WARNINGS警告:(不然像scanf()这类函数都不能用)&lt;/p&gt;
&lt;p&gt;在项目-&amp;gt;属性-&amp;gt;C/C++-&amp;gt;预处理器-&amp;gt;预处理器定中添加&lt;br&gt;  _CRT_SECURE_NO_WARNINGS 这个预定义。&lt;/p&gt;
&lt;p&gt;下图中default语句在中间,如果不写break,输入5,则除了会打印”输入不合法”,还会打印”输入为2”.即使没有default语句,最后一个case 0不加break,也不会有错误结果。但一般都要加上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80switch%E8%AF%AD%E5%8F%A5.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;if与Switch语句进行比较&quot;&gt;&lt;a href=&quot;#if与Switch语句进行比较&quot; class=&quot;headerlink&quot; title=&quot;if与Switch语句进行比较&quot;&gt;&lt;/a&gt;if与Switch语句进行比较&lt;/h4&gt;&lt;p&gt;switch结构只进行相等与否的判断，而if…else…结构还可以进行大于小于等范围上的判断。&lt;/p&gt;
&lt;p&gt;此外，switch无法处理浮点数，只进行整数的判断，&lt;/p&gt;
&lt;p&gt;而且，case标签值必须是常量，如果涉及到浮点数和变量的判断，应当使用if…else…结构。应当从可读性和程序效率多方面综合考虑，适当搭配两种结构，方能写出高质量的代码。&lt;/p&gt;
&lt;h3 id=&quot;循环结构&quot;&gt;&lt;a href=&quot;#循环结构&quot; class=&quot;headerlink&quot; title=&quot;循环结构&quot;&gt;&lt;/a&gt;循环结构&lt;/h3&gt;&lt;h4 id=&quot;C语言中的三种循环语句&quot;&gt;&lt;a href=&quot;#C语言中的三种循环语句&quot; class=&quot;headerlink&quot; title=&quot;C语言中的三种循环语句&quot;&gt;&lt;/a&gt;C语言中的三种循环语句&lt;/h4&gt;&lt;p&gt;while 语句（当型）&lt;/p&gt;
&lt;p&gt;do-while 语句（直到型）&lt;/p&gt;
&lt;p&gt;for 语句（当型）&lt;/p&gt;
&lt;h4 id=&quot;循环体中的辅助控制语句&quot;&gt;&lt;a href=&quot;#循环体中的辅助控制语句&quot; class=&quot;headerlink&quot; title=&quot;循环体中的辅助控制语句&quot;&gt;&lt;/a&gt;循环体中的辅助控制语句&lt;/h4&gt;&lt;h5 id=&quot;break-语句&quot;&gt;&lt;a href=&quot;#break-语句&quot; class=&quot;headerlink&quot; title=&quot;break 语句&quot;&gt;&lt;/a&gt;break 语句&lt;/h5&gt;&lt;p&gt;用在switch语句中使流程跳出switch结构，继续执行switch语句后面的语句。&lt;br&gt;用在循环体内，迫使所在循环立即终止(跳出当前循环体)，继续执行循环体后面的第一条语句。&lt;/p&gt;
&lt;p&gt;break语句不能用于循环语句和switch语句之外的任何其他语句。&lt;/p&gt;
&lt;h5 id=&quot;continue-语句&quot;&gt;&lt;a href=&quot;#continue-语句&quot; class=&quot;headerlink&quot; title=&quot;continue 语句&quot;&gt;&lt;/a&gt;continue 语句&lt;/h5&gt;&lt;p&gt;结束本次循环(跳过循环体中尚未执行的语句)，接着进行是否执行下一次循环的判定。&lt;/p&gt;
&lt;h4 id=&quot;continue和break的区别&quot;&gt;&lt;a href=&quot;#continue和break的区别&quot; class=&quot;headerlink&quot; title=&quot;continue和break的区别&quot;&gt;&lt;/a&gt;continue和break的区别&lt;/h4&gt;&lt;p&gt;continue只结束本次循环，而非终止整个循环。&lt;/p&gt;
&lt;p&gt;break则是结束所在循环，不再进行条件判断。&lt;/p&gt;
&lt;h5 id=&quot;goto-语句&quot;&gt;&lt;a href=&quot;#goto-语句&quot; class=&quot;headerlink&quot; title=&quot;goto 语句&quot;&gt;&lt;/a&gt;goto 语句&lt;/h5&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语言逻辑流程&quot;&gt;&lt;a href=&quot;#语言逻辑流程&quot; class=&quot;headerlink&quot; title=&quot;语言逻辑流程&quot;&gt;&lt;/a&gt;语言逻辑流程&lt;/h1&gt;&lt;h2 id=&quot;C语言语句类型&quot;&gt;&lt;a href=&quot;#C语言语句类型&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C语言小结</title>
    <link href="http://yoursite.com/2016/06/20/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2016/06/20/C语言小结/</id>
    <published>2016-06-20T10:48:08.000Z</published>
    <updated>2016-06-20T10:53:57.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;IDE-helloword&quot;&gt;&lt;a href=&quot;#IDE-helloword&quot; class=&quot;headerlink&quot; title=&quot;IDE,helloword&quot;&gt;&lt;/a&gt;IDE,helloword&lt;/h1&gt;&lt;p&gt;visual studio 2013&lt;/p&gt;
&lt;h1 id=&quot;数据类型-运算符-表达式&quot;&gt;&lt;a href=&quot;#数据类型-运算符-表达式&quot; class=&quot;headerlink&quot; title=&quot;数据类型,运算符,表达式&quot;&gt;&lt;/a&gt;数据类型,运算符,表达式&lt;/h1&gt;&lt;h2 id=&quot;内存中的位，字节，字&quot;&gt;&lt;a href=&quot;#内存中的位，字节，字&quot; class=&quot;headerlink&quot; title=&quot;内存中的位，字节，字&quot;&gt;&lt;/a&gt;内存中的位，字节，字&lt;/h2&gt;&lt;p&gt;计算机中的内存是以位为最小存储单位的。通过对内存进行组织，可以引用特定的位集合。把计算机的内存起始位编号为1，每隔8位编号增1，也就是以字节为单位，每隔一个字节编号向上加一，可以对计算机所有内存进行编号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不同数据类型占据的空间不同。char一般占1个byte,short一般占2个,int在16位机器上占2个,在32位机器上占4个,double占8个&lt;/p&gt;
&lt;h2 id=&quot;原码反码补码&quot;&gt;&lt;a href=&quot;#原码反码补码&quot; class=&quot;headerlink&quot; title=&quot;原码反码补码&quot;&gt;&lt;/a&gt;原码反码补码&lt;/h2&gt;&lt;p&gt;正数：原码、反码、补码相同&lt;/p&gt;
&lt;p&gt;负数：最高位为1，其余位为原码取反，再对整个数加1。也就是反码加1（逆操作就是反码减1再取反）&lt;/p&gt;
&lt;p&gt;一般只提原码，补码，反码只是作为过渡。&lt;/p&gt;
&lt;p&gt;在原码，补码的转换中，符号位是不变的。不论正负。负数的其它位进行取反操作。&lt;/p&gt;
&lt;p&gt;在计算机系统中,数值一律用补码来表示。&lt;/p&gt;
&lt;h2 id=&quot;有符号数与无符号数&quot;&gt;&lt;a href=&quot;#有符号数与无符号数&quot; class=&quot;headerlink&quot; title=&quot;有符号数与无符号数&quot;&gt;&lt;/a&gt;有符号数与无符号数&lt;/h2&gt;&lt;p&gt;以int类型为例。16位机器上,默认(signed) int为有符号数。数值范围是-32767——32767.无符号数是unsigned int,范围是0——65535。&lt;/p&gt;
&lt;p&gt;例子:&lt;/p&gt;
&lt;p&gt;unsigned char x= - 0x10;&lt;/p&gt;
&lt;p&gt;printf(“%x\n”,x);//输出f0&lt;/p&gt;
&lt;p&gt;signed char x= - 0x10;&lt;/p&gt;
&lt;p&gt;printf(“%x\n”,x);//输出fffffff0&lt;/p&gt;
&lt;p&gt;Printf(“%x”,&amp;amp;x)   //按照十六进制形式打印x的地址&lt;/p&gt;
&lt;p&gt;%d : 以十进制形式输出数据&lt;br&gt;%o : 以八进制形式输出数据&lt;br&gt;%x : 以十六进制形式输出数据&lt;br&gt;%u : 以十进制形式输出unsigned型数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;unsigned char x= - 0x10;&lt;/p&gt;
&lt;p&gt;原码 ‭0001 0000‬   unsigned char符号位应该是0,也就是不存储符号位&lt;/p&gt;
&lt;p&gt;反码 1110 1111   但仍然是负数,如果是正数的话,反码和原码是一样的&lt;/p&gt;
&lt;p&gt;补码 1111 0000   这一个首位的1不是符号位,是数据位,和原码不存储符号位是一致的,如果首位存储符号位的话,就无法存储数据位了。这就相当于一个正数0x10了。总之,符号位丢了。&lt;/p&gt;
&lt;p&gt;Printf(“%x”,&amp;amp;x)的时候会把这个unsigned char以无符号(unsigned)的十六进制形式输出。也就是 0000 0000 1111 0000,也就是f0了&lt;/p&gt;
&lt;p&gt;signed char x= - 0x10;&lt;/p&gt;
&lt;p&gt;原码: ‭1001 0000   1是符号位,不是数据位&lt;/p&gt;
&lt;p&gt;反码: 1110 1111   反码和符号位没关系,是数据位取反&lt;/p&gt;
&lt;p&gt;补码: 1111 0000   首位1是符号位&lt;/p&gt;
&lt;p&gt;Printf(“%x”,&amp;amp;x)的时候会把这个unsigned char以无符号(unsigned)的十六进制形式输出。就变成 0000  0000  1111 0000,又是00f0了。显然与结果不符。&lt;/p&gt;
&lt;p&gt;关键是现在signed char的首位1是个符号位。转化为unsigned int的话,应该不能这样转化。&lt;/p&gt;
&lt;p&gt;原码: 0000 0000 0001 0000&lt;br&gt;反码: 1111 1111 1110 1111&lt;br&gt;补码: 1111 1111 1111 0000&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 小结 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;符号位是不参与数据位的取反,加1操作的。&lt;/p&gt;
&lt;p&gt;正数的原码,反码,补码一样,负数才有这些操作。关键在符号位和数据位不要处理混了。还有尽管上面用ussigned char存储-1,首位为0,但仍然是负数,它的补码还是取反的。不像正数,补码是它本身。但首位变成了数据位,也参与取反运算。&lt;/p&gt;
&lt;p&gt;上面看出:unsigned char 转换为unsigned int直接加00就行了。但signed char转unsigned int还要从原码开始计算,不能随意丢弃符号位,不能随意把符号位变为数据位。&lt;/p&gt;
&lt;p&gt;以补码形式存储。以原码形式读取?还是要区分正负。有无符号位。&lt;/p&gt;
&lt;p&gt;计算机没有数据类型的概念。并不认识unsigned和signed&lt;/p&gt;
&lt;p&gt;再用-1尝试。&lt;/p&gt;
&lt;p&gt;unsigned char x= - 1;&lt;/p&gt;
&lt;p&gt;printf(“%x\n”,x);//输出ff&lt;/p&gt;
&lt;p&gt;signed char x= - 1;&lt;/p&gt;
&lt;p&gt;printf(“%x\n”,x);//输出fffffff&lt;/p&gt;
&lt;p&gt;以signed int形式打印。&lt;/p&gt;
&lt;p&gt;unsigned char x= - 1;&lt;/p&gt;
&lt;p&gt;printf(“%d\n”,x);//输出&lt;/p&gt;
&lt;p&gt;signed char x= - 1;&lt;/p&gt;
&lt;p&gt;printf(“%d\n”,x);//输出&lt;/p&gt;
&lt;p&gt;unsigned char x= - 1;&lt;/p&gt;
&lt;p&gt;原码 0000 0001&lt;/p&gt;
&lt;p&gt;反码 1111 1110&lt;/p&gt;
&lt;p&gt;补码 1111 1111   //首位是数据位。可以直接转换为signed int&lt;/p&gt;
&lt;p&gt;0000 0000 1111 1111 // 255  。现在首位为0,并非为1,直接转换来的.现在为正数,原码,补码,反码相等&lt;/p&gt;
&lt;p&gt;signed char x= - 1;&lt;/p&gt;
&lt;p&gt;原码 1000 0001&lt;/p&gt;
&lt;p&gt;反码 1111 1110&lt;/p&gt;
&lt;p&gt;补码 1111 1111 //首位是符号位,不可以直接转换为signed int,从源码开始重新计算&lt;/p&gt;
&lt;p&gt;原码 1000 0000 0000 0001&lt;/p&gt;
&lt;p&gt;反码 1111 1111 1111 1110&lt;/p&gt;
&lt;p&gt;补码 1111 1111 1111 1111 //首位是符号位&lt;/p&gt;
&lt;p&gt;难道是 -32767 ？实际输出为-1。也就是虽然以补码形式存储,但还是以原码形式输出。&lt;/p&gt;
&lt;p&gt;8进制：octal&lt;/p&gt;
&lt;p&gt;10进制：decimal&lt;/p&gt;
&lt;p&gt;16进制：hex&lt;/p&gt;
&lt;h2 id=&quot;转义字符&quot;&gt;&lt;a href=&quot;#转义字符&quot; class=&quot;headerlink&quot; title=&quot;转义字符&quot;&gt;&lt;/a&gt;转义字符&lt;/h2&gt;&lt;p&gt;转义字符列表:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;字符常量与变量&quot;&gt;&lt;a href=&quot;#字符常量与变量&quot; class=&quot;headerlink&quot; title=&quot;字符常量与变量&quot;&gt;&lt;/a&gt;字符常量与变量&lt;/h2&gt;&lt;p&gt;字符常量：&lt;/p&gt;
&lt;p&gt;定义:用单引号括起来的单个普通字符或转义字符.&lt;/p&gt;
&lt;p&gt;字符常量的值：该字符的ASCII码值&lt;/p&gt;
&lt;p&gt;转义字符:反斜线后面跟一个字符或一个代码值表示&lt;/p&gt;
&lt;p&gt;ASCII码表:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80ascii%E7%A0%81%E8%A1%A8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;字符串常量：用双引号括起来的字符序列，每个字符串尾自动加个‘\0’作为字符串结束标志。&lt;/p&gt;
&lt;p&gt;例子:四种方式都是打印h&lt;/p&gt;
&lt;p&gt;十进制104，八进制150，十六进制68&lt;/p&gt;
&lt;p&gt;在上面转义字符表格中有说明&lt;/p&gt;
&lt;p&gt;\ddd  1-3位八进制数所代表的任意字符&lt;br&gt;\xhh  1-2位十六进制数代表的任意字符   &lt;/p&gt;
&lt;p&gt;putchar(‘h’);&lt;/p&gt;
&lt;p&gt;putchar(104);&lt;/p&gt;
&lt;p&gt;putchar(‘\150’); //开始以为是putchar(‘\d150’); 但实际上不需要加d&lt;/p&gt;
&lt;p&gt;putchar(‘\x68’);&lt;/p&gt;
&lt;p&gt;字符’1’和整数1是不同的概念：&lt;/p&gt;
&lt;p&gt;字符’1’只是代表一个形状为’1’的符号，在需要时按原样输出，在内存中以ASCII码形式存储，占1个字节。&lt;/p&gt;
&lt;p&gt;整数1是以整数存储方式(二进制补码方式)存储的，占2个或4个字节。&lt;/p&gt;
&lt;p&gt;如何存储和如何表示的是不一样的。存储都以补码形式存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 例子: &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;int a = 1;&lt;/p&gt;
&lt;p&gt;Printf(“%d,%c”,a,a);  //%d是输出a数值本身。%c是输出ASCII码值为a的字符&lt;/p&gt;
&lt;p&gt;char ch = ‘\0’;&lt;/p&gt;
&lt;p&gt;Printf(“%d,%c”,ch,ch);  //%d是求它的编号(ASCII码编号), %c是求ASCII码字符本身&lt;/p&gt;
&lt;p&gt;字符型变量在内存中占一个字节，由于存储的是字符的二进制ASCII码(补码?)，与整型数据存储方式类似，字符型数据和整型数据可以相互运算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 注意： &lt;/strong&gt; 字符串常量不允许赋值给字符型变量，C语言也没有专门的字符串变量。要在内存中存取字符串，只能使用数组或指针。&lt;/p&gt;
&lt;h3 id=&quot;ASCII码特例&quot;&gt;&lt;a href=&quot;#ASCII码特例&quot; class=&quot;headerlink&quot; title=&quot;ASCII码特例&quot;&gt;&lt;/a&gt;ASCII码特例&lt;/h3&gt;&lt;p&gt;关于ASCII码表:&lt;/p&gt;
&lt;p&gt;48是数字0，&lt;/p&gt;
&lt;p&gt;65是A，&lt;/p&gt;
&lt;p&gt;97是a，&lt;/p&gt;
&lt;p&gt;0是’\0’  也就是NULL，注意如果打印这个值，是什么也不输出，而非输出0&lt;/p&gt;
&lt;p&gt;32是空格字符&lt;/p&gt;
&lt;h2 id=&quot;类型自动转换&quot;&gt;&lt;a href=&quot;#类型自动转换&quot; class=&quot;headerlink&quot; title=&quot;类型自动转换&quot;&gt;&lt;/a&gt;类型自动转换&lt;/h2&gt;&lt;h3 id=&quot;隐式转换&quot;&gt;&lt;a href=&quot;#隐式转换&quot; class=&quot;headerlink&quot; title=&quot;隐式转换&quot;&gt;&lt;/a&gt;隐式转换&lt;/h3&gt;&lt;p&gt;整型、实型和字符型数据之间可以混合运算。例如：&lt;/p&gt;
&lt;p&gt;10 + ’a’ + 1.5 - 8765.1234 * ’b’&lt;/p&gt;
&lt;p&gt;不同数据类型之间运算会进行自动类型转换，规则如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;常常打印的几个值: 所占的字节长度，地址，数值大小&lt;/p&gt;
&lt;p&gt;低字节向高字节转换，极限范围小的向极限范围大的转换。  数据较大会从有符号数向无符号数转换&lt;/p&gt;
&lt;p&gt;赋值的时候，会自动将右边表达式转换成左边变量类型&lt;/p&gt;
&lt;h3 id=&quot;强制类型转换&quot;&gt;&lt;a href=&quot;#强制类型转换&quot; class=&quot;headerlink&quot; title=&quot;强制类型转换&quot;&gt;&lt;/a&gt;强制类型转换&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/C%E8%AF%AD%E8%A8%80%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;高类型向低类型转化时可能发生精度损失&quot;&gt;&lt;a href=&quot;#高类型向低类型转化时可能发生精度损失&quot; class=&quot;headerlink&quot; title=&quot;高类型向低类型转化时可能发生精度损失&quot;&gt;&lt;/a&gt;高类型向低类型转化时可能发生精度损失&lt;/h3&gt;&lt;p&gt;unsigned short a = 256;&lt;/p&gt;
&lt;p&gt;char b = a;&lt;/p&gt;
&lt;p&gt;printf(“%d”,b);//结果不是256,b只截取了a的低8位数据&lt;/p&gt;
&lt;h3 id=&quot;当把占字节较小的数据赋值给占字节较大的数据时，可能出现以下两种情况&quot;&gt;&lt;a href=&quot;#当把占字节较小的数据赋值给占字节较大的数据时，可能出现以下两种情况&quot; class=&quot;headerlink&quot; title=&quot;当把占字节较小的数据赋值给占字节较大的数据时，可能出现以下两种情况&quot;&gt;&lt;/a&gt;当把占字节较小的数据赋值给占字节较大的数据时，可能出现以下两种情况&lt;/h3&gt;&lt;p&gt;第1种情况，当字节较大数是无符号数时，转换时新扩充的位被填充成0&lt;/p&gt;
&lt;p&gt;char b = 10;&lt;/p&gt;
&lt;p&gt;unsigned short a = b;&lt;/p&gt;
&lt;p&gt;printf(“%u”,a);&lt;/p&gt;
&lt;p&gt;这样赋值后，变量a中输出的值是10&lt;/p&gt;
&lt;p&gt;第2种情况，当字节较大数是有符号数时，转换时新扩充的位被填充成符号位&lt;/p&gt;
&lt;p&gt;char b = 255;&lt;/p&gt;
&lt;p&gt;short a = b;&lt;/p&gt;
&lt;p&gt;printf(“%d”,a); //-1    &lt;/p&gt;
&lt;p&gt;b: 1111 1111  //char应该是有符号数。是存储不了255的,溢出了。这里可能进行了类型转换。转换成了无符号数。但1还是符号位?  signed确实会向unsigned转换。&lt;/p&gt;
&lt;p&gt;a: 1111 1111 1111 1111 //补码,表示-1&lt;/p&gt;
&lt;p&gt;CHAR_MAX  有符号char最大值&lt;/p&gt;
&lt;p&gt;CHAR_MIN  有符号char最小值&lt;/p&gt;
&lt;h1 id=&quot;位运算文件函数高级指针高级内存高级映射-内存四区生存期作用域&quot;&gt;&lt;a href=&quot;#位运算文件函数高级指针高级内存高级映射-内存四区生存期作用域&quot; class=&quot;headerlink&quot; title=&quot;位运算文件函数高级指针高级内存高级映射_内存四区生存期作用域&quot;&gt;&lt;/a&gt;位运算&lt;em&gt;文件&lt;/em&gt;函数高级&lt;em&gt;指针高级&lt;/em&gt;内存高级映射_内存四区生存期作用域&lt;/h1&gt;&lt;h1 id=&quot;编译选项-数据结构-链表-栈-队列-实战&quot;&gt;&lt;a href=&quot;#编译选项-数据结构-链表-栈-队列-实战&quot; class=&quot;headerlink&quot; title=&quot;编译选项,(数据结构)链表,栈,队列,实战&quot;&gt;&lt;/a&gt;编译选项,(数据结构)链表,栈,队列,实战&lt;/h1&gt;&lt;h2 id=&quot;references&quot;&gt;&lt;a href=&quot;#references&quot; class=&quot;headerlink&quot; title=&quot;references:&quot;&gt;&lt;/a&gt;references:&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;IDE-helloword&quot;&gt;&lt;a href=&quot;#IDE-helloword&quot; class=&quot;headerlink&quot; title=&quot;IDE,helloword&quot;&gt;&lt;/a&gt;IDE,helloword&lt;/h1&gt;&lt;p&gt;visual studio 2013&lt;/p&gt;
&lt;h1
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript小结</title>
    <link href="http://yoursite.com/2016/06/17/javascript%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2016/06/17/javascript小结/</id>
    <published>2016-06-16T22:45:49.000Z</published>
    <updated>2016-06-25T23:41:34.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h1&gt;&lt;p&gt;学前预热课程里有这部分内容,但是没有PPT资料,是自己截图的。&lt;/p&gt;
&lt;p&gt;有一个能够在Browser上运行的模板html。如果是nodejs的话,就是一个能够正常运行的express模板。&lt;/p&gt;
&lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;p&gt;P36&lt;/p&gt;
&lt;h2 id=&quot;BOM&quot;&gt;&lt;a href=&quot;#BOM&quot; class=&quot;headerlink&quot; title=&quot;BOM&quot;&gt;&lt;/a&gt;BOM&lt;/h2&gt;&lt;p&gt;P39&lt;/p&gt;
&lt;h2 id=&quot;event&quot;&gt;&lt;a href=&quot;#event&quot; class=&quot;headerlink&quot; title=&quot;event&quot;&gt;&lt;/a&gt;event&lt;/h2&gt;&lt;p&gt;P40&lt;/p&gt;
&lt;h3 id=&quot;鼠标事件&quot;&gt;&lt;a href=&quot;#鼠标事件&quot; class=&quot;headerlink&quot; title=&quot;鼠标事件&quot;&gt;&lt;/a&gt;鼠标事件&lt;/h3&gt;&lt;h3 id=&quot;键盘事件&quot;&gt;&lt;a href=&quot;#键盘事件&quot; class=&quot;headerlink&quot; title=&quot;键盘事件&quot;&gt;&lt;/a&gt;键盘事件&lt;/h3&gt;&lt;h2 id=&quot;cookie与session&quot;&gt;&lt;a href=&quot;#cookie与session&quot; class=&quot;headerlink&quot; title=&quot;cookie与session&quot;&gt;&lt;/a&gt;cookie与session&lt;/h2&gt;&lt;p&gt;P53&lt;/p&gt;
&lt;h1 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; class=&quot;headerlink&quot; title=&quot;css&quot;&gt;&lt;/a&gt;css&lt;/h1&gt;&lt;p&gt;样式有优先级，id的优先级大于class，所以有时候你改变class样式可能会没用。&lt;/p&gt;
&lt;p&gt;Css需要放在&lt;style&gt;标签，类似的JS需要&lt;script&gt;标签&lt;/p&gt;
&lt;style type=”text/css”&gt;

&lt;/style&gt;

&lt;/p&gt;&lt;p&gt;S中的style只能获取行间样式，所以后来才会去用currentStyle和getComputedStyle&lt;/p&gt;
&lt;h2 id=&quot;References&quot;&gt;&lt;a href=&quot;#References&quot; class=&quot;headerlink&quot; title=&quot;References&quot;&gt;&lt;/a&gt;References&lt;/h2&gt;&lt;h3 id=&quot;《javascript权威指南》&quot;&gt;&lt;a href=&quot;#《javascript权威指南》&quot; class=&quot;headerlink&quot; title=&quot;《javascript权威指南》&quot;&gt;&lt;/a&gt;《javascript权威指南》&lt;/h3&gt;&lt;h3 id=&quot;W3Cshhool-en-注意版本CSS3-CSS2&quot;&gt;&lt;a href=&quot;#W3Cshhool-en-注意版本CSS3-CSS2&quot; class=&quot;headerlink&quot; title=&quot;W3Cshhool-en   注意版本CSS3,CSS2&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.w3schools.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cshhool-en&lt;/a&gt;   注意版本CSS3,CSS2&lt;/h3&gt;&lt;h3 id=&quot;W3Cshhool-ch&quot;&gt;&lt;a href=&quot;#W3Cshhool-ch&quot; class=&quot;headerlink&quot; title=&quot;W3Cshhool-ch&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.w3school.com.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3Cshhool-ch&lt;/a&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;html&quot;&gt;&lt;a href=&quot;#html&quot; class=&quot;headerlink&quot; title=&quot;html&quot;&gt;&lt;/a&gt;html&lt;/h1&gt;&lt;p&gt;学前预热课程里有这部分内容,但是没有PPT资料,是自己截图的。&lt;/p&gt;
&lt;p&gt;有一个能够在Browser上运行的模板html
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Android Studio进行Android开发</title>
    <link href="http://yoursite.com/2016/05/22/%E4%BD%BF%E7%94%A8Android-Studio%E8%BF%9B%E8%A1%8CAndroid%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2016/05/22/使用Android-Studio进行Android开发/</id>
    <published>2016-05-22T10:54:29.000Z</published>
    <updated>2016-05-22T10:59:08.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;开源项目第一步&quot;&gt;&lt;a href=&quot;#开源项目第一步&quot; class=&quot;headerlink&quot; title=&quot;开源项目第一步&quot;&gt;&lt;/a&gt;开源项目第一步&lt;/h1&gt;&lt;h2 id=&quot;readme&quot;&gt;&lt;a href=&quot;#readme&quot; class=&quot;headerlink&quot; title=&quot;readme&quot;&gt;&lt;/a&gt;readme&lt;/h2&gt;&lt;h2 id=&quot;工程目录-模块文件&quot;&gt;&lt;a href=&quot;#工程目录-模块文件&quot; class=&quot;headerlink&quot; title=&quot;工程目录,模块文件&quot;&gt;&lt;/a&gt;工程目录,模块文件&lt;/h2&gt;&lt;h2 id=&quot;函数调用链&quot;&gt;&lt;a href=&quot;#函数调用链&quot; class=&quot;headerlink&quot; title=&quot;函数调用链&quot;&gt;&lt;/a&gt;函数调用链&lt;/h2&gt;&lt;h2 id=&quot;使用版本控制工具查看各个release版本&quot;&gt;&lt;a href=&quot;#使用版本控制工具查看各个release版本&quot; class=&quot;headerlink&quot; title=&quot;使用版本控制工具查看各个release版本&quot;&gt;&lt;/a&gt;使用版本控制工具查看各个release版本&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开源项目第一步&quot;&gt;&lt;a href=&quot;#开源项目第一步&quot; class=&quot;headerlink&quot; title=&quot;开源项目第一步&quot;&gt;&lt;/a&gt;开源项目第一步&lt;/h1&gt;&lt;h2 id=&quot;readme&quot;&gt;&lt;a href=&quot;#readme&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio使用指南</title>
    <link href="http://yoursite.com/2016/05/22/Android-Studio%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2016/05/22/Android-Studio使用指南/</id>
    <published>2016-05-22T10:43:24.000Z</published>
    <updated>2016-05-29T22:43:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Studio下载安装&quot;&gt;&lt;a href=&quot;#Android-Studio下载安装&quot; class=&quot;headerlink&quot; title=&quot;Android Studio下载安装&quot;&gt;&lt;/a&gt;Android Studio下载安装&lt;/h1&gt;&lt;h2 id=&quot;SDK&quot;&gt;&lt;a href=&quot;#SDK&quot; class=&quot;headerlink&quot; title=&quot;SDK&quot;&gt;&lt;/a&gt;SDK&lt;/h2&gt;&lt;p&gt;SDK的安装目录可以和Android Studio的安装目录分开。&lt;/p&gt;
&lt;h2 id=&quot;DNK&quot;&gt;&lt;a href=&quot;#DNK&quot; class=&quot;headerlink&quot; title=&quot;DNK&quot;&gt;&lt;/a&gt;DNK&lt;/h2&gt;&lt;p&gt;NDK也是如此。&lt;/p&gt;
&lt;h2 id=&quot;ant&quot;&gt;&lt;a href=&quot;#ant&quot; class=&quot;headerlink&quot; title=&quot;ant&quot;&gt;&lt;/a&gt;ant&lt;/h2&gt;&lt;p&gt;可以通过&lt;code&gt;brew install ant&lt;/code&gt; 来安装.&lt;br&gt;在&lt;code&gt;android/SDK/android-sdk-macosx/tools/ant&lt;/code&gt;中也有相关的一些文件&lt;/p&gt;
&lt;h2 id=&quot;gradle&quot;&gt;&lt;a href=&quot;#gradle&quot; class=&quot;headerlink&quot; title=&quot;gradle&quot;&gt;&lt;/a&gt;gradle&lt;/h2&gt;&lt;h2 id=&quot;adb&quot;&gt;&lt;a href=&quot;#adb&quot; class=&quot;headerlink&quot; title=&quot;adb&quot;&gt;&lt;/a&gt;adb&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://wiki.cyanogenmod.org/w/Doc:_adb_intro/zh-cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文档：adb简介&lt;/a&gt;中有它的介绍。adb在SDK的platform-tools目录。用Alfred搜索&lt;code&gt;platform-tools&lt;/code&gt;，就可以找到它在&lt;br&gt;&lt;code&gt;/Users/liuhongyu/Desktop/liu/workspace/mobile/android/intellij_idea/android/SDK/android-sdk-macosx/platform-tools/adb&lt;/code&gt;中找到。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android48.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;把环境变量添加到~/.bash_profile中,然后就可以在终端使用了:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;if [ -d &amp;quot;&amp;lt;path-to-sdk&amp;gt;/platform-tools&amp;quot; ] ; then
  export PATH=&amp;quot;&amp;lt;path-to-sdk&amp;gt;/platform-tools:$PATH&amp;quot;
fi&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;AVD&quot;&gt;&lt;a href=&quot;#AVD&quot; class=&quot;headerlink&quot; title=&quot;AVD&quot;&gt;&lt;/a&gt;AVD&lt;/h1&gt;&lt;h2 id=&quot;google自带的AVD&quot;&gt;&lt;a href=&quot;#google自带的AVD&quot; class=&quot;headerlink&quot; title=&quot;google自带的AVD&quot;&gt;&lt;/a&gt;google自带的AVD&lt;/h2&gt;&lt;h2 id=&quot;Genymotion&quot;&gt;&lt;a href=&quot;#Genymotion&quot; class=&quot;headerlink&quot; title=&quot;Genymotion&quot;&gt;&lt;/a&gt;Genymotion&lt;/h2&gt;&lt;p&gt;在setting中输入plugin进行搜索:&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.genymotion.com/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Genymotion官网&lt;/a&gt;下载Genymotion。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android35.1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;安装好之后重启就能在右上角看见插件了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android36-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开Genymotion，需要登录帐号才能够使用虚拟设备:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android38.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android39.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android41.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;到底下载到了哪里？在settings中可以找到：&lt;br&gt;/Users/liuhongyu/.Genymobile/Genymotion/deployed/Custom\ Phone\ -\ 6.0.0\ -\ API\ 23\ -\ 768x1280&lt;/p&gt;
&lt;p&gt;还有就是下载了VitualBox貌似并不需要怎么配置，甚至不需要打开(默认打开了?)就能够使用Genymotion的虚拟设备了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android41.1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击start，就弹出来虚拟机了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android42.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android43.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;运行helloword&lt;br&gt;需要先在右上角启动genymotion的虚拟机，然后再点击运行:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android44.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android45.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android36.1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VitualBox官网&lt;/a&gt;下载安装VitualBox。一路next安装就可以了。不需要特别的设置就可以使用Genymotion。&lt;/p&gt;
&lt;h3 id=&quot;VitualBox&quot;&gt;&lt;a href=&quot;#VitualBox&quot; class=&quot;headerlink&quot; title=&quot;VitualBox&quot;&gt;&lt;/a&gt;VitualBox&lt;/h3&gt;&lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;h1 id=&quot;插件&quot;&gt;&lt;a href=&quot;#插件&quot; class=&quot;headerlink&quot; title=&quot;插件&quot;&gt;&lt;/a&gt;插件&lt;/h1&gt;&lt;h1 id=&quot;使用gradle进行构建&quot;&gt;&lt;a href=&quot;#使用gradle进行构建&quot; class=&quot;headerlink&quot; title=&quot;使用gradle进行构建&quot;&gt;&lt;/a&gt;使用gradle进行构建&lt;/h1&gt;&lt;h2 id=&quot;build-gradle分析&quot;&gt;&lt;a href=&quot;#build-gradle分析&quot; class=&quot;headerlink&quot; title=&quot;build.gradle分析&quot;&gt;&lt;/a&gt;build.gradle分析&lt;/h2&gt;&lt;p&gt;以新建的helloworld为例进行分析。这个工程。会有2个build.gradle: project下的build.gradle,module下的build.gradle。&lt;/p&gt;
&lt;h3 id=&quot;project下的build-gradle&quot;&gt;&lt;a href=&quot;#project下的build-gradle&quot; class=&quot;headerlink&quot; title=&quot;project下的build.gradle&quot;&gt;&lt;/a&gt;project下的build.gradle&lt;/h3&gt;&lt;p&gt;&lt;code&gt;buildscript {&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repositories {
    jcenter()  //远程仓库,以前使用maven
}
dependencies {
    classpath &amp;apos;com.android.tools.build:gradle:2.1.0&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//gradle插件。要换成自己的版本。从安装目录里看到   com.android.tools.build是包名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;allprojects {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repositories {
    jcenter()
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;task clean(type: Delete) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;delete rootProject.buildDir
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;project下的build.gradle里面会配置一个gradle插件的目录。这个插件在本地的:&lt;code&gt;/Applications/Android\ Studio.app/Contents/gradle/m2repository/com/android/tools/build/gradle&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;关于gradle还有一个目录:&lt;code&gt;/Users/liuhongyu/.gradle/wrapper/dists/gradle-2.8-all&lt;/code&gt;。这个是本地的,上面是从远程仓库中下载的。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;preferences&lt;/code&gt;中搜索&lt;code&gt;gradle&lt;/code&gt;:&lt;br&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;project structure——project&lt;/code&gt;中也可以看到:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android50.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在项目的&lt;code&gt;HelloWorld/gradle/wrapper/gradle-wrapper.properties&lt;/code&gt;文件中也是有的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android51.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:有时候AS会提醒你升级gradle,因为项目可能是别人的,使用到了不同版本的gradle,下载之后不仅需要指定相应的gradle目录,还要修改相关配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:每次修改完build.gradle文件之后需要重新sync project with gradle files(以gradle方式构建项目),或者make project(以ant方式构建项目)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt; project下的build.gradle中不能有如下配置:&lt;/p&gt;
&lt;p&gt;compileSdkVersion 23&lt;/p&gt;
&lt;p&gt;buildToolsVersion “23.0.3”&lt;/p&gt;
&lt;p&gt;SDK版本的配置应该在module的build.gradle文件中&lt;/p&gt;
&lt;h3 id=&quot;module下的build-gradle&quot;&gt;&lt;a href=&quot;#module下的build-gradle&quot; class=&quot;headerlink&quot; title=&quot;module下的build.gradle&quot;&gt;&lt;/a&gt;module下的build.gradle&lt;/h3&gt;&lt;p&gt;apply plugin: ‘com.android.application’  //应用程序&lt;/p&gt;
&lt;p&gt;//android自身的配置&lt;/p&gt;
&lt;p&gt;android {//点击project structure可以查看&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compileSdkVersion 23
buildToolsVersion &amp;quot;23.0.3&amp;quot;

defaultConfig {
    applicationId &amp;quot;com.example.liuhongyu.helloworld&amp;quot;//应用程序包名
    minSdkVersion 8
    targetSdkVersion 23
    versionCode 1
    versionName &amp;quot;1.0&amp;quot;
}
buildTypes {
    release {
        minifyEnabled false  //设置混淆
        proguardFiles getDefaultProguardFile(&amp;apos;proguard-android.txt&amp;apos;), &amp;apos;proguard-rules.pro&amp;apos; //proguard-android.txt指定混淆文件,系统指定的规则
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;//依赖的配置&lt;/p&gt;
&lt;p&gt;dependencies {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;compile fileTree(`dir: &amp;apos;libs&amp;apos;, include: [&amp;apos;*.jar&amp;apos;]`) // jar包和库都会在这里进行编译
testCompile &amp;apos;junit:junit:4.12&amp;apos;
compile &amp;apos;com.android.support:appcompat-v7:23.3.0&amp;apos;
compile &amp;apos;com.android.support:design:23.3.0&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:最上面的compileSdkVersion 23和buildToolsVersion “23.0.3”在project structure中可以查看得到&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;jcenter中央仓库及依赖-dependency-管理&quot;&gt;&lt;a href=&quot;#jcenter中央仓库及依赖-dependency-管理&quot; class=&quot;headerlink&quot; title=&quot;jcenter中央仓库及依赖(dependency)管理&quot;&gt;&lt;/a&gt;jcenter中央仓库及依赖(dependency)管理&lt;/h2&gt;&lt;p&gt;比如上面的dependencies中&lt;code&gt;compile &amp;#39;com.android.support:design:23.3.0&amp;#39;&lt;/code&gt;&lt;br&gt;如果在jcenter中央仓库下载，就会被解析为&lt;br&gt;&lt;a href=&quot;http://jcenter.bintray.com/com/android/support/design/23.3.0,把逗号变成分号&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jcenter.bintray.com/com/android/support/design/23.3.0,把逗号变成分号&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;jcenter和mavenCentral&quot;&gt;&lt;a href=&quot;#jcenter和mavenCentral&quot; class=&quot;headerlink&quot; title=&quot;jcenter和mavenCentral&quot;&gt;&lt;/a&gt;jcenter和mavenCentral&lt;/h3&gt;&lt;h3 id=&quot;gradle是如何从仓库获取library&quot;&gt;&lt;a href=&quot;#gradle是如何从仓库获取library&quot; class=&quot;headerlink&quot; title=&quot;gradle是如何从仓库获取library&quot;&gt;&lt;/a&gt;gradle是如何从仓库获取library&lt;/h3&gt;&lt;h3 id=&quot;依赖管理-导入jar或依赖&quot;&gt;&lt;a href=&quot;#依赖管理-导入jar或依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖管理(导入jar或依赖)&quot;&gt;&lt;/a&gt;依赖管理(导入jar或依赖)&lt;/h3&gt;&lt;h2 id=&quot;导入外部项目并进行构建&quot;&gt;&lt;a href=&quot;#导入外部项目并进行构建&quot; class=&quot;headerlink&quot; title=&quot;导入外部项目并进行构建&quot;&gt;&lt;/a&gt;导入外部项目并进行构建&lt;/h2&gt;&lt;h3 id=&quot;导入Eclipse工程&quot;&gt;&lt;a href=&quot;#导入Eclipse工程&quot; class=&quot;headerlink&quot; title=&quot;导入Eclipse工程&quot;&gt;&lt;/a&gt;导入Eclipse工程&lt;/h3&gt;&lt;p&gt;导入外部项目(eclipse项目)的时候,有2种构建方式:ant构建方式(与用eclipse一样了)和gradle构建方式。&lt;/p&gt;
&lt;h4 id=&quot;方式一：导入后以gradle构建-含依赖库&quot;&gt;&lt;a href=&quot;#方式一：导入后以gradle构建-含依赖库&quot; class=&quot;headerlink&quot; title=&quot;方式一：导入后以gradle构建(含依赖库)&quot;&gt;&lt;/a&gt;方式一：导入后以gradle构建(含依赖库)&lt;/h4&gt;&lt;p&gt;假设要导入的项目&lt;code&gt;PhoneSafe&lt;/code&gt;目录结构如下,有一个依赖的外部库&lt;code&gt;XUtilsLibrary&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;直接导入上面的&lt;code&gt;PhoneSafe&lt;/code&gt;项目:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android57.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;错误原因:项目的&lt;code&gt;project.properties&lt;/code&gt;文件中,已经设置了外部库,把这一行删除再重新导入一次就行了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android60.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android61.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将XUtilsLibrary以外部module方式导入进来:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android62.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android63.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android64.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android65.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;把&lt;code&gt;XUtilsLibrary&lt;/code&gt;设置为&lt;code&gt;PhoneSafe&lt;/code&gt; APP的依赖,在&lt;code&gt;project structure&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android66.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android67.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android68.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android69.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:会报一些错误,大多是2个build.gradle的配置问题&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;方式二：导入后以Ant构建-含依赖库&quot;&gt;&lt;a href=&quot;#方式二：导入后以Ant构建-含依赖库&quot; class=&quot;headerlink&quot; title=&quot;方式二：导入后以Ant构建(含依赖库)&quot;&gt;&lt;/a&gt;方式二：导入后以Ant构建(含依赖库)&lt;/h4&gt;&lt;p&gt;把&lt;code&gt;PhoneSafe&lt;/code&gt;和外部库&lt;code&gt;XUtilsLibrary&lt;/code&gt;放在外层的&lt;code&gt;PhoneSafe&lt;/code&gt;目录下导入:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android53.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android70.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android71.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android72.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android73.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;bin目录要去勾选:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android74.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android75.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android76.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android77.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android78.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android79.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android80.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android81.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android82.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2者之间的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)导入时是否有外部目录&lt;/p&gt;
&lt;p&gt;(2)导入时gradle构建方式会出现gradle构建的对话框&lt;/p&gt;
&lt;p&gt;(3)由于(2)的缘故。gradle构建方式会出现build.gradle,ant构建方式则没有。&lt;/p&gt;
&lt;p&gt;(4)修改了配置文件的同步:一个用&lt;code&gt;make project&lt;/code&gt;,一个用&lt;code&gt;sync project with gradle files&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;AS调试&quot;&gt;&lt;a href=&quot;#AS调试&quot; class=&quot;headerlink&quot; title=&quot;AS调试&quot;&gt;&lt;/a&gt;AS调试&lt;/h1&gt;&lt;h2 id=&quot;单元测试&quot;&gt;&lt;a href=&quot;#单元测试&quot; class=&quot;headerlink&quot; title=&quot;单元测试&quot;&gt;&lt;/a&gt;单元测试&lt;/h2&gt;&lt;h1 id=&quot;签名混淆打包&quot;&gt;&lt;a href=&quot;#签名混淆打包&quot; class=&quot;headerlink&quot; title=&quot;签名混淆打包&quot;&gt;&lt;/a&gt;签名混淆打包&lt;/h1&gt;&lt;h2 id=&quot;多渠道打包&quot;&gt;&lt;a href=&quot;#多渠道打包&quot; class=&quot;headerlink&quot; title=&quot;多渠道打包&quot;&gt;&lt;/a&gt;多渠道打包&lt;/h2&gt;&lt;h1 id=&quot;AS版本控制-VCS&quot;&gt;&lt;a href=&quot;#AS版本控制-VCS&quot; class=&quot;headerlink&quot; title=&quot;AS版本控制(VCS)&quot;&gt;&lt;/a&gt;AS版本控制(VCS)&lt;/h1&gt;&lt;h2 id=&quot;SVN-默认&quot;&gt;&lt;a href=&quot;#SVN-默认&quot; class=&quot;headerlink&quot; title=&quot;SVN(默认)&quot;&gt;&lt;/a&gt;SVN(默认)&lt;/h2&gt;&lt;p&gt;用AS新建好项目后,在项目的&lt;code&gt;.idea/vcs.xml&lt;/code&gt;文件中有VCS相关配置。默认使用SVN,AS也默认安装了SVN?和相应的插件?(&lt;strong&gt;这个默认安装的subversion貌似是mac安装的,不是AS安装的&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android83.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;https://www.jetbrains.com/help/idea/15.0/authenticating-to-subversion.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Authenticating to Subversion&lt;/a&gt;提到了&lt;br&gt;&lt;code&gt;/Users/liuhongyu/.subversion&lt;/code&gt;这个目录,应该是默认安装了的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android87.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在项目中也有相应的SVN目录:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android95.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击上传按钮:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android84.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击下载按钮:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android85.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;会卡在认证这一步:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击&lt;code&gt;cancel&lt;/code&gt;之后会报错&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android88.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在preference-VCS中有SVN相关配置:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android89.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;google &lt;code&gt;android studio authentication realm svn&lt;/code&gt;&lt;br&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21323421/android-studio-cant-authenticate-with-svn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio can’t authenticate with SVN&lt;/a&gt;中提到了把上面2项去勾选就可以了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android90.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;还是会报错:&lt;code&gt;android studio commit failed with error: svn E175002:unknown host&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android91.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/zhouzme/article/details/22790395&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;【AndroidStudio】关于SVN的相关配置简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;终端能用svn说明可以使用:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android101.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;勾选下面2项:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android102.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install subversion&lt;/code&gt;安装subversion,把&lt;code&gt;export PATH=/usr/local/Cellar/subversion/1.8.13/bin&lt;/code&gt;添加到&lt;code&gt;.bash_profile&lt;/code&gt;,还是会包这个错误&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14509251/svn-error-e175002&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SVN Error E175002&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在系统中搜索svn或apache但搜索不到。用spotlight搜索也是。用Alfred搜索发现apache在自己安装的MAMP中。但这个并非系统默认安装的。可能是Alfred搜索不到隐藏文件?&lt;/p&gt;
&lt;p&gt;修改Apache下的&lt;code&gt;httpd.conf&lt;/code&gt;,把&lt;code&gt;Directory&lt;/code&gt;字段下改为&lt;code&gt;allow from all&lt;/code&gt;或&lt;code&gt;require all granted&lt;/code&gt;,还是会报错&lt;/p&gt;
&lt;p&gt;打开MAMP,还是会报错。&lt;/p&gt;
&lt;p&gt;但用brew安装新的subversion会引起新的问题:终端中node等很多命令不能用了,如下图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android104.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android105.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;解决:把&lt;code&gt;export PATH=/usr/local/Cellar/subversion/1.8.13/bin&lt;/code&gt;从&lt;code&gt;.bash_profile&lt;/code&gt;中删除,重启终端就可以了。看来mac默认安装的一些软件还不能乱改。&lt;/p&gt;
&lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;p&gt;首先用&lt;code&gt;brew insatll git&lt;/code&gt;安装git&lt;/p&gt;
&lt;p&gt;然后在AS中安装git插件。默认安装了的&lt;/p&gt;
&lt;p&gt;在AS中配置git插件：File-&amp;gt;Setting-&amp;gt;Version Control-&amp;gt;Git, 然后选择你本地的Git安装路径:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android92.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将项目初始化git项目(git init)，操作如下：VCS-&amp;gt;Enable Control Integration-&amp;gt;Select “Git”.（当然也可以使用git命令，自行选择）&lt;/p&gt;
&lt;p&gt;这个选项自己的项目没有。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/help/idea/2016.1/enable-version-control-integration-dialog.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Enable Version Control Integration Dialog&lt;/a&gt;中提示只有在项目没有使用任何Version Control System的时候才会出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:没有界面让你选择版本控制工具,但可以在&lt;code&gt;.idea/vcs.xml&lt;/code&gt;文件中配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/lao-liang/p/5019549.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio配置Git及Git文件状态说明&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将现有项目创建为本地git仓库。在工具栏依次选择VCS-&amp;gt;Import into Version Control-&amp;gt;Create Git Repository&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android93.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android94.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不久之后项目的&lt;code&gt;.idea/vcs.xml&lt;/code&gt;文件就改为git了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android96.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android97.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;PhoneSafe/PhoneSafe/src/cn/itcast/phonesafe/.git&lt;/code&gt;中就多了&lt;code&gt;.git&lt;/code&gt;文件夹&lt;/p&gt;
&lt;p&gt;在配置界面其实可以看到所有的版本控制工具:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android98.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以添加:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android99.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也可以选中一个进行编辑:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android100.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在项目的&lt;code&gt;.idea/vcs.xml&lt;/code&gt;文件中把版本控制工具再修改为svn:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android103.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Github&quot;&gt;&lt;a href=&quot;#Github&quot; class=&quot;headerlink&quot; title=&quot;Github&quot;&gt;&lt;/a&gt;Github&lt;/h3&gt;&lt;h2 id=&quot;references&quot;&gt;&lt;a href=&quot;#references&quot; class=&quot;headerlink&quot; title=&quot;references:&quot;&gt;&lt;/a&gt;references:&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://ask.android-studio.org/?/article/23&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Studio 常用功能介绍&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Studio下载安装&quot;&gt;&lt;a href=&quot;#Android-Studio下载安装&quot; class=&quot;headerlink&quot; title=&quot;Android Studio下载安装&quot;&gt;&lt;/a&gt;Android Studio下载安装&lt;/h1&gt;&lt;h2 id=&quot;S
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidDeveloperTraining2</title>
    <link href="http://yoursite.com/2016/05/13/AndroidDeveloperTraining2/"/>
    <id>http://yoursite.com/2016/05/13/AndroidDeveloperTraining2/</id>
    <published>2016-05-13T15:17:45.000Z</published>
    <updated>2016-05-15T08:26:28.000Z</updated>
    
    <content type="html">&lt;p&gt;继续&lt;a href=&quot;https://developer.android.com/training/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDeveloperTraining&lt;/a&gt;的练习&lt;/p&gt;
&lt;h1 id=&quot;Managing-the-Activity-Lifecycle&quot;&gt;&lt;a href=&quot;#Managing-the-Activity-Lifecycle&quot; class=&quot;headerlink&quot; title=&quot;Managing the Activity Lifecycle&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.android.com/training/basics/activity-lifecycle/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing the Activity Lifecycle&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;当用户使用,退出,返回你的app的时候,the Activity instances在它们的lifecycle中正在不通的states之间过度。比如当你的activity第一次启动(start),它就会到达foreground of the system,在这个过程中(process),Android system在activity上调用一套lifecycle methods,如果用户执行了一个操作(user performs an action)让app跳转到另一个activity或直接切换到另一个app(starts another activity or switches to another app)。Android system在activity上调用另一套lifecycle methods让它由foreground进入background。虽然activity不再可见,但是the instance and its state remains intact。&lt;/p&gt;
&lt;p&gt;在lifecycle callback methods内,你可以声明用户leaves and re-enters the activity时你的activity的表现行为。&lt;/p&gt;
&lt;h2 id=&quot;Starting-an-Activity&quot;&gt;&lt;a href=&quot;#Starting-an-Activity&quot; class=&quot;headerlink&quot; title=&quot;Starting an Activity&quot;&gt;&lt;/a&gt;Starting an Activity&lt;/h2&gt;&lt;p&gt;在其它的编程范式中,app靠一个main()启动。但Android system中在一个Activity instance 中启动代码却是靠调用specific callback methods that correspond to specific stages of its lifecycle。&lt;/p&gt;
&lt;p&gt;There is a &lt;code&gt;sequence of callback methods&lt;/code&gt; that start up (启动)an activity and a sequence of callback methods that tear down(拆除?) an activity.&lt;/p&gt;
&lt;p&gt;This lesson provides an overview of the &lt;code&gt;most important lifecycle methods&lt;/code&gt; and shows you how to handle the first lifecycle callback that &lt;code&gt;creates a new instance&lt;/code&gt; of your activity.&lt;/p&gt;
&lt;h3 id=&quot;Understand-the-Lifecycle-Callbacks&quot;&gt;&lt;a href=&quot;#Understand-the-Lifecycle-Callbacks&quot; class=&quot;headerlink&quot; title=&quot;Understand the Lifecycle Callbacks&quot;&gt;&lt;/a&gt;Understand the Lifecycle Callbacks&lt;/h3&gt;&lt;p&gt;Activity的3个状态:&lt;code&gt;Resumed(running),Paused,Stopped&lt;/code&gt;,&lt;code&gt;Created 和 Started&lt;/code&gt;是2个瞬态(临时状态),Android system很快通过调用next lifecycle callback method而进入next state。即after the system calls &lt;code&gt;onCreate()&lt;/code&gt;, it quickly calls &lt;code&gt;onStart()&lt;/code&gt;, which is quickly followed by &lt;code&gt;onResume()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;当用户leave/switches to another app/returns to the activity的时候,Android system会调用一系列的lifecycle callback methods让activity在不同的state之间切换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android33-basic-lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Specify-Your-App’s-Launcher-Activity&quot;&gt;&lt;a href=&quot;#Specify-Your-App’s-Launcher-Activity&quot; class=&quot;headerlink&quot; title=&quot;Specify Your App’s Launcher Activity&quot;&gt;&lt;/a&gt;Specify Your App’s Launcher Activity&lt;/h3&gt;&lt;p&gt;当用户点击手机屏幕上的app图标,系统为Activity调用onCreate(),这个Activity就是&lt;code&gt;&amp;quot;launcher&amp;quot; (or &amp;quot;main&amp;quot;) activity&lt;/code&gt;,这个Activity充当着 main entry point to your app’s user interface。&lt;/p&gt;
&lt;p&gt;你可以在 project根目录下的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中来定义充当main activity的那个activity。这个main activity在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中的标记有些特别,带有&lt;code&gt;&amp;lt;intent-filter&amp;gt;&lt;/code&gt;,&lt;code&gt;MAIN&lt;/code&gt;,&lt;code&gt;LAUNCHER&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;当你用SDK tools创建project的时候,default project files会包含一个Activity class that’s declared in the manifest with this filter,比如下图中的&lt;code&gt;MyActivity.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android34.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Create-a-New-Instance&quot;&gt;&lt;a href=&quot;#Create-a-New-Instance&quot; class=&quot;headerlink&quot; title=&quot;Create a New Instance&quot;&gt;&lt;/a&gt;Create a New Instance&lt;/h3&gt;&lt;p&gt;Most apps include several different activities that allow the user to perform different actions.当用户点击 app icon或是在其他应用中启动你的app的时候,system就会调用onCreate() creates every new instance of Activity.你必须完善onCreate()来执行一些basic application startup logic that should &lt;code&gt;happen only once&lt;/code&gt; for the entire life of the activity. 比如应该定义一些the user interface and possibly instantiate some class-scope variables.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SDK_INT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;onCreate()执行完之后会立即调用onStart(),onResume().Your activity never resides(驻留) in the Created or Started states. 即很快就调用onResume()而让activity常驻在Resumed state。&lt;/p&gt;
&lt;p&gt;The onCreate() method includes a parameter called &lt;code&gt;savedInstanceState&lt;/code&gt; that’s discussed in the latter lesson about Recreating an Activity.&lt;/p&gt;
&lt;h3 id=&quot;Destroy-the-Activity&quot;&gt;&lt;a href=&quot;#Destroy-the-Activity&quot; class=&quot;headerlink&quot; title=&quot;Destroy the Activity&quot;&gt;&lt;/a&gt;Destroy the Activity&lt;/h3&gt;&lt;p&gt;While the activity’s &lt;code&gt;first&lt;/code&gt; lifecycle callback is onCreate(), its very &lt;code&gt;last&lt;/code&gt; callback is onDestroy().与onPause() and onStop(),onCreate()的关系。有时候是不调用onDestroy()的。&lt;/p&gt;
&lt;p&gt;The system calls onDestroy() after it has already called onPause() and onStop() in all situations except one: when you call finish() from within the onCreate() method.&lt;/p&gt;
&lt;h2 id=&quot;Pausing-and-Resuming-an-Activity-暂停-恢复&quot;&gt;&lt;a href=&quot;#Pausing-and-Resuming-an-Activity-暂停-恢复&quot; class=&quot;headerlink&quot; title=&quot;Pausing and Resuming an Activity(暂停/恢复)&quot;&gt;&lt;/a&gt;Pausing and Resuming an Activity(暂停/恢复)&lt;/h2&gt;&lt;p&gt;app在使用过程中,foreground activity经常会被其它的visual components打断。这样就会导致activity被暂停。当activity仍然是partially visible but currently not the activity in focus,他就维持暂停(paused)状态。当activity是fully-obstructed and not visible时,他就被停止(stop)了。&lt;/p&gt;
&lt;p&gt;As your activity enters the &lt;code&gt;paused state&lt;/code&gt;,system calls the &lt;code&gt;onPause()&lt;/code&gt; method on your Activity,If the user returns to your activity from the paused state, the system &lt;code&gt;resumes&lt;/code&gt; it and calls the &lt;code&gt;onResume()&lt;/code&gt; method.&lt;/p&gt;
&lt;h3 id=&quot;Pause-Your-Activity&quot;&gt;&lt;a href=&quot;#Pause-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Pause Your Activity&quot;&gt;&lt;/a&gt;Pause Your Activity&lt;/h3&gt;&lt;p&gt;通常应该在onPause() callback里面做这些事情:&lt;/p&gt;
&lt;p&gt;Stop animations or other ongoing actions that could consume CPU.&lt;/p&gt;
&lt;p&gt;Commit unsaved changes&lt;/p&gt;
&lt;p&gt;Release system resources&lt;/p&gt;
&lt;p&gt;you should not use onPause() to store user changes (such as personal information entered into a form) to permanent storage&lt;/p&gt;
&lt;h3 id=&quot;Resume-Your-Activity&quot;&gt;&lt;a href=&quot;#Resume-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Resume Your Activity&quot;&gt;&lt;/a&gt;Resume Your Activity&lt;/h3&gt;&lt;p&gt;When the user resumes your activity from the Paused state, the system calls the onResume() method.&lt;/p&gt;
&lt;p&gt;the system calls this method every time your activity comes into the foreground, including when it’s created for the first time.&lt;/p&gt;
&lt;p&gt;通常应该在onResume() callback里面做这些事情:&lt;/p&gt;
&lt;p&gt;initialize components that you release during onPause() and perform any other initializations that must occur each time the activity enters the Resumed state (such as begin animations and initialize components only used while the activity has user focus).&lt;/p&gt;
&lt;h2 id=&quot;Stopping-and-Restarting-an-Activity-停止-重启&quot;&gt;&lt;a href=&quot;#Stopping-and-Restarting-an-Activity-停止-重启&quot; class=&quot;headerlink&quot; title=&quot;Stopping and Restarting an Activity(停止/重启)&quot;&gt;&lt;/a&gt;Stopping and Restarting an Activity(停止/重启)&lt;/h2&gt;&lt;p&gt;Activity停止/重启的几个应用场景:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;见官方教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Activity class provides two lifecycle methods, &lt;code&gt;onStop() and onRestart()&lt;/code&gt;, which allow you to specifically handle how your activity handles being stopped and restarted。Unlike the &lt;code&gt;paused state&lt;/code&gt;, which identifies a &lt;code&gt;partial&lt;/code&gt; UI obstruction, the &lt;code&gt;stopped state&lt;/code&gt; guarantees that the UI is &lt;code&gt;no longer visible&lt;/code&gt; and the user’s focus is in a separate activity (or an entirely separate app).&lt;/p&gt;
&lt;p&gt; Because the system retains your Activity instance in system memory when it is stopped, it’s possible that you &lt;code&gt;don&amp;#39;t need to implement&lt;/code&gt;the &lt;code&gt;onStop()&lt;/code&gt; and &lt;code&gt;onRestart()&lt;/code&gt; (or even onStart() methods at all.)&lt;/p&gt;
&lt;h2 id=&quot;Stop-Your-Activity&quot;&gt;&lt;a href=&quot;#Stop-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Stop Your Activity&quot;&gt;&lt;/a&gt;Stop Your Activity&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;见官方教程&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Start-Restart-Your-Activity&quot;&gt;&lt;a href=&quot;#Start-Restart-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Start/Restart Your Activity&quot;&gt;&lt;/a&gt;Start/Restart Your Activity&lt;/h2&gt;&lt;p&gt;onStart(),onRestart()&lt;/p&gt;
&lt;h2 id=&quot;Recreating-重现-an-Activity&quot;&gt;&lt;a href=&quot;#Recreating-重现-an-Activity&quot; class=&quot;headerlink&quot; title=&quot;Recreating(重现) an Activity&quot;&gt;&lt;/a&gt;Recreating(重现) an Activity&lt;/h2&gt;&lt;p&gt;By default, the system uses the &lt;code&gt;Bundle&lt;/code&gt; instance state to save information about each View object in your activity layout (such as the text value entered into an EditText object)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;destroyed and recreated&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用场景:用户点击返回键。&lt;/p&gt;
&lt;p&gt;In order for the Android system to restore the &lt;code&gt;state of the views&lt;/code&gt; in your activity, each view must have a &lt;code&gt;unique ID&lt;/code&gt;, supplied by the &lt;code&gt;android:id&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;onSaveInstanceState(),onRestoreInstanceState()&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android35basic-lifecycle-savestate.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Save-Your-Activity-State&quot;&gt;&lt;a href=&quot;#Save-Your-Activity-State&quot; class=&quot;headerlink&quot; title=&quot;Save Your Activity State&quot;&gt;&lt;/a&gt;Save Your Activity State&lt;/h2&gt;&lt;p&gt;在onSaveInstanceState()中用a collection of key-value pairs来save state information.&lt;/p&gt;
&lt;p&gt;Caution: Always call the &lt;code&gt;superclass&lt;/code&gt; implementation of onSaveInstanceState() so the default implementation can save the state of the view hierarchy.  &lt;/p&gt;
&lt;h2 id=&quot;Restore-Your-Activity-State&quot;&gt;&lt;a href=&quot;#Restore-Your-Activity-State&quot; class=&quot;headerlink&quot; title=&quot;Restore Your Activity State&quot;&gt;&lt;/a&gt;Restore Your Activity State&lt;/h2&gt;&lt;p&gt;When your activity is recreated after it was previously destroyed, you can &lt;code&gt;recover&lt;/code&gt; your saved state from the &lt;code&gt;Bundle&lt;/code&gt; that the system passes your activity. Both the &lt;code&gt;onCreate()&lt;/code&gt; and &lt;code&gt;onRestoreInstanceState()&lt;/code&gt; callback methods receive the &lt;code&gt;same&lt;/code&gt; &lt;code&gt;Bundle&lt;/code&gt; that contains the &lt;code&gt;instance state&lt;/code&gt; information&lt;/p&gt;
&lt;p&gt;onRestoreInstanceState()&lt;/p&gt;
&lt;h1 id=&quot;Building-a-Dynamic-UI-with-Fragments&quot;&gt;&lt;a href=&quot;#Building-a-Dynamic-UI-with-Fragments&quot; class=&quot;headerlink&quot; title=&quot;Building a Dynamic UI with Fragments&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://developer.android.com/training/basics/fragments/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building a Dynamic UI with Fragments&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;To create a dynamic and multi-pane user interface on Android, you need to encapsulate(封装) UI components and activity behaviors into modules that you can swap into and out of your activities. You can create these modules with the &lt;code&gt;Fragment class&lt;/code&gt;, which behaves somewhat like a nested activity that can define its own layout and manage its own lifecycle.&lt;/p&gt;
&lt;h2 id=&quot;Creating-a-Fragment&quot;&gt;&lt;a href=&quot;#Creating-a-Fragment&quot; class=&quot;headerlink&quot; title=&quot;Creating a Fragment&quot;&gt;&lt;/a&gt;Creating a Fragment&lt;/h2&gt;&lt;p&gt;You can think of a fragment as a &lt;code&gt;modular section of an activity&lt;/code&gt;, which has its own lifecycle, receives its own input events, and which you can add or remove while the activity is running (sort of like a &lt;code&gt;&amp;quot;sub activity&amp;quot;&lt;/code&gt; that you can reuse in different activities)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;set up your Android project to use the Support Library&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开setting中的SDK界面&lt;/p&gt;
&lt;p&gt;launch standalone SDK manager&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Extras folder&lt;/p&gt;
&lt;p&gt;Android Support Library(repository?)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Create-a-Fragment-Class&quot;&gt;&lt;a href=&quot;#Create-a-Fragment-Class&quot; class=&quot;headerlink&quot; title=&quot;Create a Fragment Class&quot;&gt;&lt;/a&gt;Create a Fragment Class&lt;/h3&gt;&lt;p&gt;(1)导入一些package&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import android.os.Bundle&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import android.support.v4.app.Fragment&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(2)extend the Fragment class&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public class ArticleFragment extend Fragment{&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(3)与Create a Activity class不同的是,Create a Fragment Class时,需要use the &lt;code&gt;onCreateView()&lt;/code&gt; callback to define the layout.In fact, this is the &lt;code&gt;only callback&lt;/code&gt; you need in order to get a fragment running.&lt;/p&gt;
&lt;p&gt;(4)Just like an activity, a fragment should implement other lifecycle callbacks that allow you to manage its state as it is added or removed from the activity and as the activity transitions between its lifecycle states.&lt;/p&gt;
&lt;h3 id=&quot;Add-a-Fragment-to-an-Activity-using-XML&quot;&gt;&lt;a href=&quot;#Add-a-Fragment-to-an-Activity-using-XML&quot; class=&quot;headerlink&quot; title=&quot;Add a Fragment to an Activity using XML&quot;&gt;&lt;/a&gt;Add a Fragment to an Activity using XML&lt;/h3&gt;&lt;p&gt;While fragments are reusable, modular UI components, each instance of a Fragment class must be associated with a parent &lt;code&gt;FragmentActivity&lt;/code&gt;. You can achieve this association by defining each fragment within your &lt;code&gt;activity layout XML file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FragmentActivity&lt;/code&gt; is a &lt;code&gt;special activity&lt;/code&gt; provided in the &lt;code&gt;Support Library&lt;/code&gt; to handle fragments on system versions &lt;code&gt;older&lt;/code&gt; than API level 11. If the lowest system version you support is API level 11 or higher, then you can use a &lt;code&gt;regular Activity&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;相关设置见官方教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Then apply the layout to your activity&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public class MainActivity extends FragmentActivity {&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;//此处引用&lt;/p&gt;
&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Building-a-Flexible-UI&quot;&gt;&lt;a href=&quot;#Building-a-Flexible-UI&quot; class=&quot;headerlink&quot; title=&quot;Building a Flexible UI&quot;&gt;&lt;/a&gt;Building a Flexible UI&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;FragmentManager&lt;/code&gt; class provides &lt;code&gt;methods&lt;/code&gt; that allow you to add, remove, and replace &lt;code&gt;fragments&lt;/code&gt; to an &lt;code&gt;activity&lt;/code&gt; at runtime in order to create a &lt;code&gt;dynamic&lt;/code&gt; experience.&lt;/p&gt;
&lt;h3 id=&quot;Add-a-Fragment-to-an-Activity-at-Runtime&quot;&gt;&lt;a href=&quot;#Add-a-Fragment-to-an-Activity-at-Runtime&quot; class=&quot;headerlink&quot; title=&quot;Add a Fragment to an Activity at Runtime&quot;&gt;&lt;/a&gt;Add a Fragment to an Activity at Runtime&lt;/h3&gt;&lt;p&gt;2种方式:&lt;/p&gt;
&lt;p&gt;Rather than defining the fragments for an activity in the &lt;code&gt;layout file&lt;/code&gt;—as shown in the previous lesson with the &lt;code&gt;fragment element&lt;/code&gt;—you can add a fragment to the activity during the activity runtime. This is necessary if you plan to change fragments during the life of the activity.&lt;/p&gt;
&lt;p&gt;(1)上一节中是在&lt;code&gt;res/layout-large/news_articles.xml&lt;/code&gt;中设置,本节是在&lt;code&gt;res/layout/news_articles.xml&lt;/code&gt;,可以看到二者文件名一样。只是所在的layout directory没有&lt;code&gt;large&lt;/code&gt;前缀。&lt;/p&gt;
&lt;p&gt;(2)Inside your &lt;code&gt;activity&lt;/code&gt;, call &lt;code&gt;getSupportFragmentManager()&lt;/code&gt; to get a FragmentManager using the &lt;code&gt;Support Library APIs&lt;/code&gt;. Then call &lt;code&gt;beginTransaction()&lt;/code&gt; to &lt;code&gt;create a FragmentTransaction&lt;/code&gt; and call &lt;code&gt;add()&lt;/code&gt; to &lt;code&gt;add a fragment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can perform &lt;code&gt;multiple&lt;/code&gt; fragment transaction for the activity using the same &lt;code&gt;FragmentTransaction&lt;/code&gt;. When you’re ready to make the changes, you must call &lt;code&gt;commit()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;p&gt;import android.os.Bundle;&lt;br&gt;import android.support.v4.app.FragmentActivity;&lt;/p&gt;
&lt;p&gt;public class MainActivity extends FragmentActivity{&lt;/p&gt;
&lt;p&gt;  @Override  //表示重写,编译器可以给你验证@Override下面的方法名是否是你父类中所有的,如果没有则报错&lt;/p&gt;
&lt;p&gt;  public void onCreate(Bundle savedInstanceState){&lt;br&gt;      super.onCreate(savedInstanceState);&lt;br&gt;      setContentView(R.layout.news_articles);&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (findViewById(R.id.fragment_container) != null) {
  if (savedInstanceState != null) {
          return;
      }
  HeadlinesFragment firstFragment = new HeadlinesFragment();

  firstFragment.setArguments(getIntent().getExtras());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;// Add the fragment to the ‘fragment_container’ FrameLayout&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;getSupportFragmentManager().beginTransaction().add(R.id.fragment_container,firstFragment).commit();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;Replace-One-Fragment-with-Another&quot;&gt;&lt;a href=&quot;#Replace-One-Fragment-with-Another&quot; class=&quot;headerlink&quot; title=&quot;Replace One Fragment with Another&quot;&gt;&lt;/a&gt;Replace One Fragment with Another&lt;/h3&gt;&lt;p&gt;The procedure to replace a fragment is similar to adding one, but requires the &lt;code&gt;replace()&lt;/code&gt; method instead of &lt;code&gt;add()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To allow the user to navigate backward through the fragment transactions, you must call &lt;code&gt;addToBackStack()&lt;/code&gt; before you &lt;code&gt;commit&lt;/code&gt; the FragmentTransaction.&lt;/p&gt;
&lt;h2 id=&quot;Communicating-with-Other-Fragments&quot;&gt;&lt;a href=&quot;#Communicating-with-Other-Fragments&quot; class=&quot;headerlink&quot; title=&quot;Communicating with Other Fragments&quot;&gt;&lt;/a&gt;Communicating with Other Fragments&lt;/h2&gt;&lt;p&gt;Often you will want one Fragment to communicate with another, for example to change the content based on a user event. All Fragment-to-Fragment communication is done through the &lt;code&gt;associated Activity&lt;/code&gt;. Two Fragments should &lt;code&gt;never communicate directly&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Define-an-Interface&quot;&gt;&lt;a href=&quot;#Define-an-Interface&quot; class=&quot;headerlink&quot; title=&quot;Define an Interface&quot;&gt;&lt;/a&gt;Define an Interface&lt;/h3&gt;&lt;p&gt;To allow a Fragment to communicate up to its Activity, you can &lt;code&gt;define&lt;/code&gt; an interface in the &lt;code&gt;Fragment class&lt;/code&gt; and &lt;code&gt;implement&lt;/code&gt; it within the &lt;code&gt;Activity&lt;/code&gt;. The Fragment captures the interface implementation during its &lt;code&gt;onAttach()&lt;/code&gt; lifecycle method and can then call the Interface methods in order to communicate with the Activity.&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Fragment class&lt;/code&gt;内定义interface:&lt;/p&gt;
&lt;p&gt;public class HeadlinesFragment extends ListFragment {&lt;/p&gt;
&lt;p&gt;public interface OnHeadlineSelectedListener{&lt;br&gt;  public void onArticleSelected(int position);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;@Override&lt;/p&gt;
&lt;p&gt;public void onAttach(Activity activity) {&lt;br&gt;        super.onAttach(activity);&lt;br&gt;      //  …&lt;br&gt;      }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;Now the fragment can deliver messages to the activity by calling the onArticleSelected() method (or other methods in the interface) using the mCallback instance of the OnHeadlineSelectedListener interface.&lt;/p&gt;
&lt;h3 id=&quot;Implement-the-Interface&quot;&gt;&lt;a href=&quot;#Implement-the-Interface&quot; class=&quot;headerlink&quot; title=&quot;Implement the Interface&quot;&gt;&lt;/a&gt;Implement the Interface&lt;/h3&gt;&lt;p&gt;在activity class中实现。&lt;/p&gt;
&lt;p&gt;In order to receive event callbacks from the fragment, the activity that hosts it must implement the interface defined in the fragment class.&lt;/p&gt;
&lt;p&gt;public static class MainActivity extends Activity implements HeadlinesFragment.OnHeadlineSelectedListener{&lt;/p&gt;
&lt;p&gt;public void onArticleSelected(int position) {&lt;/p&gt;
&lt;p&gt;}&lt;br&gt;}&lt;/p&gt;
&lt;h3 id=&quot;Deliver-a-Message-to-a-Fragment&quot;&gt;&lt;a href=&quot;#Deliver-a-Message-to-a-Fragment&quot; class=&quot;headerlink&quot; title=&quot;Deliver a Message to a Fragment&quot;&gt;&lt;/a&gt;Deliver a Message to a Fragment&lt;/h3&gt;&lt;p&gt;在activity class中实现。&lt;/p&gt;
&lt;p&gt;The host activity can deliver messages to a fragment by capturing the Fragment instance with findFragmentById(), then directly call the fragment’s public methods.&lt;/p&gt;
&lt;h1 id=&quot;Saving-Data&quot;&gt;&lt;a href=&quot;#Saving-Data&quot; class=&quot;headerlink&quot; title=&quot;Saving Data&quot;&gt;&lt;/a&gt;Saving Data&lt;/h1&gt;&lt;h2 id=&quot;Saving-Key-Value-Sets&quot;&gt;&lt;a href=&quot;#Saving-Key-Value-Sets&quot; class=&quot;headerlink&quot; title=&quot;Saving Key-Value Sets&quot;&gt;&lt;/a&gt;Saving Key-Value Sets&lt;/h2&gt;&lt;p&gt;If you have a relatively small collection of &lt;code&gt;key-values&lt;/code&gt; that you’d like to save, you should use the &lt;code&gt;SharedPreferences&lt;/code&gt; APIs. The &lt;code&gt;SharedPreferences&lt;/code&gt; APIs are only for reading and writing &lt;code&gt;key-value pairs&lt;/code&gt; and you should not confuse them with the &lt;code&gt;Preference&lt;/code&gt; APIs, which help you build a &lt;code&gt;user interface&lt;/code&gt; for your app settings.&lt;/p&gt;
&lt;h3 id=&quot;Get-a-Handle-to-a-SharedPreferences&quot;&gt;&lt;a href=&quot;#Get-a-Handle-to-a-SharedPreferences&quot; class=&quot;headerlink&quot; title=&quot;Get a Handle to a SharedPreferences&quot;&gt;&lt;/a&gt;Get a Handle to a SharedPreferences&lt;/h3&gt;&lt;p&gt;You can create a new shared preference file or access an existing one by calling one of two methods:&lt;code&gt;getSharedPreferences()&lt;/code&gt;,&lt;code&gt;getPreferences()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;if you need just one shared preference file for your activity, you can use the &lt;code&gt;getPreferences()&lt;/code&gt; method&lt;/p&gt;
&lt;p&gt;Caution: If you create a shared preferences file with &lt;code&gt;MODE_WORLD_READABLE&lt;/code&gt; or &lt;code&gt;MODE_WORLD_WRITEABLE&lt;/code&gt;, then &lt;code&gt;any other apps&lt;/code&gt; that know the file identifier can access your data.&lt;/p&gt;
&lt;h3 id=&quot;Write-to-Shared-Preferences&quot;&gt;&lt;a href=&quot;#Write-to-Shared-Preferences&quot; class=&quot;headerlink&quot; title=&quot;Write to Shared Preferences&quot;&gt;&lt;/a&gt;Write to Shared Preferences&lt;/h3&gt;&lt;p&gt;&lt;code&gt;edit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putInt()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putString()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;commit()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Read-from-Shared-Preferences&quot;&gt;&lt;a href=&quot;#Read-from-Shared-Preferences&quot; class=&quot;headerlink&quot; title=&quot;Read from Shared Preferences&quot;&gt;&lt;/a&gt;Read from Shared Preferences&lt;/h3&gt;&lt;p&gt;&lt;code&gt;getInt()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getString()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Saving-Files&quot;&gt;&lt;a href=&quot;#Saving-Files&quot; class=&quot;headerlink&quot; title=&quot;Saving Files&quot;&gt;&lt;/a&gt;Saving Files&lt;/h2&gt;&lt;p&gt;&lt;code&gt;File&lt;/code&gt; APIs&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;File object&lt;/code&gt; is suited to reading or writing &lt;code&gt;large&lt;/code&gt;amounts of data in start-to-finish order without skipping around. For example, it’s good for &lt;code&gt;image&lt;/code&gt; files or anything exchanged over a network.&lt;/p&gt;
&lt;h3 id=&quot;Choose-Internal-or-External-Storage&quot;&gt;&lt;a href=&quot;#Choose-Internal-or-External-Storage&quot; class=&quot;headerlink&quot; title=&quot;Choose Internal or External Storage&quot;&gt;&lt;/a&gt;Choose Internal or External Storage&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;相关比较见官方教程&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Obtain-Permissions-for-External-Storage&quot;&gt;&lt;a href=&quot;#Obtain-Permissions-for-External-Storage&quot; class=&quot;headerlink&quot; title=&quot;Obtain Permissions for External Storage&quot;&gt;&lt;/a&gt;Obtain Permissions for External Storage&lt;/h3&gt;&lt;p&gt;To write to the &lt;code&gt;external&lt;/code&gt; storage, you must request the &lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; permission in your &lt;code&gt;manifest file&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Save-a-File-on-Internal-Storage&quot;&gt;&lt;a href=&quot;#Save-a-File-on-Internal-Storage&quot; class=&quot;headerlink&quot; title=&quot;Save a File on Internal Storage&quot;&gt;&lt;/a&gt;Save a File on Internal Storage&lt;/h3&gt;&lt;p&gt;When saving a file to internal storage, you can acquire the appropriate directory as a &lt;code&gt;File&lt;/code&gt; by calling one of two methods:&lt;code&gt;getFilesDir()&lt;/code&gt;,&lt;code&gt;getCacheDir()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;File()&lt;/code&gt;:create a new file in one of these directories&lt;/p&gt;
&lt;p&gt;&lt;code&gt;openFileOutput()&lt;/code&gt;:get a &lt;code&gt;FileOutputStream&lt;/code&gt; that writes to a file in your internal directory&lt;/p&gt;
&lt;p&gt;&lt;code&gt;createTempFile()&lt;/code&gt;:cache some files&lt;/p&gt;
&lt;p&gt;Your app’s &lt;code&gt;internal&lt;/code&gt; storage directory is specified by your &lt;code&gt;app&amp;#39;s package name&lt;/code&gt; in a special location of the Android file system.&lt;/p&gt;
&lt;p&gt;as long as you use &lt;code&gt;MODE_PRIVATE&lt;/code&gt; for your files on the internal storage, they are &lt;code&gt;never accessible&lt;/code&gt; to other apps.&lt;/p&gt;
&lt;h3 id=&quot;Save-a-File-on-External-Storage&quot;&gt;&lt;a href=&quot;#Save-a-File-on-External-Storage&quot; class=&quot;headerlink&quot; title=&quot;Save a File on External Storage&quot;&gt;&lt;/a&gt;Save a File on External Storage&lt;/h3&gt;&lt;p&gt;Because the &lt;code&gt;external&lt;/code&gt; storage may be &lt;code&gt;unavailable&lt;/code&gt;—such as when the user has mounted the storage to a PC or has removed the SD card that provides the external storage—you should always &lt;code&gt;verify&lt;/code&gt; that the volume is &lt;code&gt;available&lt;/code&gt; before &lt;code&gt;accessing&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;You can query the external storage state by calling &lt;code&gt;getExternalStorageState()&lt;/code&gt;. If the returned state is equal to &lt;code&gt;MEDIA_MOUNTED&lt;/code&gt;, then you can read and write your files.&lt;/p&gt;
&lt;p&gt;Although the external storage is &lt;code&gt;modifiable&lt;/code&gt; by the user and other apps, there are two categories of files you might save here:&lt;code&gt;Public files&lt;/code&gt;,&lt;code&gt;Private files&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you want to save &lt;code&gt;public files&lt;/code&gt; on the external storage, use the &lt;code&gt;getExternalStoragePublicDirectory()&lt;/code&gt; method to get a File representing the appropriate directory on the external storage.&lt;/p&gt;
&lt;p&gt;If you want to save files that are &lt;code&gt;private&lt;/code&gt; to your app, you can acquire the appropriate directory by calling &lt;code&gt;getExternalFilesDir()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If none of the &lt;code&gt;pre-defined sub-directory names&lt;/code&gt; suit your &lt;code&gt;files&lt;/code&gt;, you can instead call &lt;code&gt;getExternalFilesDir()&lt;/code&gt; and pass &lt;code&gt;null&lt;/code&gt;. This returns the &lt;code&gt;root directory&lt;/code&gt; for your app’s &lt;code&gt;private directory&lt;/code&gt; on the &lt;code&gt;external storage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getExternalStoragePublicDirectory()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Query-Free-Space&quot;&gt;&lt;a href=&quot;#Query-Free-Space&quot; class=&quot;headerlink&quot; title=&quot;Query Free Space&quot;&gt;&lt;/a&gt;Query Free Space&lt;/h3&gt;&lt;p&gt;If you know ahead of time how much data you’re saving, you can find out whether sufficient space is available without causing an &lt;code&gt;IOException&lt;/code&gt; by calling &lt;code&gt;getFreeSpace()&lt;/code&gt; or &lt;code&gt;getTotalSpace()&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Delete-a-File&quot;&gt;&lt;a href=&quot;#Delete-a-File&quot; class=&quot;headerlink&quot; title=&quot;Delete a File&quot;&gt;&lt;/a&gt;Delete a File&lt;/h3&gt;&lt;p&gt;最直接的方式就是在file自身上调用&lt;code&gt;delete()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the file is saved on &lt;code&gt;internal&lt;/code&gt; storage, you can also ask the &lt;code&gt;Context&lt;/code&gt; to locate and delete a file by calling &lt;code&gt;deleteFile()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Saving-Data-in-SQL-Databases&quot;&gt;&lt;a href=&quot;#Saving-Data-in-SQL-Databases&quot; class=&quot;headerlink&quot; title=&quot;Saving Data in SQL Databases&quot;&gt;&lt;/a&gt;Saving Data in SQL Databases&lt;/h2&gt;&lt;p&gt;Saving data to a &lt;code&gt;database&lt;/code&gt; is ideal for &lt;code&gt;repeating or structured&lt;/code&gt; data, such as &lt;code&gt;contact information&lt;/code&gt;. The APIs you’ll need to use a database on Android are available in the &lt;code&gt;android.database.sqlite&lt;/code&gt; package.&lt;/p&gt;
&lt;h3 id=&quot;Define-a-Schema-and-Contract&quot;&gt;&lt;a href=&quot;#Define-a-Schema-and-Contract&quot; class=&quot;headerlink&quot; title=&quot;Define a Schema and Contract&quot;&gt;&lt;/a&gt;Define a Schema and Contract&lt;/h3&gt;&lt;p&gt;One of the &lt;code&gt;main principles&lt;/code&gt; of SQL databases is the &lt;code&gt;schema&lt;/code&gt;: a formal declaration of how the database is organized. The schema is reflected in the SQL statements that you use to create your database.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;contract class&lt;/code&gt; is a container for constants that define &lt;code&gt;names&lt;/code&gt; for URIs, tables, and columns.&lt;/p&gt;
&lt;p&gt;A good way to &lt;code&gt;organize a contract class&lt;/code&gt; is to put definitions that are &lt;code&gt;global&lt;/code&gt; to your &lt;code&gt;whole database&lt;/code&gt; in the &lt;code&gt;root level of the class&lt;/code&gt;. Then create an &lt;code&gt;inner class&lt;/code&gt; for each &lt;code&gt;table&lt;/code&gt; that enumerates its columns.&lt;/p&gt;
&lt;h3 id=&quot;Create-a-Database-Using-a-SQL-Helper&quot;&gt;&lt;a href=&quot;#Create-a-Database-Using-a-SQL-Helper&quot; class=&quot;headerlink&quot; title=&quot;Create a Database Using a SQL Helper&quot;&gt;&lt;/a&gt;Create a Database Using a SQL Helper&lt;/h3&gt;&lt;p&gt;Once you have &lt;code&gt;defined&lt;/code&gt; how your database looks, you should &lt;code&gt;implement methods&lt;/code&gt; that create and maintain the &lt;code&gt;database and tables&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A useful set of APIs is available in the &lt;code&gt;SQLiteOpenHelper&lt;/code&gt; class&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getWritableDatabase()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getReadableDatabase()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Put-Information-into-a-Database&quot;&gt;&lt;a href=&quot;#Put-Information-into-a-Database&quot; class=&quot;headerlink&quot; title=&quot;Put Information into a Database&quot;&gt;&lt;/a&gt;Put Information into a Database&lt;/h3&gt;&lt;p&gt;Insert data into the database by passing a &lt;code&gt;ContentValues&lt;/code&gt; object to the &lt;code&gt;insert()&lt;/code&gt; method:&lt;/p&gt;
&lt;h3 id=&quot;Read-Information-from-a-Database&quot;&gt;&lt;a href=&quot;#Read-Information-from-a-Database&quot; class=&quot;headerlink&quot; title=&quot;Read Information from a Database&quot;&gt;&lt;/a&gt;Read Information from a Database&lt;/h3&gt;&lt;p&gt;&lt;code&gt;query()&lt;/code&gt;.The method combines elements of &lt;code&gt;insert()&lt;/code&gt; and &lt;code&gt;update()&lt;/code&gt;.The results of the query are returned to you in a &lt;code&gt;Cursor&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;To look at a row in the cursor, use one of the &lt;code&gt;Cursor move methods&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;&lt;code&gt;moveToFirst()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For each &lt;code&gt;row&lt;/code&gt;, you can read a column’s value by calling one of the Cursor get methods, such as &lt;code&gt;getString()&lt;/code&gt; or &lt;code&gt;getLong()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For each of the &lt;code&gt;get methods&lt;/code&gt;, you must pass the index position of the column you desire, which you can get by calling &lt;code&gt;getColumnIndex()&lt;/code&gt; or &lt;code&gt;getColumnIndexOrThrow()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Delete-Information-from-a-Database&quot;&gt;&lt;a href=&quot;#Delete-Information-from-a-Database&quot; class=&quot;headerlink&quot; title=&quot;Delete Information from a Database&quot;&gt;&lt;/a&gt;Delete Information from a Database&lt;/h3&gt;&lt;p&gt;&lt;code&gt;delete()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Update-a-Database&quot;&gt;&lt;a href=&quot;#Update-a-Database&quot; class=&quot;headerlink&quot; title=&quot;Update a Database&quot;&gt;&lt;/a&gt;Update a Database&lt;/h3&gt;&lt;p&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Updating the table &lt;code&gt;combines&lt;/code&gt; the content values syntax of &lt;code&gt;insert()&lt;/code&gt; with the where syntax of &lt;code&gt;delete()&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Interacting-with-Other-Apps&quot;&gt;&lt;a href=&quot;#Interacting-with-Other-Apps&quot; class=&quot;headerlink&quot; title=&quot;Interacting with Other Apps&quot;&gt;&lt;/a&gt;Interacting with Other Apps&lt;/h1&gt;&lt;p&gt;An Android app typically has &lt;code&gt;several activities&lt;/code&gt;. &lt;code&gt;Each activity&lt;/code&gt; displays &lt;code&gt;a user interface&lt;/code&gt; that allows the user to perform a specific task (such as view a map or take a photo). To take the user from one activity to another, your app must use an &lt;code&gt;Intent&lt;/code&gt; to define your app’s “intent” to do something.&lt;/p&gt;
&lt;h2 id=&quot;Sending-the-User-to-Another-App&quot;&gt;&lt;a href=&quot;#Sending-the-User-to-Another-App&quot; class=&quot;headerlink&quot; title=&quot;Sending the User to Another App&quot;&gt;&lt;/a&gt;Sending the User to Another App&lt;/h2&gt;&lt;p&gt;One of Android’s &lt;code&gt;most important features&lt;/code&gt; is an app’s &lt;code&gt;ability to send the user to another app&lt;/code&gt; based on an “action” it would like to perform. For example, if your app has the address of a business that you’d like to show on a map, you &lt;code&gt;don&amp;#39;t have to build an activity in your app that shows a map&lt;/code&gt;. Instead, you can &lt;code&gt;create a request to view the address using an Intent&lt;/code&gt;. The Android system then starts an &lt;code&gt;app&lt;/code&gt; that’s able to show the address on a map.&lt;/p&gt;
&lt;p&gt;when you want to have a separate app perform an action, such as “view a map,” you must use an &lt;code&gt;implicit intent&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Build-an-Implicit-Intent&quot;&gt;&lt;a href=&quot;#Build-an-Implicit-Intent&quot; class=&quot;headerlink&quot; title=&quot;Build an Implicit Intent&quot;&gt;&lt;/a&gt;Build an Implicit Intent&lt;/h3&gt;&lt;p&gt;Implicit intents do &lt;code&gt;not&lt;/code&gt; declare the &lt;code&gt;class name&lt;/code&gt; of the component to start, but instead declare an &lt;code&gt;action&lt;/code&gt; to perform. The action specifies the thing you want to do, such as view, edit, send, or get something.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intent()&lt;/code&gt; constructor&lt;/p&gt;
&lt;p&gt;some kinds of implicit intents require &lt;code&gt;&amp;quot;extra&amp;quot;&lt;/code&gt; data that provide different data types, such as a &lt;code&gt;string&lt;/code&gt;. You can add one or more pieces of extra data using the various &lt;code&gt;putExtra()&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;It’s important that you define your &lt;code&gt;Intent&lt;/code&gt; to be as &lt;code&gt;specific&lt;/code&gt; as possible.&lt;/p&gt;
&lt;h3 id=&quot;Verify-There-is-an-App-to-Receive-the-Intent&quot;&gt;&lt;a href=&quot;#Verify-There-is-an-App-to-Receive-the-Intent&quot; class=&quot;headerlink&quot; title=&quot;Verify There is an App to Receive the Intent&quot;&gt;&lt;/a&gt;Verify There is an App to Receive the Intent&lt;/h3&gt;&lt;p&gt;上面讲到了如何定义Intent,下面来说接收Intent的事情&lt;/p&gt;
&lt;p&gt;&lt;code&gt;queryIntentActivities()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Start-an-Activity-with-the-Intent&quot;&gt;&lt;a href=&quot;#Start-an-Activity-with-the-Intent&quot; class=&quot;headerlink&quot; title=&quot;Start an Activity with the Intent&quot;&gt;&lt;/a&gt;Start an Activity with the Intent&lt;/h3&gt;&lt;p&gt;Once you have &lt;code&gt;created&lt;/code&gt; your Intent and set the &lt;code&gt;extra&lt;/code&gt; info, call &lt;code&gt;startActivity()&lt;/code&gt; to send it to the system. If the system identifies more than one activity that can handle the intent, it displays a dialog for the user to select which app to use, as shown in figure. If there is only &lt;code&gt;one&lt;/code&gt; activity that handles the intent, the system immediately &lt;code&gt;starts&lt;/code&gt; it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android38intents-choice.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;startActivity(intent);&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Show-an-App-Chooser&quot;&gt;&lt;a href=&quot;#Show-an-App-Chooser&quot; class=&quot;headerlink&quot; title=&quot;Show an App Chooser&quot;&gt;&lt;/a&gt;Show an App Chooser&lt;/h3&gt;&lt;p&gt;To show the chooser, create an Intent using &lt;code&gt;createChooser()&lt;/code&gt; and pass it to &lt;code&gt;startActivity()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Getting-a-Result-from-an-Activity&quot;&gt;&lt;a href=&quot;#Getting-a-Result-from-an-Activity&quot; class=&quot;headerlink&quot; title=&quot;Getting a Result from an Activity&quot;&gt;&lt;/a&gt;Getting a Result from an Activity&lt;/h3&gt;&lt;p&gt;&lt;code&gt;startActivityForResult()&lt;/code&gt; (instead of &lt;code&gt;startActivity()&lt;/code&gt;)&lt;/p&gt;
&lt;h3 id=&quot;Start-the-Activity&quot;&gt;&lt;a href=&quot;#Start-the-Activity&quot; class=&quot;headerlink&quot; title=&quot;Start the Activity&quot;&gt;&lt;/a&gt;Start the Activity&lt;/h3&gt;&lt;p&gt;&lt;code&gt;startActivityForResult()&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Receive-the-Result&quot;&gt;&lt;a href=&quot;#Receive-the-Result&quot; class=&quot;headerlink&quot; title=&quot;Receive the Result&quot;&gt;&lt;/a&gt;Receive the Result&lt;/h3&gt;&lt;p&gt;&lt;code&gt;onActivityResult()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3*个参数见官方教程&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Allowing-Other-Apps-to-Start-Your-Activity&quot;&gt;&lt;a href=&quot;#Allowing-Other-Apps-to-Start-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Allowing Other Apps to Start Your Activity&quot;&gt;&lt;/a&gt;Allowing Other Apps to Start Your Activity&lt;/h2&gt;&lt;p&gt;To allow other apps to start your activity, you need to add an &lt;code&gt;intent-filter element&lt;/code&gt; in your manifest file for the corresponding &lt;code&gt;activity element&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Add-an-Intent-Filter&quot;&gt;&lt;a href=&quot;#Add-an-Intent-Filter&quot; class=&quot;headerlink&quot; title=&quot;Add an Intent Filter&quot;&gt;&lt;/a&gt;Add an Intent Filter&lt;/h3&gt;&lt;p&gt;几种intent filter:&lt;code&gt;Action&lt;/code&gt;,&lt;code&gt;Data&lt;/code&gt;,&lt;code&gt;Category&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;both the &lt;code&gt;ACTION_SEND&lt;/code&gt; and &lt;code&gt;ACTION_SENDTO&lt;/code&gt; intents.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Note&lt;/code&gt;: In order to receive implicit intents, you must include the &lt;code&gt;CATEGORY_DEFAULT&lt;/code&gt; category in the intent filter. The methods &lt;code&gt;startActivity()&lt;/code&gt; and &lt;code&gt;startActivityForResult()&lt;/code&gt; treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare it in your intent filter, no implicit intents will resolve to your activity.&lt;/p&gt;
&lt;h3 id=&quot;Handle-the-Intent-in-Your-Activity&quot;&gt;&lt;a href=&quot;#Handle-the-Intent-in-Your-Activity&quot; class=&quot;headerlink&quot; title=&quot;Handle the Intent in Your Activity&quot;&gt;&lt;/a&gt;Handle the Intent in Your Activity&lt;/h3&gt;&lt;p&gt;As your activity starts, call &lt;code&gt;getIntent()&lt;/code&gt; to retrieve the Intent that started the activity.&lt;/p&gt;
&lt;h3 id=&quot;Return-a-Result&quot;&gt;&lt;a href=&quot;#Return-a-Result&quot; class=&quot;headerlink&quot; title=&quot;Return a Result&quot;&gt;&lt;/a&gt;Return a Result&lt;/h3&gt;&lt;p&gt;&lt;code&gt;setResult()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;finish()&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-SDK的组成&quot;&gt;&lt;a href=&quot;#API-SDK的组成&quot; class=&quot;headerlink&quot; title=&quot;API,SDK的组成&quot;&gt;&lt;/a&gt;API,SDK的组成&lt;/h2&gt;&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h2&gt;&lt;h2 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/78576/android-tutorial-for-beginners-part-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich android教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mynameishuangshuai/article/details/51332790&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最全面的AndroidStudio配置指南总结-包括护眼模式&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;To-do-list&quot;&gt;&lt;a href=&quot;#To-do-list&quot; class=&quot;headerlink&quot; title=&quot;To do list&quot;&gt;&lt;/a&gt;To do list&lt;/h2&gt;&lt;h3 id=&quot;等在博客中会显示为其他字符。可能受markdown语法的影响。&quot;&gt;&lt;a href=&quot;#等在博客中会显示为其他字符。可能受markdown语法的影响。&quot; class=&quot;headerlink&quot; title=&quot;等在博客中会显示为其他字符。可能受markdown语法的影响。&quot;&gt;&lt;/a&gt;&lt;relativelayout&gt;等在博客中会显示为其他字符。可能受markdown语法的影响。&lt;/relativelayout&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;继续&lt;a href=&quot;https://developer.android.com/training/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AndroidDeveloperTraining&lt;/a&gt;的练习&lt;/p&gt;
&lt;h1 id=&quot;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AndroidDeveloperTraining1</title>
    <link href="http://yoursite.com/2016/05/04/AndroidDeveloperTraining1/"/>
    <id>http://yoursite.com/2016/05/04/AndroidDeveloperTraining1/</id>
    <published>2016-05-04T11:01:30.000Z</published>
    <updated>2016-05-15T08:55:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Android-Studio&quot;&gt;&lt;a href=&quot;#Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Android Studio&quot;&gt;&lt;/a&gt;Android Studio&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android122.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;与eclipse和intelligent idea相比。Android Studio的ADT及Android SDK的安装要方便些。&lt;/p&gt;
&lt;h2 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android123.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;选择你需要安装的SDK版本:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android124.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;开发&quot;&gt;&lt;/a&gt;开发&lt;/h2&gt;&lt;h2 id=&quot;Building-Your-First-App&quot;&gt;&lt;a href=&quot;#Building-Your-First-App&quot; class=&quot;headerlink&quot; title=&quot;Building Your First App&quot;&gt;&lt;/a&gt;Building Your First App&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://developer.android.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;android开发者&lt;/a&gt;上面有一些入门教程。&lt;/p&gt;
&lt;p&gt;教程内容如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/AndroidAndroidDeveloperTraining.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;大部分步骤见教程,下面只是一些截图:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android126.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android127.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android128.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android129.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android130.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构:&quot;&gt;&lt;/a&gt;文件结构:&lt;/h3&gt;&lt;p&gt;有几个比较重要的:&lt;/p&gt;
&lt;p&gt;(1)app/src/main&lt;/p&gt;
&lt;p&gt;(2)app/src/main/res  包含工程的一些资源。&lt;/p&gt;
&lt;p&gt;(3)app/build.gradle&lt;/p&gt;
&lt;p&gt;Android Studio uses Gradle to compile and build your app&lt;/p&gt;
&lt;h3 id=&quot;运行程序&quot;&gt;&lt;a href=&quot;#运行程序&quot; class=&quot;headerlink&quot; title=&quot;运行程序&quot;&gt;&lt;/a&gt;运行程序&lt;/h3&gt;&lt;h4 id=&quot;真机调试&quot;&gt;&lt;a href=&quot;#真机调试&quot; class=&quot;headerlink&quot; title=&quot;真机调试&quot;&gt;&lt;/a&gt;真机调试&lt;/h4&gt;&lt;p&gt;在手机——设置——开发者选项——勾选USB调试&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Error:the selected device is incompatible&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始的时候还以为是API level设置错了。state上显示的是unauthored。猜想估计是手机和电脑没有相互识别。&lt;/p&gt;
&lt;p&gt;后来的解决办法:&lt;/p&gt;
&lt;p&gt;在手机——设置——开发者选项——去勾选USB调试,然后再勾选。这时候会弹出一个是否允许的选项。勾选就可以了。所以还是没有识别的原因。&lt;/p&gt;
&lt;p&gt;然后state就变成online了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android131.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击RUN,这是在你手机上会弹出应用程序许可。点击”确认”。就可以了。然后就会弹出helloworld,证明OK了。&lt;/p&gt;
&lt;h4 id=&quot;虚拟机调试&quot;&gt;&lt;a href=&quot;#虚拟机调试&quot; class=&quot;headerlink&quot; title=&quot;虚拟机调试&quot;&gt;&lt;/a&gt;虚拟机调试&lt;/h4&gt;&lt;p&gt;在运行设置里面是可以选的。也需要下载相应的SDK。然后再让你选择,配置设备。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;virtual device failed to load android studio mac&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重启android studio就行了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android132.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WIN10上先是出现Android studio启动的时候报错:找不到64 bit的java。这个原因是自己装的是32bit的。下载64 bit安装不上,原因是自己找错目录了(其实已经安装上了)。C盘是WIN10的,D盘是WIN8的,找错找到D盘去了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;BW:虚拟机比较慢&lt;/p&gt;
&lt;h2 id=&quot;Building-a-Simple-User-Interface&quot;&gt;&lt;a href=&quot;#Building-a-Simple-User-Interface&quot; class=&quot;headerlink&quot; title=&quot;Building a Simple User Interface&quot;&gt;&lt;/a&gt;Building a Simple User Interface&lt;/h2&gt;&lt;h3 id=&quot;create-a-layout-in-XML-that-includes-a-text-field-and-a-button&quot;&gt;&lt;a href=&quot;#create-a-layout-in-XML-that-includes-a-text-field-and-a-button&quot; class=&quot;headerlink&quot; title=&quot;create a layout in XML that includes a text field and a button&quot;&gt;&lt;/a&gt;create a layout in XML that includes a text field and a button&lt;/h3&gt;&lt;p&gt;Android应用的用户界面由View和ViewGroup对象组成。它们之间靠XML表来联系。&lt;/p&gt;
&lt;p&gt;Layouts are subclasses of the ViewGroup。&lt;/p&gt;
&lt;p&gt;Create a Linear Layout&lt;/p&gt;
&lt;p&gt;res/layout directory, open the content_my.xml file&lt;/p&gt;
&lt;p&gt;中间区域选择text面板:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;中间区域选择design面板:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Preview pane中点击elements会打开Design pane中的WYSIWYG tools。&lt;/p&gt;
&lt;p&gt;(1)Delete the &lt;textview&gt; element.  (可以咋component tree或者Preview pane中删除)&lt;/textview&gt;&lt;/p&gt;
&lt;p&gt;(2)Change the &lt;relativelayout&gt; element to &lt;linearlayout&gt;&lt;/linearlayout&gt;&lt;/relativelayout&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Press Next and select &lt;code&gt;LinearLayout&lt;/code&gt; as Root Element and give File Name&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(3)Add the android:orientation attribute and set it to “horizontal”&lt;/p&gt;
&lt;p&gt;(4)Remove the android:padding attributes and the tools:context attribute.&lt;/p&gt;
&lt;p&gt;可以点击text,直接在layout.xml中修改:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到.xml中就是一组 &lt;strong&gt;键值对&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;也可以点击design,在右侧的properties中修改(但这样要麻烦一些):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在.xml中直接替换成教程中的内容即可:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LinearLayout:a view group (a subclass of ViewGroup) &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性android:layout_width&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性android:layout_height&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但上面这样修改是错的,与教程不一致,上面是new一个LinearLayout,而教程上是Change the RelativeLayout element to LinearLayout&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接把&lt;code&gt;content_my.xml&lt;/code&gt;内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android10.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;改为:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android11.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Add-a-Text-Field&quot;&gt;&lt;a href=&quot;#Add-a-Text-Field&quot; class=&quot;headerlink&quot; title=&quot;Add a Text Field&quot;&gt;&lt;/a&gt;Add a Text Field&lt;/h3&gt;&lt;p&gt;(1)继续在content_my.xml file里。在&lt;linearlayout&gt;元素内定义一个&lt;edittext&gt;元素。并把它的&lt;code&gt;id&lt;/code&gt;属性&lt;code&gt;@+id/edit_message&lt;/code&gt;&lt;/edittext&gt;&lt;/linearlayout&gt;&lt;/p&gt;
&lt;p&gt;(2)再定义几个属性,最终content_my.xml file。&lt;edittext&gt;元素内容就变成了:&lt;/edittext&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错:cannot resolve symbol @string/edit_message,下面修改res/values/strings.xml就行了&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Add-String-Resources&quot;&gt;&lt;a href=&quot;#Add-String-Resources&quot; class=&quot;headerlink&quot; title=&quot;Add String Resources&quot;&gt;&lt;/a&gt;Add String Resources&lt;/h3&gt;&lt;p&gt;By default, your Android project includes a string resource file at res/values/strings.xml. Here, you’ll add a new string named “edit_message” and set the value to “Enter a message.”&lt;/p&gt;
&lt;p&gt;需要修改&lt;code&gt;res/values/strings.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android13.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;content_my.xml中最下面&lt;edittext&gt;处报错就消失了&lt;/edittext&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Add-a-Button&quot;&gt;&lt;a href=&quot;#Add-a-Button&quot; class=&quot;headerlink&quot; title=&quot;Add a Button&quot;&gt;&lt;/a&gt;Add a Button&lt;/h3&gt;&lt;p&gt;修改&lt;code&gt;content_my.xml&lt;/code&gt;内容,定义一个&lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt;元素,最终&lt;code&gt;&amp;lt;LinearLayout&amp;gt;&lt;/code&gt;变成了下面这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android14.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;button 元素不包含 android:id 属性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;design面板就变成了下面这样:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android15.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Make-the-Input-Box-Fill-in-the-Screen-Width&quot;&gt;&lt;a href=&quot;#Make-the-Input-Box-Fill-in-the-Screen-Width&quot; class=&quot;headerlink&quot; title=&quot;Make the Input Box Fill in the Screen Width&quot;&gt;&lt;/a&gt;Make the Input Box Fill in the Screen Width&lt;/h3&gt;&lt;p&gt;在右侧会做出相应的改变:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android16.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-Your-App&quot;&gt;&lt;a href=&quot;#Run-Your-App&quot; class=&quot;headerlink&quot; title=&quot;Run Your App&quot;&gt;&lt;/a&gt;Run Your App&lt;/h3&gt;&lt;p&gt;安装ant&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brew install ant&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(1) android studio上点击RUN&lt;/p&gt;
&lt;p&gt;(2) 终端&lt;code&gt;ant debug adb install -r app/build/outputs/apk/app-debug.apk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错:adb: command not found&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Starting-Another-Activity&quot;&gt;&lt;a href=&quot;#Starting-Another-Activity&quot; class=&quot;headerlink&quot; title=&quot;Starting Another Activity&quot;&gt;&lt;/a&gt;Starting Another Activity&lt;/h3&gt;&lt;p&gt;经过上面的学习,我们已经有了一个activity (a single screen) with a text field and a button。本节add some code to MyActivity that starts a new activity when the user clicks the Send button.也就是说另外添加一个界面,当用户点击send按钮的时候跳转到这个界面。&lt;/p&gt;
&lt;h4 id=&quot;Respond-to-the-Send-Button&quot;&gt;&lt;a href=&quot;#Respond-to-the-Send-Button&quot; class=&quot;headerlink&quot; title=&quot;Respond to the Send Button&quot;&gt;&lt;/a&gt;Respond to the Send Button&lt;/h4&gt;&lt;p&gt;(1)修改 res/layout/content_my.xml文件。添加android:onClick 属性到 &lt;code&gt;&amp;lt;Button&amp;gt;&lt;/code&gt;元素.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android:onClick=&amp;quot;sendMessage&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android:onClick&lt;/code&gt;的值&lt;code&gt;sendMessage&lt;/code&gt;就是你的activity里的方法名。当用户点击这个button的时候就会跳转到这个activity。&lt;/p&gt;
&lt;p&gt;(2)修改&lt;code&gt;app/src/main/java/com/example/liuhongyu/helloworld/MyActivity.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;MyActivity&lt;/code&gt; class内,添加&lt;code&gt;sendMessage()&lt;/code&gt; method。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public void sendMessage(View view){&lt;/code&gt;&lt;br&gt;    &lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意里面的&lt;code&gt;View view&lt;/code&gt;参数。保证了点击的是&lt;code&gt;View&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-an-Intent&quot;&gt;&lt;a href=&quot;#Build-an-Intent&quot; class=&quot;headerlink&quot; title=&quot;Build an Intent&quot;&gt;&lt;/a&gt;Build an Intent&lt;/h4&gt;&lt;p&gt;(1)在上面的&lt;code&gt;sendMessage&lt;/code&gt; method内创建一个Intent 来开启一个名为&lt;code&gt;DisplayMessageActivity&lt;/code&gt;的:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Intent intent = new Intent(this, DisplayMessageActivity.class);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The reference to DisplayMessageActivity will raise an error if you’re using an IDE such as Android Studio because the class doesn’t exist yet. Ignore the error for now; you’ll create the class soon.即暂时会因为没有DisplayMessageActivity而报错,待会创建它&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;An Intent is an object that provides runtime binding between separate components (such as two activities). The Intent represents an app’s “intent to do something.” You can use intents for a wide variety of tasks, but most often they’re used to start another activity 即Intent常用来启动另一个activity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上面构造函数的2个参数:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Context as its first parameter (this is used because the Activity class is a subclass of Context)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Class of the app component to which the system should deliver the Intent (in this case, the activity that should be started)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(2)在MyActivity.java顶部import  Intent class&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错:Android studio不能够resolve symbol Intent。你必须import the Intent class:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import android.content.Intent;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小技巧:&lt;/strong&gt; In Android Studio, press &lt;strong&gt;Alt + Enter&lt;/strong&gt; (&lt;strong&gt;option + return on Mac&lt;/strong&gt;) to import missing classes.&lt;/p&gt;
&lt;p&gt;(3)Inside the sendMessage() method, use findViewById() to get the EditText element.&lt;/p&gt;
&lt;p&gt;(4)在MyActivity.java顶部import the EditText class&lt;/p&gt;
&lt;p&gt;(5)Assign the text to a local message variable, and use the putExtra() method to add its text value to the intent.&lt;/p&gt;
&lt;p&gt;(6)在MyActivity class,添加EXTRA_MESSAGE的定义&lt;/p&gt;
&lt;p&gt;(7)在sendMessage()方法内,调用startActivity()方法,传入(1)中的indent参数。&lt;/p&gt;
&lt;p&gt;The system receives this call and starts an instance of the Activity specified by the Intent. Now you need to create the &lt;code&gt;DisplayMessageActivity&lt;/code&gt; class in order for this to work.&lt;/p&gt;
&lt;h3 id=&quot;Create-the-Second-Activity&quot;&gt;&lt;a href=&quot;#Create-the-Second-Activity&quot; class=&quot;headerlink&quot; title=&quot;Create the Second Activity&quot;&gt;&lt;/a&gt;Create the Second Activity&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;onCreate()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;setContentView()&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;Create-a-new-activity-using-Android-Studio&quot;&gt;&lt;a href=&quot;#Create-a-new-activity-using-Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Create a new activity using Android Studio&quot;&gt;&lt;/a&gt;Create a new activity using Android Studio&lt;/h4&gt;&lt;p&gt;(1)右键&lt;code&gt;com.mycompany.myfirstapp&lt;/code&gt;,New &amp;gt; Activity &amp;gt; Blank Activity&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android17.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到src/main/res/layout中生成了&lt;code&gt;activity_display_message.xml&lt;/code&gt;,&lt;code&gt;content_display_message.xml&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;(2)下面的Hierarchical Parent,你只需要选择默认的&lt;code&gt;com.mycompany.myfirstapp.MyActivity&lt;/code&gt;就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android18.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;(3)src/main/java中打开&lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;,这个class里面包含了所需的onCreate()方法的实现。你只需要去补充完善它就行了。&lt;/p&gt;
&lt;p&gt;(4)现在你运行这个app,点击按钮,开启第二个activity。but it uses a default “Hello world” layout provided by the template. You’ll soon update the activity to instead display a custom text view.&lt;/p&gt;
&lt;h4 id=&quot;Create-the-activity-without-Android-Studio&quot;&gt;&lt;a href=&quot;#Create-the-activity-without-Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Create the activity without Android Studio&quot;&gt;&lt;/a&gt;Create the activity without Android Studio&lt;/h4&gt;&lt;p&gt;(1)如果你用的IDE不是Android Studio,或者使用终端命令行。可以在&lt;code&gt;MyActivity.java&lt;/code&gt;文件所在的文件夹手动创建&lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;(2)在&lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;中添加代码&lt;/p&gt;
&lt;p&gt;(3)src/main/res/values/&lt;code&gt;strings.xml&lt;/code&gt;中添加新的activity’的标题&lt;/p&gt;
&lt;p&gt;(4)在你的manifest file:&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中,&lt;code&gt;在Application&lt;/code&gt; element内,add the &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt; element for your &lt;code&gt;DisplayMessageActivity&lt;/code&gt; class&lt;/p&gt;
&lt;p&gt;&lt;code&gt;android:parentActivityName attribute&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;Receive-the-Intent&quot;&gt;&lt;a href=&quot;#Receive-the-Intent&quot; class=&quot;headerlink&quot; title=&quot;Receive the Intent&quot;&gt;&lt;/a&gt;Receive the Intent&lt;/h4&gt;&lt;p&gt;Every &lt;code&gt;Activity&lt;/code&gt; is invoked by an &lt;code&gt;Intent&lt;/code&gt;, regardless of how the user navigated there. You can get the &lt;code&gt;Intent&lt;/code&gt; that started your &lt;code&gt;activity&lt;/code&gt; by calling &lt;code&gt;getIntent()&lt;/code&gt; and retrieve(检索) the data contained within the intent.&lt;/p&gt;
&lt;p&gt;(1)编辑java/com.mycompany.myfirstapp 目录中的&lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In Android Studio, press Alt + Enter (&lt;code&gt;option + return&lt;/code&gt; on Mac) to import missing classes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android19.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Display-the-Message&quot;&gt;&lt;a href=&quot;#Display-the-Message&quot; class=&quot;headerlink&quot; title=&quot;Display the Message&quot;&gt;&lt;/a&gt;Display the Message&lt;/h4&gt;&lt;p&gt;(1)在&lt;code&gt;res/layout&lt;/code&gt; directory, 编辑 &lt;code&gt;content_display_message.xml&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;给&lt;code&gt;RelativeLayout&lt;/code&gt; 添加 &lt;code&gt;android:id&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;(2)编辑 &lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;完善&lt;code&gt;onCreate()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错:&lt;/strong&gt; &lt;code&gt;DisplayMessageActivity.java&lt;/code&gt;显示&lt;code&gt;cannot resolve symbol content&lt;/code&gt;, &lt;code&gt;content_display_message.xml&lt;/code&gt;中显示&lt;code&gt;unexpected text found in layout file “android:id=&amp;quot;@+id/content&amp;quot;&amp;gt;”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因:&lt;/strong&gt; 上面已经有了一个 &lt;strong&gt;“&amp;gt;”&lt;/strong&gt;,应该在上面的 &lt;strong&gt;“&amp;gt;”&lt;/strong&gt; 之内写一个。&lt;/p&gt;
&lt;p&gt;(3)运行app,在弹出的对话框内填上信息,点击send.The second activity replaces the first one on the screen, showing the message you entered in the first activity.&lt;/p&gt;
&lt;p&gt;一个基本的app就这样完成了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android20.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;running an x86 based android virtual device is 10x faster&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1554099/why-is-the-android-emulator-so-slow-how-can-we-speed-up-the-android-emulator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow上的回答&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要下载x86 Atom System Images and the Intel Hardware Accelerated Execution Manager Driver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Android SDK的SDK Tools里面可以看到应该是下载了,但下载的是6.0的,可能导致5.x版本不能用?&lt;/p&gt;
&lt;p&gt;选择一个android5.0的虚拟机,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android28.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;android5.0右侧点击&lt;code&gt;change&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;勾选&lt;code&gt;show downloadable system images&lt;/code&gt;下载&lt;code&gt;5.0的x86的systerm images&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android29.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击finish,返回刚才的界面,名称变成了&lt;code&gt;android 5.0 x86&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;myavd1设备右侧的&lt;code&gt;Repair Device&lt;/code&gt;黄色感叹号没有了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双击该虚拟机,运行app,运行速度确实要快一些。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在消息框中输入&lt;code&gt;3333&lt;/code&gt;,点击send,就能正确跳转到第2个activity了,反应也挺快的:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android27.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;自带的虚拟机非常的慢:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android21.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;进入后点击&lt;code&gt;hellword&lt;/code&gt; app,输入message,点击send:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android22.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;等了很久,也不会弹出第2个activity。在真机上测试一遍,也是不能弹出。说明是代码的问题,而非虚拟机的问题。&lt;/p&gt;
&lt;p&gt;可能的原因:在新建activity的时候有误。从错误结果来看,弹不出第2个activity,也很可能是这个原因。问题在 &lt;strong&gt;Starting Another Activity&lt;/strong&gt; 章节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了追踪改动,使用git&amp;amp;github&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android23.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以看到git忽略了HelloWorld.iml,build,local.properties一些文件,这可能会导致你clone这个仓库到本地的时候会因为少了一些文件而导致app不能运行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但上面也提示了可以用git add -f来手动添加这些文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在github上新建一个仓库Create a new repo: &lt;code&gt;AndroidDeveloperTraining&lt;/code&gt;,添加一个README&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android24.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上面找到远程仓库的SSH&lt;/p&gt;
&lt;p&gt;终端把本地的含有&lt;code&gt;.git&lt;/code&gt;文件见的仓库和github上的远程仓库联系起来:&lt;code&gt;git remote add origin git@github.com:lhyhfut/AndroidDeveloperTraining.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后把本地内容推送到远程仓库: &lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;报错:Updates were rejected because the remote contains work that you do not have locally.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因:远程仓库中有README,本地仓库没有,这样不能推送&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;settings——Delete this repository&lt;/code&gt;中删除刚才的远程仓库。新建一个不含README的仓库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;不需要重新用git add remote origin SSH建立联系了。因为2个仓库的SSH是一样的。只需要重新git push -u origin推送就行了。&lt;/p&gt;
&lt;p&gt;在github上看每次commit的代码修改就比较方便:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/Android26.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决点击按钮之后不能够弹出对话框的问题。原因是在Respond to the Send Button章节Add the android:onClick attribute to the Button element的时候少了android:onClick=”sendMessage”这个属性,sendMessage是MyActivity.java中的方法,点击按钮时跳转到第2个activity时会调用这个方法,补上这个方法,就可以了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后上传到远程仓库中:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add *&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;solve cannot run second activity&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Supporting-Different-Devices&quot;&gt;&lt;a href=&quot;#Supporting-Different-Devices&quot; class=&quot;headerlink&quot; title=&quot;Supporting Different Devices&quot;&gt;&lt;/a&gt;Supporting Different Devices&lt;/h2&gt;&lt;p&gt;android有很多种不同屏幕尺寸的机型。这意味着你需要适配很多种。Some of the important variations that you should consider include different languages, screen sizes, and versions of the Android platform.&lt;/p&gt;
&lt;h3 id=&quot;Supporting-Different-Languages&quot;&gt;&lt;a href=&quot;#Supporting-Different-Languages&quot; class=&quot;headerlink&quot; title=&quot;Supporting Different Languages&quot;&gt;&lt;/a&gt;Supporting Different Languages&lt;/h3&gt;&lt;p&gt;为了便于管理&lt;code&gt;UI strings&lt;/code&gt;,android在每一个project里都有一个resources 目录。如果你用&lt;code&gt;Android SDK Tools&lt;/code&gt;创建project。则这个tools会在项目顶层创建一个&lt;code&gt;res/&lt;/code&gt;目录。它里面有很多子目录用于处理不同的资源类型。还有一些默认的资源文件如&lt;code&gt;res/values/strings.xml&lt;/code&gt;,用于存储&lt;code&gt;string values&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;Create-Locale-Directories-and-String-Files&quot;&gt;&lt;a href=&quot;#Create-Locale-Directories-and-String-Files&quot; class=&quot;headerlink&quot; title=&quot;Create Locale Directories and String Files&quot;&gt;&lt;/a&gt;Create Locale Directories and String Files&lt;/h4&gt;&lt;p&gt;android studio 在&lt;code&gt;res/&lt;/code&gt;中添加了不同的&lt;code&gt;values&lt;/code&gt;目录,用于支持更多类型的语言。里面都有各自的&lt;code&gt;strings.xml&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;Use-the-String-Resources&quot;&gt;&lt;a href=&quot;#Use-the-String-Resources&quot; class=&quot;headerlink&quot; title=&quot;Use the String Resources&quot;&gt;&lt;/a&gt;Use the String Resources&lt;/h4&gt;&lt;p&gt;你可以通过使用&lt;code&gt;resource name defined by the &amp;lt;string&amp;gt; element&amp;#39;s name attribute&lt;/code&gt;在源码中引用&lt;code&gt;string resources&lt;/code&gt;或者其他的&lt;code&gt;XML files&lt;/code&gt;。在源码中,可以使用&lt;code&gt;R.string.&amp;lt;string_name&amp;gt;&lt;/code&gt;类似语法来引用&lt;code&gt;string resource&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Supporting-Different-Screens&quot;&gt;&lt;a href=&quot;#Supporting-Different-Screens&quot; class=&quot;headerlink&quot; title=&quot;Supporting Different Screens&quot;&gt;&lt;/a&gt;Supporting Different Screens&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;BW:该节内容查阅即可&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;Supporting-Different-Platform-Versions&quot;&gt;&lt;a href=&quot;#Supporting-Different-Platform-Versions&quot; class=&quot;headerlink&quot; title=&quot;Supporting Different Platform Versions&quot;&gt;&lt;/a&gt;Supporting Different Platform Versions&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;BW:该节内容查阅即可&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;API-SDK的组成&quot;&gt;&lt;a href=&quot;#API-SDK的组成&quot; class=&quot;headerlink&quot; title=&quot;API,SDK的组成&quot;&gt;&lt;/a&gt;API,SDK的组成&lt;/h2&gt;&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h2&gt;&lt;h2 id=&quot;Java-Web&quot;&gt;&lt;a href=&quot;#Java-Web&quot; class=&quot;headerlink&quot; title=&quot;Java Web&quot;&gt;&lt;/a&gt;Java Web&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.raywenderlich.com/78576/android-tutorial-for-beginners-part-2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;raywenderlich android教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/mynameishuangshuai/article/details/51332790&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;最全面的AndroidStudio配置指南总结-包括护眼模式&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;To-do-list&quot;&gt;&lt;a href=&quot;#To-do-list&quot; class=&quot;headerlink&quot; title=&quot;To do list&quot;&gt;&lt;/a&gt;To do list&lt;/h2&gt;&lt;h3 id=&quot;等在博客中会显示为其他字符。可能受markdown语法的影响。&quot;&gt;&lt;a href=&quot;#等在博客中会显示为其他字符。可能受markdown语法的影响。&quot; class=&quot;headerlink&quot; title=&quot;等在博客中会显示为其他字符。可能受markdown语法的影响。&quot;&gt;&lt;/a&gt;&lt;relativelayout&gt;等在博客中会显示为其他字符。可能受markdown语法的影响。&lt;/relativelayout&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-Studio&quot;&gt;&lt;a href=&quot;#Android-Studio&quot; class=&quot;headerlink&quot; title=&quot;Android Studio&quot;&gt;&lt;/a&gt;Android Studio&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot;
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>简历</title>
    <link href="http://yoursite.com/2016/05/02/%E7%AE%80%E5%8E%86/"/>
    <id>http://yoursite.com/2016/05/02/简历/</id>
    <published>2016-05-02T10:02:15.000Z</published>
    <updated>2016-05-02T10:02:15.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Resourcelist</title>
    <link href="http://yoursite.com/2016/05/02/Resourcelist/"/>
    <id>http://yoursite.com/2016/05/02/Resourcelist/</id>
    <published>2016-05-02T09:55:41.000Z</published>
    <updated>2016-05-02T09:55:41.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nodeclub源码分析</title>
    <link href="http://yoursite.com/2016/05/02/Nodeclub%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/05/02/Nodeclub源码分析/</id>
    <published>2016-05-02T09:36:51.000Z</published>
    <updated>2016-06-21T13:50:07.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;h1 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;nodejs&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; 这部分内容可以独立出来另外写一篇博客 &lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装nodejs&quot;&gt;&lt;a href=&quot;#安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs&quot;&gt;&lt;/a&gt;安装nodejs&lt;/h2&gt;&lt;h3 id=&quot;安装nvm&quot;&gt;&lt;a href=&quot;#安装nvm&quot; class=&quot;headerlink&quot; title=&quot;安装nvm&quot;&gt;&lt;/a&gt;安装nvm&lt;/h3&gt;&lt;h3 id=&quot;安装node-npm&quot;&gt;&lt;a href=&quot;#安装node-npm&quot; class=&quot;headerlink&quot; title=&quot;安装node,npm&quot;&gt;&lt;/a&gt;安装node,npm&lt;/h3&gt;&lt;h1 id=&quot;express&quot;&gt;&lt;a href=&quot;#express&quot; class=&quot;headerlink&quot; title=&quot;express&quot;&gt;&lt;/a&gt;express&lt;/h1&gt;&lt;h2 id=&quot;express构建项目的2种方式&quot;&gt;&lt;a href=&quot;#express构建项目的2种方式&quot; class=&quot;headerlink&quot; title=&quot;express构建项目的2种方式&quot;&gt;&lt;/a&gt;express构建项目的2种方式&lt;/h2&gt;&lt;h1 id=&quot;mongodb&quot;&gt;&lt;a href=&quot;#mongodb&quot; class=&quot;headerlink&quot; title=&quot;mongodb&quot;&gt;&lt;/a&gt;mongodb&lt;/h1&gt;&lt;h1 id=&quot;mongoose&quot;&gt;&lt;a href=&quot;#mongoose&quot; class=&quot;headerlink&quot; title=&quot;mongoose&quot;&gt;&lt;/a&gt;mongoose&lt;/h1&gt;&lt;h1 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h1&gt;&lt;h1 id=&quot;angular-js&quot;&gt;&lt;a href=&quot;#angular-js&quot; class=&quot;headerlink&quot; title=&quot;angular.js&quot;&gt;&lt;/a&gt;angular.js&lt;/h1&gt;&lt;p&gt;上述的这些部分在《nodejs环境搭建》中。&lt;/p&gt;
&lt;h1 id=&quot;Nodeclub&quot;&gt;&lt;a href=&quot;#Nodeclub&quot; class=&quot;headerlink&quot; title=&quot;Nodeclub&quot;&gt;&lt;/a&gt;Nodeclub&lt;/h1&gt;&lt;h2 id=&quot;fork-Nodeclub-clone到本地&quot;&gt;&lt;a href=&quot;#fork-Nodeclub-clone到本地&quot; class=&quot;headerlink&quot; title=&quot;fork Nodeclub,clone到本地&quot;&gt;&lt;/a&gt;fork Nodeclub,clone到本地&lt;/h2&gt;&lt;h2 id=&quot;建立exercise-branch&quot;&gt;&lt;a href=&quot;#建立exercise-branch&quot; class=&quot;headerlink&quot; title=&quot;建立exercise branch&quot;&gt;&lt;/a&gt;建立exercise branch&lt;/h2&gt;&lt;h2 id=&quot;运行Nodeclub&quot;&gt;&lt;a href=&quot;#运行Nodeclub&quot; class=&quot;headerlink&quot; title=&quot;运行Nodeclub&quot;&gt;&lt;/a&gt;运行Nodeclub&lt;/h2&gt;&lt;p&gt;按照&lt;a href=&quot;https://github.com/cnodejs/nodeclub&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Nodeclub README&lt;/a&gt;上的说明。&lt;br&gt;终端输入以下命令:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis-server&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis-cli&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mongod&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mongo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt; (切换到package.json所在目录,因为这个是在本地安装,而非全局安装)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo supervisor app.js&lt;/code&gt; //需用npm安装supervisor,否则用&lt;code&gt;node app.js&lt;/code&gt;也可以.注意加上sudo,否则有时会报错&lt;/p&gt;
&lt;p&gt;浏览器中打开&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodejs121.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;注册账户&quot;&gt;&lt;a href=&quot;#注册账户&quot; class=&quot;headerlink&quot; title=&quot;注册账户&quot;&gt;&lt;/a&gt;注册账户&lt;/h2&gt;&lt;h3 id=&quot;邮箱验证&quot;&gt;&lt;a href=&quot;#邮箱验证&quot; class=&quot;headerlink&quot; title=&quot;邮箱验证&quot;&gt;&lt;/a&gt;邮箱验证&lt;/h3&gt;&lt;p&gt;debug 模式不会发邮件.&lt;/p&gt;
&lt;p&gt;debug false则打不开网页。&lt;/p&gt;
&lt;p&gt;models/user.js中把&lt;br&gt;  active: { type: Boolean, default: true },//把false改为true，但没用&lt;/p&gt;
&lt;p&gt;虽然验证不了邮箱,但可以通过修改mongodb中model配置来让注册的用户名能够登录。&lt;/p&gt;
&lt;h3 id=&quot;使用robomongo&quot;&gt;&lt;a href=&quot;#使用robomongo&quot; class=&quot;headerlink&quot; title=&quot;使用robomongo&quot;&gt;&lt;/a&gt;使用robomongo&lt;/h3&gt;&lt;p&gt;在robomongo里面容易看出model的信息。当然在终端敲mongodb的一些命令也是可以的,麻烦一些。&lt;/p&gt;
&lt;p&gt;下载robomongo,运行nodeclub项目(上面要按照nodeclub项目说明敲几个命令),打开robomongo之后选择要连接的数据库。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;用 robomongo查了一下数据库，里面都是网站有一部分用户信息是nodeclub自带的。还有一部分则是自己放注册的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;也可以直接删除。也可以直接修改:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-3.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;把下面的false改为true。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;登录,OK。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击右侧的123qwe账户图标:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;进入&lt;a href=&quot;http://localhost:3000/user/123qwe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000/user/123qwe&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-7.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;注册一个admin用户，密码也是admin,admin账户和普通账户的权限要多一些&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;进入&lt;a href=&quot;http://localhost:3000/user/admin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000/user/admin&lt;/a&gt; :&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E4%BD%BF%E7%94%A8robomongo-8.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;h3 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h3&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt;中包含了Nodejs项目的依赖。从&lt;code&gt;package.json&lt;/code&gt;大致可以看出nodeclub的架构。&lt;/p&gt;
&lt;p&gt;如比:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;express&lt;/code&gt;:基本的web框架&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mongodb&lt;/code&gt;:数据库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mongoose&lt;/code&gt;: orm&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EventProxy&lt;/code&gt;:事件管理&lt;/p&gt;
&lt;p&gt;&lt;code&gt;connect-mongo&lt;/code&gt;: session&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nodemailer&lt;/code&gt;：邮件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mocha, should&lt;/code&gt;:测试&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;h3 id=&quot;nodejs自带模块&quot;&gt;&lt;a href=&quot;#nodejs自带模块&quot; class=&quot;headerlink&quot; title=&quot;nodejs自带模块&quot;&gt;&lt;/a&gt;nodejs自带模块&lt;/h3&gt;&lt;p&gt;package.json中都是从npm上下载的模块。但项目中不可避免要用到nodejs自带的模块,比如用于加密解密的&lt;code&gt;crypto&lt;/code&gt;,用于路径处理的&lt;code&gt;Path&lt;/code&gt;.这些对象的用法可以在&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs官网&lt;/a&gt;上查询。&lt;/p&gt;
&lt;h3 id=&quot;MVC架构&quot;&gt;&lt;a href=&quot;#MVC架构&quot; class=&quot;headerlink&quot; title=&quot;MVC架构&quot;&gt;&lt;/a&gt;MVC架构&lt;/h3&gt;&lt;p&gt;nodeclub 以 express + mongodb + mongoose 作为基本框架。这个在它的工程目录里也可以看出:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt;: 对应mongoose orm， models目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;view：&lt;/code&gt; ejs模板， views目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;controler&lt;/code&gt;：express middleware , contollers目录&lt;/p&gt;
&lt;h3 id=&quot;工程目录&quot;&gt;&lt;a href=&quot;#工程目录&quot; class=&quot;headerlink&quot; title=&quot;工程目录&quot;&gt;&lt;/a&gt;工程目录&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclub%E5%B7%A5%E7%A8%8B%E7%9B%AE%E5%BD%95.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;执行流程&quot;&gt;&lt;a href=&quot;#执行流程&quot; class=&quot;headerlink&quot; title=&quot;执行流程&quot;&gt;&lt;/a&gt;执行流程&lt;/h3&gt;&lt;h4 id=&quot;入口程序app-js&quot;&gt;&lt;a href=&quot;#入口程序app-js&quot; class=&quot;headerlink&quot; title=&quot;入口程序app.js&quot;&gt;&lt;/a&gt;入口程序app.js&lt;/h4&gt;&lt;p&gt;require(./config)&lt;/p&gt;
&lt;p&gt;require(‘./models’)&lt;/p&gt;
&lt;h4 id=&quot;配置文件-config-js&quot;&gt;&lt;a href=&quot;#配置文件-config-js&quot; class=&quot;headerlink&quot; title=&quot;配置文件 config.js&quot;&gt;&lt;/a&gt;配置文件 config.js&lt;/h4&gt;&lt;p&gt;应用全局数据配置&lt;/p&gt;
&lt;p&gt;数据库连接配置&lt;/p&gt;
&lt;p&gt;session，auth 相关配置&lt;/p&gt;
&lt;p&gt;rss配置&lt;/p&gt;
&lt;p&gt;mail配置&lt;/p&gt;
&lt;p&gt;第三方连接相关配置， github， weibo&lt;/p&gt;
&lt;p&gt;7牛的access信息，用于文件上传&lt;/p&gt;
&lt;p&gt;版块配置&lt;/p&gt;
&lt;p&gt;极光推送&lt;/p&gt;
&lt;h4 id=&quot;调用链&quot;&gt;&lt;a href=&quot;#调用链&quot; class=&quot;headerlink&quot; title=&quot;调用链&quot;&gt;&lt;/a&gt;调用链&lt;/h4&gt;&lt;p&gt;从require的模块可以看出:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;app.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;var config = require(‘./config’);&lt;/p&gt;
&lt;p&gt;var webRouter = require(‘./web_router’);&lt;/p&gt;
&lt;p&gt;var apiRouterV1 = require(‘./api_router_v1’);&lt;/p&gt;
&lt;p&gt;var logger = require(‘./common/logger’);&lt;/p&gt;
&lt;p&gt;var proxyMiddleware = require(‘./middlewares/proxy’);&lt;/p&gt;
&lt;p&gt;app.js还require了一些node_modules中的模块。但没有require  controllers和models中的模块。那路由处理是怎么进行的呢?&lt;/p&gt;
&lt;p&gt;是在下面2个模块中进行的:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;web_router.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubroute.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;api_router_v1.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubroute-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于app.js require了这2个路由文件。所以程序就这样调用起来了。从用户操作,http请求,路由处理,数据库操作…程序就这么运行起来了&lt;/p&gt;
&lt;h3 id=&quot;models&quot;&gt;&lt;a href=&quot;#models&quot; class=&quot;headerlink&quot; title=&quot;models&quot;&gt;&lt;/a&gt;models&lt;/h3&gt;&lt;h4 id=&quot;index-js&quot;&gt;&lt;a href=&quot;#index-js&quot; class=&quot;headerlink&quot; title=&quot;index.js&quot;&gt;&lt;/a&gt;index.js&lt;/h4&gt;&lt;p&gt;里面的&lt;code&gt;require&lt;/code&gt;和&lt;code&gt;module.exports&lt;/code&gt;类似于C语言中的&lt;code&gt;#include(针对文件模块)&lt;/code&gt;和&lt;code&gt;extern(针对变量)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;index.js大概完成了这几件事情:&lt;/p&gt;
&lt;p&gt;require models中其它的一些模块。&lt;/p&gt;
&lt;p&gt;connect mongoose&lt;/p&gt;
&lt;p&gt;exports models中的对象供其他模块使用。&lt;/p&gt;
&lt;p&gt;代码比较一致,如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubmodel-index.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;models中有这些model的schema设计:user(基本用户信息),topic话题,tag标签系统,关系,消息(回复消息,关注和@消息)&lt;/p&gt;
&lt;p&gt;以消息model为例,在&lt;code&gt;models/message.js&lt;/code&gt;中，可以知道消息大概有这几种:&lt;/p&gt;
&lt;p&gt;/*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;type:&lt;/li&gt;
&lt;li&gt;reply: xx 回复了你的话题&lt;/li&gt;
&lt;li&gt;reply2: xx 在话题中回复了你&lt;/li&gt;
&lt;li&gt;follow: xx 关注了你&lt;/li&gt;
&lt;li&gt;at: xx ＠了你&lt;br&gt;*/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;controllers/message.js至少要承担起这个任务:用户在view中处理消息，你要响应。你还得从models中读取消息列表。controllers/message.js做的事情就是综合view 的用户输入以及models的数据库设计和记录来做出响应。主要是做这些逻辑。&lt;/p&gt;
&lt;p&gt;根据事件分类，这里面采用异步来处理，具体使用eventproxy。&lt;br&gt;可以看到controllers，models，proxy等文件夹中有些模块是同名的。&lt;/p&gt;
&lt;p&gt;也就是说这里把数据，功能等分开了。即使是功能，也还有分类。&lt;br&gt;所以最基础的是model的设计。&lt;/p&gt;
&lt;h3 id=&quot;controllers&quot;&gt;&lt;a href=&quot;#controllers&quot; class=&quot;headerlink&quot; title=&quot;controllers&quot;&gt;&lt;/a&gt;controllers&lt;/h3&gt;&lt;p&gt;controllers/message.js是对已读消息/未读消息，已读消息/未读消息列表进行处理。&lt;/p&gt;
&lt;p&gt;回复models/reply.js也是这样的。controllers/reply.js是对消息进行回复，这里的消息包括了所有消息种类。&lt;/p&gt;
&lt;p&gt;用户里接触到的是view,与view交互产生http请求。我们的controller就是处理这些请求的方法。期间要对数据库进行增删查改的操作。&lt;/p&gt;
&lt;p&gt;比如我们点击账户名进入:&lt;a href=&quot;http://localhost:3000/user/1234qwer,可以观察终端到底发生了什么&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:3000/user/1234qwer,可以观察终端到底发生了什么&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;MONGO users.findOne {“conditions”:{“_id”:”56469eb62acb60901340ad91”},”options”:{},”collectionName”:”users”} 3ms&lt;/p&gt;
&lt;p&gt;  MONGO replies.findOne {“conditions”:{“_id”:”5668b2de531540c8155eeae7”},”options”:{},”collectionName”:”replies”} 4ms&lt;/p&gt;
&lt;p&gt;  MONGO users.findOne {“conditions”:{“_id”:”5641287b423cb5aa0c48bf23”},”options”:{},”collectionName”:”users”} 1ms&lt;/p&gt;
&lt;p&gt;  Render view user/index (46ms)&lt;/p&gt;
&lt;p&gt;Completed 200 (132ms)&lt;/p&gt;
&lt;p&gt;前面还有很多，省略了.&lt;/p&gt;
&lt;p&gt;从这里可以看出在浏览器中点击(view用户操作)之后程序的执行流程。上面终端看到的主要是数据库操作(model)，和页面渲染(view)。&lt;/p&gt;
&lt;p&gt;比如在页面上(view)点击删除按钮: (这条记录是用户1234qwer回复alsotang的reply  message，关于reply  message的区别可以看models中的模块中的数据库设计，它们里面都有reply_id)&lt;/p&gt;
&lt;p&gt;  MONGO replies.findOne {“conditions”:{“_id”:”565acb03e473433f209e7ea6”},”options”:{},”collectionName”:”replies”} 1ms&lt;/p&gt;
&lt;p&gt;  MONGO users.findOne {“conditions”:{“_id”:”565ac983e473433f209e7ea5”},”options”:{},”collectionName”:”users”} 1ms&lt;br&gt;Completed 200 (62ms)&lt;/p&gt;
&lt;p&gt;  MONGO topics.findOne {“conditions”:{“_id”:”56469eb62acb60901340ad94”},”options”:{},”collectionName”:”topics”} 2ms&lt;/p&gt;
&lt;p&gt;  MONGO replies.find {“conditions”:{“deleted”:false,”topic_id”:”56469eb62acb60901340ad94”},”options”:{“sort”:{“create_at”:-1},”limit”:1,”fields”:{“_id”:1}},”collectionName”:”replies”} 2ms&lt;/p&gt;
&lt;p&gt;然后再去对照controllers/reply.js中的代码：删除回复信息&lt;br&gt;exports.delete = function (req, res, next) { …}&lt;/p&gt;
&lt;p&gt;&lt;code&gt;其他的还有:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;controllers/rss.js   订阅处理&lt;/p&gt;
&lt;p&gt;controllers/search.js   搜索处理&lt;br&gt;res.redirect(‘&lt;a href=&quot;https://www.google.com.hk/#hl=zh-CN&amp;amp;q=site:cnodejs.org+&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.google.com.hk/#hl=zh-CN&amp;amp;q=site:cnodejs.org+&lt;/a&gt;‘ + q);//用的是Google&lt;/p&gt;
&lt;p&gt;controllers/sign.js   注册和登录&lt;/p&gt;
&lt;p&gt;controllers/site.js    主要显示页面的一些分块内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubsite.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;controllers/static.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubsite-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;common中大部分都是在处理消息传递的。&lt;/p&gt;
&lt;p&gt;store.js分为&lt;br&gt;store_qn.js(7牛)和store_local.js(本地)&lt;/p&gt;
&lt;h4 id=&quot;exports和module-exports-js-引用和复制-传值和传址&quot;&gt;&lt;a href=&quot;#exports和module-exports-js-引用和复制-传值和传址&quot; class=&quot;headerlink&quot; title=&quot;exports和module.exports,js- 引用和复制(传值和传址)&quot;&gt;&lt;/a&gt;exports和module.exports,js- 引用和复制(传值和传址)&lt;/h4&gt;&lt;p&gt;js中几种数据类型分别传的什么&lt;/p&gt;
&lt;p&gt;引用：对象、数组、函数&lt;/p&gt;
&lt;p&gt;复制：数字、布尔&lt;/p&gt;
&lt;h3 id=&quot;express的中间件-middleware&quot;&gt;&lt;a href=&quot;#express的中间件-middleware&quot; class=&quot;headerlink&quot; title=&quot;express的中间件(middleware)&quot;&gt;&lt;/a&gt;express的中间件(middleware)&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/535601a20d7d0faf140303d8&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;通过 nodeclub 项目源码来讲解如何做一个 nodejs + express + mongodb 项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;express 的基础是 middleware，或者说 express 的基础是 connect，connect 的基础是 middleware。middleware 模式 相当于一个加工流水线（大家叫 middleware stack），每一个 middleware 相当于一个加工步骤，当出现一个 http 请求的时候，http 请求会挨着每个 middleware 执行下去。&lt;br&gt;express 里处理一个请求的过程基本上就是请求通过 middleware stack 的过程：  * -&amp;gt; middlewares -&amp;gt; 路由 -&amp;gt; controllers -&amp;gt; errorhandlering。&lt;/p&gt;
&lt;p&gt;middleware 怎样做到异步的方法呢？ middleware 使用 promise 的方式来处理异步，所有每个 middleware 都有三个参数 req, res, next, 对于异步的情况， 必须要调用 next() 方法。不然后续的 middleware 就无法执行。 ps: debug 的时候没调用 next() 还不会报错，一定注意.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auth.js&lt;/code&gt; exports 出来的函数全部都是中间件.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubmiddleware-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;web_router.js&lt;/code&gt;中处理get或post请求的时候会调用这些中间件:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubmiddleware-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;EventProxy&quot;&gt;&lt;a href=&quot;#EventProxy&quot; class=&quot;headerlink&quot; title=&quot;EventProxy&quot;&gt;&lt;/a&gt;EventProxy&lt;/h3&gt;&lt;p&gt;eventProxy是一款非常好用的javascript事件管理系统&lt;/p&gt;
&lt;p&gt;事件与回调&lt;/p&gt;
&lt;h4 id=&quot;HTML-DOM事件-前端&quot;&gt;&lt;a href=&quot;#HTML-DOM事件-前端&quot; class=&quot;headerlink&quot; title=&quot;HTML DOM事件(前端)&quot;&gt;&lt;/a&gt;HTML DOM事件(前端)&lt;/h4&gt;&lt;p&gt;HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。HTML有一些事件,比如常见的鼠标和键盘事件。事件通常与函数配合使用，这样就可以通过发生的事件来驱动函数执行。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.w3school.com.cn/js/js_htmldom_events.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript HTML DOM 事件&lt;/a&gt;上介绍了常见的一些HTML事件例子如:&lt;code&gt;当用户点击鼠标时&lt;/code&gt;,&lt;code&gt;当网页已加载时&lt;/code&gt;,&lt;code&gt;当提交 HTML 表单时&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Nodejs的事件机制-后端&quot;&gt;&lt;a href=&quot;#Nodejs的事件机制-后端&quot; class=&quot;headerlink&quot; title=&quot;Nodejs的事件机制(后端)&quot;&gt;&lt;/a&gt;Nodejs的事件机制(后端)&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/tyq-nodejs-event&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出Node.js（四）：Node.js的事件机制&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端中,DOM上的各种事件是异步的。在Ajax大规模应用之后，异步请求更得到广泛的认同，而Ajax亦是基于事件机制的。在Rhino中，文件读取等操作，均是同步操作进行的。这在性能上并没有明显的优势。而nodejs充分利用用异步IO突破单线程编程模型的性能瓶颈，使得JavaScript在后端达到实用价值。同时也统一了前后端JavaScript的编程模型。Node.js通过异步机制使请求之间无阻塞，达到并行请求的目的，但对于多个事件响应结果的协调并非被Node.js原生优雅地支持。为此,《深入浅出nodejs》的作者朴灵写了EventProxy模块来实现多事件协作。nodeclub也是朴灵写的,用的事件管理系统也是EventProxy模块。&lt;/p&gt;
&lt;p&gt;Node Club涉及到的异步操作不多，这部分内容大部分都被eventProxy代劳，只有在图片上传文件移动中有涉及。&lt;/p&gt;
&lt;p&gt;原理与Nodejs的Event模块类似。使用了事件侦听器模式和回调。例如:(摘自&lt;a href=&quot;http://www.infoq.com/cn/articles/tyq-nodejs-event&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;深入浅出Node.js（四）：Node.js的事件机制&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;var proxy = new EventProxy();&lt;/p&gt;
&lt;p&gt;proxy.all(“profile”, “timeline”, “skin”, function&lt;br&gt; (profile, timeline, skin) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// TODO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;api.getUser(“username”, function (profile) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy.emit(&amp;quot;profile&amp;quot;, profile);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;api.getTimeline(“username”, function (timeline) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy.emit(&amp;quot;timeline&amp;quot;, timeline);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;api.getSkin(“username”, function (skin) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proxy.emit(&amp;quot;skin&amp;quot;, skin);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;});&lt;/p&gt;
&lt;p&gt;all方法侦听完profile、timeline、skin三个方法后，执行回调函数，并将侦听接收到的数据传入。&lt;/p&gt;
&lt;p&gt;EventProxy还利用事件队列解决雪崩问题。所谓雪崩问题，是在缓存失效的情景下，大并发高访问量同时涌入数据库中查询，数据库无法同时承受如此大的查询请求，进而往前影响到网站整体响应缓慢。EventProxy对象的once方法，将所有请求的回调都压入事件队列中，并利用其执行一次就会将监视器移除的特点，保证每一个回调只会被执行一次。&lt;/p&gt;
&lt;h4 id=&quot;EventProxy在nodeclub中的使用&quot;&gt;&lt;a href=&quot;#EventProxy在nodeclub中的使用&quot; class=&quot;headerlink&quot; title=&quot;EventProxy在nodeclub中的使用&quot;&gt;&lt;/a&gt;EventProxy在nodeclub中的使用&lt;/h4&gt;&lt;p&gt;依然以消息(message)的处理为例:&lt;/p&gt;
&lt;p&gt;在controllers/message.js中:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/nodeclubeventproxy.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;//待完成&lt;/p&gt;
&lt;h4 id=&quot;EventProxy源码&quot;&gt;&lt;a href=&quot;#EventProxy源码&quot; class=&quot;headerlink&quot; title=&quot;EventProxy源码&quot;&gt;&lt;/a&gt;EventProxy源码&lt;/h4&gt;&lt;p&gt;主要分为注册和回调(包括错误处理)&lt;/p&gt;
&lt;p&gt;//待完成&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ep.all()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;all()调用内部函数_assign()  绑定多个事件,等到所有事件都触发了,callback才会执行一次&lt;/p&gt;
&lt;p&gt;assign()等价于all()&lt;/p&gt;
&lt;p&gt;assignAll() = assignAlways () = tail()&lt;/p&gt;
&lt;p&gt;after()事件被触发N次以后callback才会执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ep.emit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ep.done()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ep.done(‘tpl’);&lt;br&gt;// 等价于&lt;br&gt;function (err, content) {&lt;/p&gt;
&lt;p&gt;  if (err) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 一旦发生异常，一律交给error事件的handler处理

return ep.emit(&amp;apos;error&amp;apos;, err);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;/p&gt;
&lt;p&gt;  ep.emit(‘tpl’, content);&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ep.fail()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ep.fail(callback)等价于&lt;/p&gt;
&lt;p&gt;ep.bind(‘error’,function(err){   //注册和绑定&lt;/p&gt;
&lt;p&gt;ep.unbind();   &lt;/p&gt;
&lt;p&gt;callback(err);&lt;/p&gt;
&lt;p&gt;})&lt;/p&gt;
&lt;h3 id=&quot;消息&quot;&gt;&lt;a href=&quot;#消息&quot; class=&quot;headerlink&quot; title=&quot;消息&quot;&gt;&lt;/a&gt;消息&lt;/h3&gt;&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;&lt;h2 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference:&quot;&gt;&lt;/a&gt;Reference:&lt;/h2&gt;&lt;h3 id=&quot;N-blog&quot;&gt;&lt;a href=&quot;#N-blog&quot; class=&quot;headerlink&quot; title=&quot;N-blog&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/nswbmw/N-blog/wiki/_pages&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;N-blog&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cnodejs.org/topic/504b4924e2b84515770103dd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mongoose学习参考文档——基础篇&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;《nodejs实战》&quot;&gt;&lt;a href=&quot;#《nodejs实战》&quot; class=&quot;headerlink&quot; title=&quot;《nodejs实战》&quot;&gt;&lt;/a&gt;《nodejs实战》&lt;/h3&gt;&lt;h3 id=&quot;《nodejs实战》第2季&quot;&gt;&lt;a href=&quot;#《nodejs实战》第2季&quot; class=&quot;headerlink&quot; title=&quot;《nodejs实战》第2季&quot;&gt;&lt;/a&gt;《nodejs实战》第2季&lt;/h3&gt;&lt;h3 id=&quot;《深入浅出nodejs》&quot;&gt;&lt;a href=&quot;#《深入浅出nodejs》&quot; class=&quot;headerlink&quot; title=&quot;《深入浅出nodejs》&quot;&gt;&lt;/a&gt;《深入浅出nodejs》&lt;/h3&gt;&lt;h3 id=&quot;《node与express开发》&quot;&gt;&lt;a href=&quot;#《node与express开发》&quot; class=&quot;headerlink&quot; title=&quot;《node与express开发》&quot;&gt;&lt;/a&gt;《node与express开发》&lt;/h3&gt;&lt;h2 id=&quot;To-do-list&quot;&gt;&lt;a href=&quot;#To-do-list&quot; class=&quot;headerlink&quot; title=&quot;To do list:&quot;&gt;&lt;/a&gt;To do list:&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h1&gt;&lt;h1 id=&quot;nodejs&quot;&gt;&lt;a href=&quot;#nodejs&quot; class=&quot;headerlink&quot; title=&quot;nodejs&quot;&gt;&lt;/a&gt;n
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Skilllist</title>
    <link href="http://yoursite.com/2016/05/02/Skilllist/"/>
    <id>http://yoursite.com/2016/05/02/Skilllist/</id>
    <published>2016-05-02T06:11:35.000Z</published>
    <updated>2016-06-19T15:45:47.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;C语言&quot;&gt;&lt;a href=&quot;#C语言&quot; class=&quot;headerlink&quot; title=&quot;C语言&quot;&gt;&lt;/a&gt;C语言&lt;/h1&gt;&lt;p&gt;鉴于自己的工作很大一部分是嵌入式开发。C语言还是要好好掌握。并且现在嵌入式开发应用还是很广泛的。比如用arduino做个无人机等也是挺不错的。&lt;/p&gt;
&lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C++&quot;&gt;&lt;/a&gt;C++&lt;/h1&gt;&lt;p&gt;前年在工作中好像还用MFC写过一个上位机。但太久没用了。很多都忘记了。还是有需求时再学。刻意去学也得看时间。再则微软貌似已经不太关注MFC,重心在.NET和C#,可能一些公司(比如我们公司)内部的一些部门还在用MFC开发一些软件供调试使用。有做桌面应用的话可以尝试QT。这个也是个跨平台的工具。&lt;/p&gt;
&lt;h1 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; class=&quot;headerlink&quot; title=&quot;java&quot;&gt;&lt;/a&gt;java&lt;/h1&gt;&lt;p&gt;java,python,javascript这三门语言能做的事情还是很多的。js是全栈语言。java和python接近全栈(前端貌似不能用它们做)。软件工程领域的很多实践及概念都是基于java的:它是一门很成熟完备的语言。但鉴于业余时间较少。大多放在了JS上。所以对JAVA也是有需求再学。&lt;/p&gt;
&lt;h1 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h1&gt;&lt;p&gt;上一次写python应该是近3年前了。在python和JS之间还是选择了JS。虽然python通熟易懂,上手快,能干的活也很多,但还是JS更能干一些。那就暂时放一放了。&lt;/p&gt;
&lt;h1 id=&quot;android&quot;&gt;&lt;a href=&quot;#android&quot; class=&quot;headerlink&quot; title=&quot;android&quot;&gt;&lt;/a&gt;android&lt;/h1&gt;&lt;p&gt;Android的内核是Linux，它上面应用程序的主流是Java的，跑在Google实现的一个Java虚拟机Dalvik上（不是标准的Java虚拟机).不过觉得移动端开发没有web开发应用广,现在也有很多js框架支持移动端的开发。&lt;/p&gt;
&lt;h1 id=&quot;ios&quot;&gt;&lt;a href=&quot;#ios&quot; class=&quot;headerlink&quot; title=&quot;ios&quot;&gt;&lt;/a&gt;ios&lt;/h1&gt;&lt;p&gt;在OC还没有完全退下来的时候,swift也难以达到java之于Android的地步。不知apple还能火几年。&lt;/p&gt;
&lt;h1 id=&quot;cocos2d-x-cocos2d-js&quot;&gt;&lt;a href=&quot;#cocos2d-x-cocos2d-js&quot; class=&quot;headerlink&quot; title=&quot;cocos2d-x,cocos2d-js&quot;&gt;&lt;/a&gt;cocos2d-x,cocos2d-js&lt;/h1&gt;&lt;p&gt;当初工作刚来的时候业余时间几乎都是在折腾它。因为当时游戏很流行,媒体上也都在说游戏开发很赚钱。但最终还是没坚持下去。&lt;/p&gt;
&lt;h1 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; class=&quot;headerlink&quot; title=&quot;javascript&quot;&gt;&lt;/a&gt;javascript&lt;/h1&gt;&lt;p&gt;jquery,nodejs,angular.js,react.js,vue.js,express,koa,Electron…&lt;br&gt;(1)跨平台,前端,服务器,桌面,移动端,貌似都可以做嵌入式了。&lt;br&gt;(2)动态语言,类型判断在运行阶段,不需要写非常多的与类型有关的代码,阅读比较方便。调试可能要困难一些。&lt;br&gt;(3)开源社区很活跃。看github上star数目多的开源项目,很多都是JS的。&lt;/p&gt;
&lt;h1 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h1&gt;&lt;p&gt;网上以及算法书籍上整理的那些算法在实际工作中貌似用的机会比较少。面试用的到是挺多。况且在汽车公司用的基本上是一些工业算法如PID,自适应逆控制算法,控制算法要多一些。要么就是对一些物理信号进行滤波,对数据处理一下。但算法基础还是要有的。&lt;/p&gt;
&lt;h1 id=&quot;小结&quot;&gt;&lt;a href=&quot;#小结&quot; class=&quot;headerlink&quot; title=&quot;小结&quot;&gt;&lt;/a&gt;小结&lt;/h1&gt;&lt;p&gt;(1)工作中也就是C语言嵌入式开发。然后就是机械,控制(分为开环控制和闭环控制,这里会涉及到一些算法),电子电路。其实汽车是一个很好的智能终端。但在汽车上做人工智能的都是一些互联网公司。估计大部分传统的汽车公司所谓的”车联网”还需要很长一路要走。&lt;br&gt;(2)业余时间折腾各种互联网技术。时间较少,中断较多,但难以坚持到底,不用很快就忘记了。由于没有工作需求也难以深入。当然去年开始已经逐渐放弃了很多技术。专注于web(而非移动端),JS全栈(而非java和python)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;C语言&quot;&gt;&lt;a href=&quot;#C语言&quot; class=&quot;headerlink&quot; title=&quot;C语言&quot;&gt;&lt;/a&gt;C语言&lt;/h1&gt;&lt;p&gt;鉴于自己的工作很大一部分是嵌入式开发。C语言还是要好好掌握。并且现在嵌入式开发应用还是很广泛的。比如用arduino做个无人机等也是
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="skill" scheme="http://yoursite.com/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>Booklist</title>
    <link href="http://yoursite.com/2016/05/02/Booklist/"/>
    <id>http://yoursite.com/2016/05/02/Booklist/</id>
    <published>2016-05-02T06:10:27.000Z</published>
    <updated>2016-06-20T00:25:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;strong&gt; 在豆瓣上 &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 在豆瓣上 &lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="Science&Technology&Culture" scheme="http://yoursite.com/categories/Science-Technology-Culture/"/>
    
    
      <category term="BOOK" scheme="http://yoursite.com/tags/BOOK/"/>
    
  </entry>
  
  <entry>
    <title>git-github使用指南2</title>
    <link href="http://yoursite.com/2016/05/01/git-github%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%972/"/>
    <id>http://yoursite.com/2016/05/01/git-github使用指南2/</id>
    <published>2016-05-01T09:15:29.000Z</published>
    <updated>2016-05-01T09:54:12.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;github&quot;&gt;&lt;a href=&quot;#github&quot; class=&quot;headerlink&quot; title=&quot;github&quot;&gt;&lt;/a&gt;github&lt;/h1&gt;&lt;h3 id=&quot;2-1-github使用&quot;&gt;&lt;a href=&quot;#2-1-github使用&quot; class=&quot;headerlink&quot; title=&quot;2.1 github使用&quot;&gt;&lt;/a&gt;2.1 github使用&lt;/h3&gt;&lt;p&gt;注册GitHub账号。&lt;/p&gt;
&lt;p&gt;由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：&lt;/p&gt;
&lt;p&gt;步骤见&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;远程仓库&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(1)第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;youremail@example.com&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注:由于我的已经用github客户端设置过了,所以有.ssh文件夹。&lt;/p&gt;
&lt;p&gt;(2)登陆GitHub，打开“Account settings”，“SSH Keys”页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github29.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注:我的已经用github客户端设置过了,但上面显示There are no SSH keys with access to your account.。&lt;/p&gt;
&lt;p&gt;为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。&lt;/p&gt;
&lt;p&gt;当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。&lt;/p&gt;
&lt;p&gt;最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。&lt;/p&gt;
&lt;p&gt;如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。&lt;/p&gt;
&lt;h2 id=&quot;2-2-添加远程库&quot;&gt;&lt;a href=&quot;#2-2-添加远程库&quot; class=&quot;headerlink&quot; title=&quot;2.2 添加远程库&quot;&gt;&lt;/a&gt;2.2 添加远程库&lt;/h2&gt;&lt;p&gt;现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。&lt;/p&gt;
&lt;p&gt;(1)首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库&lt;br&gt;(2)在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库&lt;br&gt;(3)目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。&lt;br&gt;(4)现在，我们根据GitHub的提示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github31.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在本地的learngit仓库下运行命令：(上图中有)&lt;/p&gt;
&lt;p&gt;SSH为:&lt;code&gt;git@github.com:lhyhfut/learngit.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上图中还推荐:We recommend every repository include a README, LICENSE, and .gitignore.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一次&lt;code&gt;git remote add origin&lt;/code&gt;失败的原因是:找错目录了。这个目录里没有git init,没有.git文件夹。找到正确的本地工作区即可。&lt;br&gt;(5)请千万注意，把上面的lhyhfut替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。&lt;br&gt;添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。&lt;/p&gt;
&lt;p&gt;(6)把本地库的所有内容推送到远程库上：&lt;br&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github33.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;类似的:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git@github.com:lhyhfut/learngit.git&lt;/code&gt;也会报错:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github34.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错因:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用git clone命令从github上同步github上的代码库时，如果使用SSH链接（如我自己的learngit项目：git@github.com:lhyhfut/learngit.git），而你的SSH key没有添加到github帐号设置中，系统会报下面的错误：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Permission denied (publickey).&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fatal: Could not read from remote repository.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Please make sure you have the correct access rights
and the repository exists.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这时需要在本地创建SSH key，然后将生成的SSH key文件内容添加到github帐号上去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即:为github帐号添加SSH keys&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;前面讲到我的主目录已经有了.ssh文件夹&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github30.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错因:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面是 &lt;strong&gt;github_rsa.pub,github_rsa&lt;/strong&gt; (目前还不知道他们怎么生成的),而非所需要的 &lt;strong&gt;id_rsa和id_rsa.pub&lt;/strong&gt; 两个文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上面也讲了我的github——settings——SSH keys 中显示:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;There are no SSH keys with access to your account.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建SSH key的方法很简单，生成ssh key的过程如下图所示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;`ssh-keygen -t rsa -C “youremail@example.com”``&lt;br&gt;你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。&lt;/p&gt;
&lt;p&gt;如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有&lt;code&gt;id_rsa&lt;/code&gt;和&lt;code&gt;id_rsa.pub&lt;/code&gt;两个文件，这两个就是SSH Key的秘钥对，&lt;code&gt;id_rsa&lt;/code&gt;是私钥，不能泄露出去，&lt;code&gt;id_rsa.pub&lt;/code&gt;是公钥，可以放心地告诉任何人。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github35.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这下就生成了所需要的需要的 &lt;strong&gt;id_rsa和id_rsa.pub&lt;/strong&gt; 两个文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;登陆GitHub，打开“Account settings”，“SSH Keys”页面：&lt;/p&gt;
&lt;p&gt;然后，点“Add SSH Key”，填上 &lt;strong&gt;任意Title&lt;/strong&gt; ，在Key文本框里粘贴&lt;code&gt;id_rsa.pub&lt;/code&gt;文件的内容。使用&lt;code&gt;cat  ~/.ssh/id_rsa.pub&lt;/code&gt;命令即可。如果在linux下，也可以直接使用记事本打开该文件，但一定要注意其内容中包含空格和换行，要将其去掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github37.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github38.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面在来测试:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone git@github.com:lhyhfut/learngit.git&lt;/code&gt;  &lt;strong&gt;如果是在同一个目录下,会替换原有的本地的工作区的仓库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就不会报错了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github39.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;github上也可以查询你每一次的commit id,这样就不用终端&lt;code&gt;git log&lt;/code&gt;了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最好还是按照刚建项目时候github的推荐:&lt;strong&gt;We recommend every repository include a README, LICENSE, and .gitignore.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；&lt;/p&gt;
&lt;p&gt;关联后，使用命令git push -u origin master第一次推送master分支的所有内容；&lt;/p&gt;
&lt;p&gt;此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；&lt;/p&gt;
&lt;p&gt;(2)要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。&lt;/p&gt;
&lt;p&gt;Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。&lt;/p&gt;
&lt;h2 id=&quot;2-3-分支管理&quot;&gt;&lt;a href=&quot;#2-3-分支管理&quot; class=&quot;headerlink&quot; title=&quot;2.3 分支管理&quot;&gt;&lt;/a&gt;2.3 分支管理&lt;/h2&gt;&lt;p&gt;应用场景:假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。&lt;/p&gt;
&lt;p&gt;现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到(如果你commit的话,别人还是可以看的到的吧?比如github上面很多开源项目你都可以看得到它的分支。只是你可以先不commit,你提交的是能够稳定运行的master分支,新的分支只是做实验)，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上(因为新的分支是在master分支的基础上进行修改的。会替换掉以前的matser分支。这个合并到底是怎么合并的?如果同时有多个分支,合并的时候是否会造成冲突呢?在Bug分支章节提到了stash功能)，这样，既安全，又不影响别人工作(还是从协作,安全角度来考虑的)。&lt;/p&gt;
&lt;h3 id=&quot;2-3-1-创建与合并分支&quot;&gt;&lt;a href=&quot;#2-3-1-创建与合并分支&quot; class=&quot;headerlink&quot; title=&quot;2.3.1 创建与合并分支&quot;&gt;&lt;/a&gt;2.3.1 创建与合并分支&lt;/h3&gt;&lt;p&gt;原理本分见&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的本节教程&lt;/a&gt;,上面有图示,很清晰。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键词:matser指针,master分支,dev指针,dev分支(dev只是分支的名字),Head指针&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)每次提交(commit)，Git都把它们串成一条时间线，这条时间线就是一个分支(branch)。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。&lt;/p&gt;
&lt;p&gt;(2)初始没有其余分支的时候。master分支是一条线,master指针指向最新的提交,HEAD指针指向master分支,这样就确定了当前分支,以及当前分支的提交点。每次提交，master分支都会向前移动一步。&lt;/p&gt;
&lt;p&gt;(3)现在新建分支dev时,Git创建了一个dev指针。指向与master分支相同的提交点。再把HEAD指向dev分支,这样当前分支就在dev上了。所以Git创建一个分支很快:增加一个dev指针,更改HEAD指针的指向。工作区的文件等都没有任何变化。&lt;/p&gt;
&lt;p&gt;(4)不过，从现在开始，对工作区的修改和提交就是针对dev分支了(下面的终端命令中可以看到相关提示,确实是你新建分支后,对工作区的修改提交就针对新的分支了)，比如新提交一次后，dev指针往前移动一步，而master指针不变.&lt;/p&gt;
&lt;p&gt;(5)假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。所以Git合并分支也很快！就改改指针，工作区内容也不变。&lt;/p&gt;
&lt;p&gt;(6)合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实战&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建dev分支，然后切换到dev分支&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github41.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt;命令加上&lt;code&gt;-b&lt;/code&gt;参数表示创建并切换，相当于以下两条命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;git branch&lt;/code&gt;命令查看当前分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github42.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;命令会列出所有分支，当前分支前面会标一个*号。&lt;/p&gt;
&lt;p&gt;然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Creating a new branch is quick.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后提交：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github43.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，dev分支的工作完成，我们就可以切换回master分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github44.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：&lt;/p&gt;
&lt;p&gt;现在，我们把dev分支的工作成果合并到master分支上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github45.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。&lt;/p&gt;
&lt;p&gt;注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。&lt;/p&gt;
&lt;p&gt;当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。&lt;/p&gt;
&lt;p&gt;合并完成后，就可以放心地删除dev分支了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github46.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;删除后，查看branch，就只剩下master分支了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github47.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git鼓励大量使用分支：&lt;/p&gt;
&lt;p&gt;查看分支：&lt;code&gt;git branch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建分支：&lt;code&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换分支：&lt;code&gt;git checkout &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建+切换分支：&lt;code&gt;git checkout -b &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;合并某分支到当前分支：&lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;删除分支：&lt;code&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-3-2解决冲突&quot;&gt;&lt;a href=&quot;#2-3-2解决冲突&quot; class=&quot;headerlink&quot; title=&quot;2.3.2解决冲突&quot;&gt;&lt;/a&gt;2.3.2解决冲突&lt;/h3&gt;&lt;p&gt;出现场景:master分支和feature1分支各自都分别有新的提交.这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。&lt;/p&gt;
&lt;p&gt;新建feature1分支&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github48.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改readme.txt最后一行，改为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Creating a new branch is quick AND simple.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在feature1分支上提交：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github49.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;切换到master分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github50.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。&lt;/p&gt;
&lt;p&gt;在master分支上把readme.txt文件的最后一行改为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Creating a new branch is quick &amp;amp; simple.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在master分支上提交：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github51.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;master分支和feature1分支各自都分别有新的提交，这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突.用&lt;code&gt;git merge&lt;/code&gt;合并&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github52.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。&lt;code&gt;git status&lt;/code&gt;也可以告诉我们冲突的文件:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github53.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;直接查看readme.txt的内容：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github54.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，我们手动修改readme.txt如下后保存：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Creating a new branch is quick and simple.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在master分支上提交：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;手动修改,保存,提交后,提示冲突解决。&lt;/p&gt;
&lt;p&gt;用 &lt;strong&gt;带参数的git log&lt;/strong&gt; 也可以看到分支的合并情况：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github56.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到上面有2个冲突分支。但经过修改提交之后,冲突解决,分支正常合并。&lt;/p&gt;
&lt;p&gt;删除feature1分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github57.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当Git无法自动合并分支时，就必须首先解决冲突(手动修改?)。解决冲突后，再提交，合并完成。&lt;/p&gt;
&lt;p&gt;用git log –graph命令可以看到分支合并图。&lt;/p&gt;
&lt;h3 id=&quot;2-3-3分支管理策略&quot;&gt;&lt;a href=&quot;#2-3-3分支管理策略&quot; class=&quot;headerlink&quot; title=&quot;2.3.3分支管理策略&quot;&gt;&lt;/a&gt;2.3.3分支管理策略&lt;/h3&gt;&lt;p&gt;通常，合并分支时，如果可能，Git会用 &lt;strong&gt;Fast forward&lt;/strong&gt; 模式，但这种模式下，&lt;strong&gt;删除分支后，会丢掉分支信息&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;如果要强制 &lt;strong&gt;禁用Fast forward&lt;/strong&gt; 模式，Git就会 &lt;strong&gt;在merge时生成一个新的commit&lt;/strong&gt; ，这样，从 &lt;strong&gt;分支历史上就可以看出分支信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 2.3.2中&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;就没有看见2.3.1中创建并删除的dev分支的信息。&lt;/p&gt;
&lt;p&gt;下面我们实战一下&lt;code&gt;--no-ff&lt;/code&gt;方式的&lt;code&gt;git merge&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;创建并切换dev分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github58.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修改readme.txt文件，并提交一个新的commit：&lt;/p&gt;
&lt;p&gt;然后再切换到matser分支:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github59.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;准备合并dev分支，请注意&lt;code&gt;--no-ff&lt;/code&gt;参数，表示禁用&lt;code&gt;Fast forward&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github61.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为本次合并要创建一个新的commit，所以加上 &lt;strong&gt;-m&lt;/strong&gt; 参数，把commit描述写进去。&lt;/p&gt;
&lt;p&gt;合并后，我们用&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;看看分支历史：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github62.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，不使用&lt;code&gt;Fast forward&lt;/code&gt;模式，merge后就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github63.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;而以前使用&lt;code&gt;Fast forward&lt;/code&gt;模式，merge后就像这样：(看不到删除的dev分支信息)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github64.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分支策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际开发中，我们应该按照几个基本原则进行分支管理：&lt;/p&gt;
&lt;p&gt;首先，master分支应该是非常稳定的，也就是仅用来 &lt;strong&gt;发布新版本&lt;/strong&gt; ，平时不能在上面干活；&lt;/p&gt;
&lt;p&gt;那在哪干活呢？&lt;strong&gt;干活都在dev分支上&lt;/strong&gt; ，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；&lt;/p&gt;
&lt;p&gt;你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。&lt;/p&gt;
&lt;p&gt;所以，团队合作的分支看起来就像这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github65.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git分支十分强大，在团队开发中应该充分应用。&lt;/p&gt;
&lt;p&gt;合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。&lt;/p&gt;
&lt;h3 id=&quot;2-3-4Bug分支&quot;&gt;&lt;a href=&quot;#2-3-4Bug分支&quot; class=&quot;headerlink&quot; title=&quot;2.3.4Bug分支&quot;&gt;&lt;/a&gt;2.3.4Bug分支&lt;/h3&gt;&lt;p&gt;软件开发中，bug很常见。在Git中每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。&lt;/p&gt;
&lt;p&gt;切换到dev分支,修改readme.txt(先不add,commit)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github67.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;测试BUG分支。初始dev上的修改。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github66.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？&lt;/p&gt;
&lt;p&gt;幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github68.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github69.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github70.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在修复bug，修改readme.txt:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;修复BUG,修改readme.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后提交：(下图多截了&lt;code&gt;git checkout -b issue-101&lt;/code&gt;命令)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github71.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github72.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github73.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github74.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：&lt;/p&gt;
&lt;p&gt;一是用&lt;code&gt;git stash apply&lt;/code&gt;恢复，但是恢复后，stash内容并不删除，你需要用&lt;code&gt;git stash drop&lt;/code&gt;来删除；&lt;/p&gt;
&lt;p&gt;另一种方式是用&lt;code&gt;git stash pop&lt;/code&gt;，恢复的同时把stash内容也删了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github75.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;再用git stash list查看，就看不到任何stash内容了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github76.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以多次stash，恢复的时候，先用&lt;code&gt;git stash list&lt;/code&gt;查看，然后恢复指定的stash，用命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git stash apply stash@{0}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们现在还是在dev分支,readme.txt中的修改还在(不然就修复不了BUG了),仅仅是用&lt;code&gt;git stash pop&lt;/code&gt;之后再用用&lt;code&gt;git stash list&lt;/code&gt;看不到任何修改痕迹。但具体的修改内容还在,确实是修复BUG了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github77.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github78.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-3-4Feature分支&quot;&gt;&lt;a href=&quot;#2-3-4Feature分支&quot; class=&quot;headerlink&quot; title=&quot;2.3.4Feature分支&quot;&gt;&lt;/a&gt;2.3.4Feature分支&lt;/h3&gt;&lt;p&gt;软件开发中，总有无穷无尽的新的功能要不断添加进来。&lt;/p&gt;
&lt;p&gt;添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。&lt;/p&gt;
&lt;p&gt;现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。&lt;/p&gt;
&lt;p&gt;修改readme.txt:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;新建vulcan.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建并且换到vulcan feature分支&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github79.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;5分钟后，开发完毕：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github80.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;切回dev，准备合并：(下面出现2个是因为刚才自己有误操作,在matser分支也创建又删除了vulcan.py)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github81.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。&lt;/p&gt;
&lt;p&gt;但是，&lt;/p&gt;
&lt;p&gt;就在此时，接到上级命令，因经费不足，新功能必须取消！&lt;/p&gt;
&lt;p&gt;虽然白干了，但是这个分支还是必须就地销毁：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github82.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 此处教程上是删除不了的。教程上Git友情提醒，feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用命令git branch -D feature-vulcan。但自己这里却删除了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;p&gt;开发一个新feature，最好新建一个分支；&lt;/p&gt;
&lt;p&gt;如果要丢弃一个没有被合并过的分支，可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;强行删除。(自己这里用git branch -d &lt;name&gt;就直接删除了)&lt;/name&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-3-5多人协作&quot;&gt;&lt;a href=&quot;#2-3-5多人协作&quot; class=&quot;headerlink&quot; title=&quot;2.3.5多人协作&quot;&gt;&lt;/a&gt;2.3.5多人协作&lt;/h3&gt;&lt;p&gt;当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。&lt;/p&gt;
&lt;p&gt;要查看远程库的信息，用&lt;code&gt;git remote&lt;/code&gt;,或者，用&lt;code&gt;git remote -v&lt;/code&gt;显示更详细的信息.会显示可以抓取(fetch)和推送(push)的origin的地址。如果没有推送权限，就看不到push的地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推送分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github83.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果要推送其他分支，比如dev，就改成：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push origin dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github84.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github85.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？&lt;/p&gt;
&lt;p&gt;master分支是主分支，因此要时刻与远程同步；&lt;/p&gt;
&lt;p&gt;dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；&lt;/p&gt;
&lt;p&gt;bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；&lt;/p&gt;
&lt;p&gt;feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。&lt;/p&gt;
&lt;p&gt;总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;抓取分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多人协作时，大家都会往master和dev分支上推送各自的修改。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;你的小伙伴的操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）&lt;strong&gt;或者同一台电脑的另一个目录下克隆,重新打开一个终端窗口,切换到clone下来的learngit仓库目录&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github86.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用&lt;code&gt;git branch&lt;/code&gt;命令看看：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github87.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github88.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，他就可以在dev上继续修改(clone下来的learngit目录中的readme.txt)，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;远程dev,修改&lt;/code&gt;   //你的小伙伴的readme.txt上的修改&lt;/p&gt;
&lt;p&gt;然后，时不时地把dev分支push到远程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github89.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你的小伙伴的操作结束&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;你的操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件(现在你也修改了本地目录中的readme.txt, &lt;strong&gt;不是你的小伙伴clone下来的learngit目录&lt;/strong&gt; )作了修改( &lt;strong&gt;注:换到你操作了,在以前那个终端窗口&lt;/strong&gt;):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;本地的dev分支修改&lt;/code&gt;  //你的readme.txt上的修改&lt;/p&gt;
&lt;p&gt;并试图推送：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github90.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用&lt;code&gt;git pull&lt;/code&gt;(不是&lt;code&gt;git clone&lt;/code&gt;)(&lt;strong&gt;提示:You may want to first integrate the remote changes(e.g., ‘git pull …’) before pushing again.&lt;/strong&gt;)把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github91.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:提示There is no tracking information for the current branch.Please specify which branch you want to merge with.If you wish to set tracking information for this branch you can do so with:&lt;br&gt;git branch –set-upstream-to=origin/&lt;branch&gt; dev&lt;/branch&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:用–track 或 –set-upstream-to都是可以的,教程上用的–set-upstream已经被删除了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github92.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:这里不知道为什么会提示dev已经存在,但已经不影响下面的git pull&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再去&lt;code&gt;git pull&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github93.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这回&lt;code&gt;git pull&lt;/code&gt;成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840202368c74be33fbd884e71b570f2cc3c0d1dcf000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;解决冲突&lt;/a&gt;完全一样。解决后，提交，再push：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:方法也就是手动修改&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;readme.txt现在是这个样子:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github94.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;把&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;br&gt;以及&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; …. 8cf0804468ed80f7b92a3de5cc285388782fd989&lt;/p&gt;
&lt;p&gt;修改成你想要的就行了:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github95.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;提交,然后再去push。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:下面本应该是readme.txt写成教程上的hello.py了。但只是提交说明,不影响,考虑进行版本退回&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github96.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;github上也相应有了修改:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github97.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此，多人协作的工作模式通常是这样：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，可以试图用&lt;code&gt;git push origin branch-name&lt;/code&gt;推送自己的修改；&lt;/p&gt;
&lt;p&gt;如果推送失败，则因为远程分支比你的本地更新，需要先用&lt;code&gt;git pull&lt;/code&gt;试图合并；&lt;/p&gt;
&lt;p&gt;如果合并有冲突，则解决冲突，并在本地提交；&lt;/p&gt;
&lt;p&gt;没有冲突或者解决掉冲突后，再用&lt;code&gt;git push origin branch-name&lt;/code&gt;推送就能成功！&lt;/p&gt;
&lt;p&gt;如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令&lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这就是多人协作的工作模式，一旦熟悉了，就非常简单。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看远程库信息，使用&lt;code&gt;git remote -v&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;本地新建的分支如果不推送到远程，对其他人就是不可见的；&lt;/p&gt;
&lt;p&gt;从本地推送分支，使用&lt;code&gt;git push origin branch-name&lt;/code&gt;，如果推送失败，先用git pull抓取远程的新提交；&lt;/p&gt;
&lt;p&gt;在本地创建和远程分支对应的分支，使用&lt;code&gt;git checkout -b branch-name origin/branch-name&lt;/code&gt;，本地和远程分支的名称最好一致；&lt;/p&gt;
&lt;p&gt;建立本地分支和远程分支的关联，使用&lt;code&gt;git branch --set-upstream-to branch-name origin/branch-name&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;从远程抓取分支，使用&lt;code&gt;git pull&lt;/code&gt;，如果有冲突，要先处理冲突(&lt;strong&gt;手动处理成想要的样子&lt;/strong&gt;)。&lt;/p&gt;
&lt;h2 id=&quot;2-4标签管理&quot;&gt;&lt;a href=&quot;#2-4标签管理&quot; class=&quot;headerlink&quot; title=&quot;2.4标签管理&quot;&gt;&lt;/a&gt;2.4标签管理&lt;/h2&gt;&lt;p&gt;发布一个版本时，我们通常先在版本库中打一个标签(如v1.0之类的)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。&lt;/p&gt;
&lt;p&gt;Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。&lt;/p&gt;
&lt;h3 id=&quot;2-4-1创建标签&quot;&gt;&lt;a href=&quot;#2-4-1创建标签&quot; class=&quot;headerlink&quot; title=&quot;2.4.1创建标签&quot;&gt;&lt;/a&gt;2.4.1创建标签&lt;/h3&gt;&lt;p&gt;在Git中打标签非常简单，首先，切换到需要打标签的分支上：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github98.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，敲命令git tag &lt;name&gt;就可以打一个新标签：&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github99.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以用命令&lt;code&gt;git tag&lt;/code&gt;查看所有标签：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github100.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？&lt;/p&gt;
&lt;p&gt;方法是找到历史提交的commit id，然后打上就可以了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github102.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;比方说要对&lt;code&gt;add merge&lt;/code&gt;这次提交打标签，它对应的commit id是7e0d834，敲入命令,再用命令&lt;code&gt;git tag&lt;/code&gt;查看标签：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github101.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意，标签不是按时间顺序列出，而是按字母排序的。可以用&lt;code&gt;git show &amp;lt;tagname&amp;gt;&lt;/code&gt;查看标签信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github103.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，&lt;code&gt;v0.9&lt;/code&gt;确实打在&lt;code&gt;add merge&lt;/code&gt;这次提交上。&lt;/p&gt;
&lt;p&gt;还可以创建带有说明的标签，用&lt;code&gt;-a&lt;/code&gt;指定标签名，&lt;code&gt;-m&lt;/code&gt;指定说明文字：&lt;/p&gt;
&lt;p&gt;用命令&lt;code&gt;git show &amp;lt;tagname&amp;gt;&lt;/code&gt;可以看到说明文字：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github104.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;用命令&lt;code&gt;git show &amp;lt;tagname&amp;gt;&lt;/code&gt;可以看到说明文字：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github105.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;还可以通过&lt;code&gt;-s&lt;/code&gt;用私钥签名一个标签,签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github106.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果报错，请参考 &lt;strong&gt;GnuPG帮助文档配置Key&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;用命令&lt;code&gt;git show &amp;lt;tagname&amp;gt;&lt;/code&gt;可以看到PGP签名信息：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git show v0.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注:PGP签名先就不折腾了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用PGP签名的标签是不可伪造的，因为可以验证PGP签名。验证签名的方法比较复杂，这里就不介绍了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt;用于新建一个标签，默认为&lt;code&gt;HEAD&lt;/code&gt;，也可以指定一个commit id；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以指定标签信息；&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git tag -s &amp;lt;tagname&amp;gt; -m &amp;quot;blablabla...&amp;quot;&lt;/code&gt;可以用PGP签名标签；&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git tag&lt;/code&gt;可以查看所有标签。&lt;/p&gt;
&lt;h3 id=&quot;2-4-2操作标签&quot;&gt;&lt;a href=&quot;#2-4-2操作标签&quot; class=&quot;headerlink&quot; title=&quot;2.4.2操作标签&quot;&gt;&lt;/a&gt;2.4.2操作标签&lt;/h3&gt;&lt;p&gt;如果标签打错了，也可以删除：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github107.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。&lt;/p&gt;
&lt;p&gt;如果要推送某个标签到远程，使用命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github108.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者，一次性推送全部尚未推送到远程的本地标签：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github109.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;github上在releases选项中可以看到:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github110.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果标签已经推送到远程，要删除远程标签就麻烦一点，&lt;strong&gt;先从本地删除&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github111.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，从远程删除。删除命令也是push，但是格式如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/git%26github112.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;要看看是否真的从远程库删除了标签，可以登陆GitHub查看。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;可以推送一个本地标签；&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git push origin --tags&lt;/code&gt;可以推送全部未推送过的本地标签；&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个本地标签；&lt;/p&gt;
&lt;p&gt;命令&lt;code&gt;git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个远程标签。&lt;/p&gt;
&lt;h2 id=&quot;2-5使用GitHub&quot;&gt;&lt;a href=&quot;#2-5使用GitHub&quot; class=&quot;headerlink&quot; title=&quot;2.5使用GitHub&quot;&gt;&lt;/a&gt;2.5使用GitHub&lt;/h2&gt;&lt;p&gt;我们一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，&lt;strong&gt;既可以让别人参与你的开源项目，也可以参与别人的开源项目&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何参与一个开源项目呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(1)fork别人的仓库&lt;/p&gt;
&lt;p&gt;(2)从自己的账号下clone刚才你fork的仓库，这样你才能推送修改。如果从作者的仓库地址clone，因为没有权限，你将 &lt;strong&gt;不能推送修改&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;(3)剩下的就是对你自己的仓库操作了。如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。&lt;/p&gt;
&lt;p&gt;(4)如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个&lt;code&gt;pull request&lt;/code&gt;。当然，对方是否接受你的&lt;code&gt;pull request&lt;/code&gt;就不一定了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在GitHub上，可以任意Fork开源仓库；&lt;/p&gt;
&lt;p&gt;自己拥有Fork后的仓库的读写权限；&lt;/p&gt;
&lt;p&gt;可以推送pull request给官方仓库来贡献代码。&lt;/p&gt;
&lt;p&gt;#自定义Git&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这部分内容参考教程&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Git的其它可配置项&quot;&gt;&lt;a href=&quot;#Git的其它可配置项&quot; class=&quot;headerlink&quot; title=&quot;Git的其它可配置项&quot;&gt;&lt;/a&gt;Git的其它可配置项&lt;/h2&gt;&lt;h2 id=&quot;忽略特殊文件&quot;&gt;&lt;a href=&quot;#忽略特殊文件&quot; class=&quot;headerlink&quot; title=&quot;忽略特殊文件&quot;&gt;&lt;/a&gt;忽略特殊文件&lt;/h2&gt;&lt;p&gt;忽略某些文件时，需要编写.gitignore；&lt;/p&gt;
&lt;p&gt;.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！&lt;/p&gt;
&lt;p&gt;不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：&lt;a href=&quot;https://github.com/github/gitignore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github的gitignore配置&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置别名&quot;&gt;&lt;a href=&quot;#配置别名&quot; class=&quot;headerlink&quot; title=&quot;配置别名&quot;&gt;&lt;/a&gt;配置别名&lt;/h2&gt;&lt;h2 id=&quot;搭建Git服务器-局域网-Web&quot;&gt;&lt;a href=&quot;#搭建Git服务器-局域网-Web&quot; class=&quot;headerlink&quot; title=&quot;搭建Git服务器(局域网,Web)&quot;&gt;&lt;/a&gt;搭建Git服务器(局域网,Web)&lt;/h2&gt;&lt;p&gt;GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。&lt;/p&gt;
&lt;p&gt;搭建Git服务器需要准备一台运行&lt;code&gt;Linux的机器&lt;/code&gt;，强烈推荐用&lt;code&gt;Ubuntu或Debian&lt;/code&gt;，这样，通过几条简单的&lt;code&gt;apt命令&lt;/code&gt;就可以完成安装。&lt;/p&gt;
&lt;p&gt;(1)安装git&lt;/p&gt;
&lt;p&gt;(2)创建一个git用户，用来运行git服务&lt;/p&gt;
&lt;p&gt;(3)创建证书登录&lt;/p&gt;
&lt;p&gt;(4)初始化Git仓库&lt;/p&gt;
&lt;p&gt;(5)禁用shell登录&lt;/p&gt;
&lt;p&gt;(6)克隆远程仓库&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理公钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;管理权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搭建Git服务器非常简单，通常10分钟即可完成；&lt;/p&gt;
&lt;p&gt;要方便管理公钥，用&lt;code&gt;Gitosis&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;要像SVN那样变态地控制权限，用&lt;code&gt;Gitolite&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&quot;reference&quot;&gt;&lt;a href=&quot;#reference&quot; class=&quot;headerlink&quot; title=&quot;reference:&quot;&gt;&lt;/a&gt;reference:&lt;/h1&gt;&lt;h3 id=&quot;GitHub-漫游指南&quot;&gt;&lt;a href=&quot;#GitHub-漫游指南&quot; class=&quot;headerlink&quot; title=&quot;GitHub 漫游指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://github.phodal.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub 漫游指南&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;廖雪峰的Git教程&quot;&gt;&lt;a href=&quot;#廖雪峰的Git教程&quot; class=&quot;headerlink&quot; title=&quot;廖雪峰的Git教程&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;廖雪峰的Git教程&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;常用-Git-命令清单&quot;&gt;&lt;a href=&quot;#常用-Git-命令清单&quot; class=&quot;headerlink&quot; title=&quot;常用 Git 命令清单&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常用 Git 命令清单&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;git-recipes&quot;&gt;&lt;a href=&quot;#git-recipes&quot; class=&quot;headerlink&quot; title=&quot;git-recipes&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/geeeeeeeeek/git-recipes/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;git-recipes&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;图解git&quot;&gt;&lt;a href=&quot;#图解git&quot; class=&quot;headerlink&quot; title=&quot;图解git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://marklodato.github.io/visual-git-guide/index-zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;图解git&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;猴子都能懂的Git入门&quot;&gt;&lt;a href=&quot;#猴子都能懂的Git入门&quot; class=&quot;headerlink&quot; title=&quot;猴子都能懂的Git入门&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://backlogtool.com/git-guide/cn/intro/intro1_1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;猴子都能懂的Git入门&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;《走进git时代系列一》-你该怎么玩&quot;&gt;&lt;a href=&quot;#《走进git时代系列一》-你该怎么玩&quot; class=&quot;headerlink&quot; title=&quot;《走进git时代系列一》 你该怎么玩&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://yq.aliyun.com/articles/5843?spm=5176.blog6046.yqblogcon1.9.y0q4MC&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《走进git时代系列一》 你该怎么玩&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;Pro-Git-v2-中文版&quot;&gt;&lt;a href=&quot;#Pro-Git-v2-中文版&quot; class=&quot;headerlink&quot; title=&quot;Pro Git v2 中文版&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/pro-git-two/distributed-workflow.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pro Git v2 中文版&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&quot;Git的官方网站&quot;&gt;&lt;a href=&quot;#Git的官方网站&quot; class=&quot;headerlink&quot; title=&quot;Git的官方网站&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://git-scm.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git的官方网站&lt;/a&gt;&lt;/h3&gt;&lt;h1 id=&quot;To-do-list&quot;&gt;&lt;a href=&quot;#To-do-list&quot; class=&quot;headerlink&quot; title=&quot;To do list:&quot;&gt;&lt;/a&gt;To do list:&lt;/h1&gt;&lt;h3 id=&quot;1-gitlab-coding&quot;&gt;&lt;a href=&quot;#1-gitlab-coding&quot; class=&quot;headerlink&quot; title=&quot;1.gitlab,coding&quot;&gt;&lt;/a&gt;1.gitlab,coding&lt;/h3&gt;&lt;h3 id=&quot;2-git-flow-gitlab-flow-github-flow&quot;&gt;&lt;a href=&quot;#2-git-flow-gitlab-flow-github-flow&quot; class=&quot;headerlink&quot; title=&quot;2.git flow,gitlab flow,github flow&quot;&gt;&lt;/a&gt;2.git flow,gitlab flow,github flow&lt;/h3&gt;&lt;h3 id=&quot;3-Git与协作&quot;&gt;&lt;a href=&quot;#3-Git与协作&quot; class=&quot;headerlink&quot; title=&quot;3.Git与协作&quot;&gt;&lt;/a&gt;3.Git与协作&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;github&quot;&gt;&lt;a href=&quot;#github&quot; class=&quot;headerlink&quot; title=&quot;github&quot;&gt;&lt;/a&gt;github&lt;/h1&gt;&lt;h3 id=&quot;2-1-github使用&quot;&gt;&lt;a href=&quot;#2-1-github使用&quot; class=&quot;head
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="git&github" scheme="http://yoursite.com/tags/git-github/"/>
    
  </entry>
  
  <entry>
    <title>效率工具</title>
    <link href="http://yoursite.com/2016/05/01/%E6%95%88%E7%8E%87%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/05/01/效率工具/</id>
    <published>2016-05-01T03:37:39.000Z</published>
    <updated>2016-06-19T15:52:13.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;MACOS&quot;&gt;&lt;a href=&quot;#MACOS&quot; class=&quot;headerlink&quot; title=&quot;MACOS&quot;&gt;&lt;/a&gt;MACOS&lt;/h1&gt;&lt;h2 id=&quot;mkdir&quot;&gt;&lt;a href=&quot;#mkdir&quot; class=&quot;headerlink&quot; title=&quot;mkdir&quot;&gt;&lt;/a&gt;mkdir&lt;/h2&gt;&lt;h2 id=&quot;cat&quot;&gt;&lt;a href=&quot;#cat&quot; class=&quot;headerlink&quot; title=&quot;cat&quot;&gt;&lt;/a&gt;cat&lt;/h2&gt;&lt;h2 id=&quot;ls&quot;&gt;&lt;a href=&quot;#ls&quot; class=&quot;headerlink&quot; title=&quot;ls&quot;&gt;&lt;/a&gt;ls&lt;/h2&gt;&lt;p&gt;#Windows&lt;/p&gt;
&lt;p&gt;#linux(unbuntu)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 用思维导图总结了一下,还有遗漏的,慢慢添加吧 &lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://7xpy7l.com1.z0.glb.clouddn.com/%E5%B7%A5%E5%85%B720160410.jpeg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MACOS&quot;&gt;&lt;a href=&quot;#MACOS&quot; class=&quot;headerlink&quot; title=&quot;MACOS&quot;&gt;&lt;/a&gt;MACOS&lt;/h1&gt;&lt;h2 id=&quot;mkdir&quot;&gt;&lt;a href=&quot;#mkdir&quot; class=&quot;headerlink&quot; title=&quot;mkd
    
    </summary>
    
      <category term="Technology" scheme="http://yoursite.com/categories/Technology/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>终端命令</title>
    <link href="http://yoursite.com/2016/05/01/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2016/05/01/终端命令/</id>
    <published>2016-05-01T03:33:52.000Z</published>
    <updated>2016-05-01T03:35:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;MACOS&quot;&gt;&lt;a href=&quot;#MACOS&quot; class=&quot;headerlink&quot; title=&quot;MACOS&quot;&gt;&lt;/a&gt;MACOS&lt;/h1&gt;&lt;h2 id=&quot;mkdir&quot;&gt;&lt;a href=&quot;#mkdir&quot; class=&quot;headerlink&quot; title=&quot;mkdir&quot;&gt;&lt;/a&gt;mkdir&lt;/h2&gt;&lt;h2 id=&quot;cat&quot;&gt;&lt;a href=&quot;#cat&quot; class=&quot;headerlink&quot; title=&quot;cat&quot;&gt;&lt;/a&gt;cat&lt;/h2&gt;&lt;h2 id=&quot;ls&quot;&gt;&lt;a href=&quot;#ls&quot; class=&quot;headerlink&quot; title=&quot;ls&quot;&gt;&lt;/a&gt;ls&lt;/h2&gt;&lt;p&gt;#Windows&lt;/p&gt;
&lt;p&gt;#linux(unbuntu)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MACOS&quot;&gt;&lt;a href=&quot;#MACOS&quot; class=&quot;headerlink&quot; title=&quot;MACOS&quot;&gt;&lt;/a&gt;MACOS&lt;/h1&gt;&lt;h2 id=&quot;mkdir&quot;&gt;&lt;a href=&quot;#mkdir&quot; class=&quot;headerlink&quot; title=&quot;mkd
    
    </summary>
    
    
  </entry>
  
</feed>
